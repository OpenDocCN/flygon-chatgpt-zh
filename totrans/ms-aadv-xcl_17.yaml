- en: '[CHAPTER 16Functions and Subroutines in VBA](contents.xhtml#ch16a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Introduction](contents.xhtml#sc2_223a)'
  prefs: []
  type: TYPE_NORMAL
- en: The chapter will introduce the concepts of functions and subroutines in Excel’s
    VBA programming. It explains the differences between the two and will then delve
    into writing code inside modules using the Visual Basic Editor. The chapter also
    covers branching techniques to control the flow of code execution within procedures.
  prefs: []
  type: TYPE_NORMAL
- en: '[Structure](contents.xhtml#sc2_224a)'
  prefs: []
  type: TYPE_NORMAL
- en: 'In this chapter, we will go over the following topics:'
  prefs: []
  type: TYPE_NORMAL
- en: Writing procedures
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Visual Basic Editor
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Inserting Modules
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Writing Code Inside Module
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Sub Procedure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Function Procedure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Branching a procedure
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Objectives](contents.xhtml#sc2_225a)'
  prefs: []
  type: TYPE_NORMAL
- en: After studying this chapter, the reader will be able to write procedures and
    understand Visual Basic Editor, in order to insert modules, write codes and so
    on. The reader will also learn about sub procedure, function procedure as well
    as branching a procedure.
  prefs: []
  type: TYPE_NORMAL
- en: '[Writing procedures](contents.xhtml#sc2_226a)'
  prefs: []
  type: TYPE_NORMAL
- en: You can write code for each action that you record. All the procedures are written
    inside a Module.
  prefs: []
  type: TYPE_NORMAL
- en: For writing the code, you need to open Visual Basic Editor. The shortcut to
    open Visual Basic Editor, is Alt + F11.
  prefs: []
  type: TYPE_NORMAL
- en: 'A module is a collection of procedures. There are two types of procedures:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Sub procedures: Sub are used to automate Excel actions. A Sub procedure is
    a unit of code enclosed between the Sub and End Sub block. A sub procedure without
    any argument is a Macro.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Function procedures: Functions are used to automate any complex calculation.
    A Function procedure is enclosed between the Function and End Function block.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'The differences between the sub procedures and function procedures are explored
    in the following [Table 16.1](#tab16-1):'
  prefs: []
  type: TYPE_NORMAL
- en: '| Sub Procedure | Function Procedure |'
  prefs: []
  type: TYPE_TB
- en: '| It cannot return a value | It can return a value |'
  prefs: []
  type: TYPE_TB
- en: '| It can perform actions on excel objects | It cannot perform actions on excel
    objects |'
  prefs: []
  type: TYPE_TB
- en: 'Table 16.1: Differences between procedures'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here are some more points that you can keep in mind:'
  prefs: []
  type: TYPE_NORMAL
- en: Both procedures may or may not have arguments.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: A sub procedure with no arguments is a Macro.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: All macros are procedures, but not all procedures are macros.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Visual Basic Editor](contents.xhtml#sc2_227a)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The following [Figure 16.1](#fig16-1) shows the code window in Visual Basic
    Editor:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure_16.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.1: Code window in Visual Basic Editor'
  prefs: []
  type: TYPE_NORMAL
- en: 'The different parts in the Code window in Visual Basic Editor are as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Project Explorer: It displays a hierarchical list of the projects (Excel Workbooks)
    and all of the items contained and referenced by each project.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Properties Window: It lists the design-time properties for selected objects
    and their current settings. You can change these properties at design time. When
    you select multiple controls, the Properties window contains a list of the properties
    common to all the selected controls.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Code Window: Use the Code window to write, display, and edit Visual Basic code.
    You can open as many Code windows as you have modules, so you can easily view
    the code in different forms or modules, and copy and paste between them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Figure 16.2](#fig16-2) explores the Project Explorer in more detail:'
  prefs: []
  type: TYPE_NORMAL
- en: 'View Code: Displays the Code window so you can write and edit code associated
    with the selected item.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'View Object: Displays the Object window for the selected item, an existing
    Document or User form.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Toggle Folders: Hides and shows the object folders while still showing the
    individual items contained within them.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'List window: Lists the all loaded projects and the items included in each project'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'A Property is characteristic of any object. The Property Window shows in [Figure
    16.2](#fig16-2) shows properties of selected object:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure_16.2.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.2: Project Explorer and Property Window'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us now look at the different parts of the Code window (refer to [Figure
    16.3](#fig16-3)):'
  prefs: []
  type: TYPE_NORMAL
- en: 'Object Box: It displays a list of objects from current projects.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Procedure Window: It contains all procedures of current module or events of
    selected object.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Procedure View: It displays only one procedure at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Full Module View: It displays all procedures from current module.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Refer to the following [Figure 16.3](#fig16-3):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure_16.3.jpg)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.3: Code window'
  prefs: []
  type: TYPE_NORMAL
- en: '[Project Explorer keyboard shortcuts](contents.xhtml#sc3_228a)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Let us now look at the various keyboard shortcuts:'
  prefs: []
  type: TYPE_NORMAL
- en: 'ENTER + Æ: Open the selected file from the list, or expand and collapse the
    list to show its subentries.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SHIFT+ENTERÆ: Open the Code window for the selected file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'F7 + Æ: Open the Code window for the selected file.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'SHIFT+F10 Æ: View shortcut menu.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'HOME + Æ: Select the first file in the list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'END + Æ: Select the last file in the list.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'RIGHT ARROW + Æ: Expands a list and then selects a subentry in the list each
    time you press it.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'LEFT ARROW + Æ: Selects a subentry in the list and then moves up the list each
    time you press it until the subentry list collapses into a folder.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'UP ARROW + Æ: Moves up the list one entry at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'DOWN ARROW + Æ: Moves down the list one entry at a time.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Inserting modules](contents.xhtml#sc2_229a)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To insert a module, follow the given steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Select the book in which you want to store your procedures, as shown in [Figure
    16.4](#fig16-4) (1).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Select Insert menu, and then select Module, as shown in [Figure 16.4](#fig16-4)
    (2).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Module1 is added. You can change name through the property window, as shown
    in [Figure 16.4](#fig16-4) (3).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refer to [Figure 16.4](#fig16-4):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure_16.4.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.4: Inserting modules'
  prefs: []
  type: TYPE_NORMAL
- en: '[Writing code inside Modules](contents.xhtml#sc2_230a)'
  prefs: []
  type: TYPE_NORMAL
- en: 'To write code inside modules, follow these steps:'
  prefs: []
  type: TYPE_NORMAL
- en: Double click the Module inside which you want to write your code for the procedures,
    as shown in the following [Figure 16.5](#fig16-5) (a).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write your code for the procedures, as shown in the following [Figure 16.5](#fig16-5)
    (b).
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: 'Refer to the following [Figure 16.5](#fig16-5):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure_16.5.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.5: Writing code inside module'
  prefs: []
  type: TYPE_NORMAL
- en: '[Sub Procedure](contents.xhtml#sc2_231a)'
  prefs: []
  type: TYPE_NORMAL
- en: Sub procedure is a series of Visual Basic statements enclosed by the Sub and
    End Sub statements that performs actions, but does not return a value.
  prefs: []
  type: TYPE_NORMAL
- en: A Sub procedure can take arguments, such as constants, variables, or expressions
    that are passed by a calling procedure.
  prefs: []
  type: TYPE_NORMAL
- en: If a Sub procedure has no arguments, the Sub statement must include an empty
    set of parentheses
  prefs: []
  type: TYPE_NORMAL
- en: '[Macro](contents.xhtml#sc3_232a)'
  prefs: []
  type: TYPE_NORMAL
- en: 'The macro is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '| Sub HelloWorld()MsgBOx "Hello World"End Sub |'
  prefs: []
  type: TYPE_TB
- en: '[Figure 16.6](#fig16-6) features a macro:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure_16.6.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.6: Macro'
  prefs: []
  type: TYPE_NORMAL
- en: '[Function procedure](contents.xhtml#sc2_233a)'
  prefs: []
  type: TYPE_NORMAL
- en: A Function procedure is a series of Visual Basic statements enclosed by the
    Function and End Function statements.
  prefs: []
  type: TYPE_NORMAL
- en: A Function procedure is similar to a Sub procedure, but a function can also
    return a value. A Function procedure can take arguments, that are passed to it
    by a calling procedure.
  prefs: []
  type: TYPE_NORMAL
- en: If a Function procedure has no arguments, its Function statement must include
    an empty set of parentheses. A function returns a value by assigning a value to
    its name in one or more statements of the procedure.
  prefs: []
  type: TYPE_NORMAL
- en: For example,
  prefs: []
  type: TYPE_NORMAL
- en: '| Function Celsius (fDegrees)Celsius = (fDegrees - 32) * 5 / 9End Function
    |'
  prefs: []
  type: TYPE_TB
- en: 'Refer to the following [Figure 16.7](#fig16-7):'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure_16.7.png)'
  prefs: []
  type: TYPE_IMG
- en: 'Figure 16.7: User Defined Function'
  prefs: []
  type: TYPE_NORMAL
- en: '[Syntax to write functions](contents.xhtml#sc3_234a)'
  prefs: []
  type: TYPE_NORMAL
- en: '| Function name_of_function( argument1 , argument2 , …)processing the arguments
    name_of_function= ResultEnd Function |'
  prefs: []
  type: TYPE_TB
- en: 'Note: Arguments are the inputs you want from the end user to calculate result.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Both procedures may or may not have arguments:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Passing by Value Æ: If you pass an argument by value, the called procedure
    receives only a copy of the variable passed from the calling procedure. If the
    called procedure changes the value, the change affects only the copy and not the
    variable in the calling procedure.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Passing by Reference Æ: Whereas if you pass an argument by reference when calling
    a procedure, the procedure has access to the actual variable in memory. As a result,
    the variable’s value can be changed by the procedure. By default, arguments are
    by reference.'
  prefs: []
  type: TYPE_NORMAL
- en: '[Scenario 9](contents.xhtml#sc3_235a)'
  prefs: []
  type: TYPE_NORMAL
- en: Write a function to calculate Profit where profit is the difference of Selling
    price and Cost price. Profit function requires two arguments, that is, cost price
    and selling price.
  prefs: []
  type: TYPE_NORMAL
- en: Refer to Training File5.xls
  prefs: []
  type: TYPE_NORMAL
- en: '| Function Profit(CP, SP)Profit = SP - CPEnd Function |'
  prefs: []
  type: TYPE_TB
- en: '[Branching a Procedure](contents.xhtml#sc2_236a)'
  prefs: []
  type: TYPE_NORMAL
- en: If you want to run a block of code depending on the value of a condition, you
    can use the following decision structures.
  prefs: []
  type: TYPE_NORMAL
- en: ¾ If...Then...Endif
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ¾ If...Then...Else…Endif
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ¾ If...Then...Elseif…Then…Else…Endif
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: ¾ Select Case …End Select
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Use If...Then...Endif
  prefs: []
  type: TYPE_NORMAL
- en: A single condition and it runs a single statement or a block of statements.
  prefs: []
  type: TYPE_NORMAL
- en: Use If...Then...Else…Endif
  prefs: []
  type: TYPE_NORMAL
- en: A single condition but it runs two different statement or a block of statements,
    depending on result of the condition.
  prefs: []
  type: TYPE_NORMAL
- en: Use If...Then...Elseif…Then…Else…Endif OR Select Case… End
  prefs: []
  type: TYPE_NORMAL
- en: Selects more than one condition and runs one of several statement blocks.
  prefs: []
  type: TYPE_NORMAL
- en: '[Scenario 10](contents.xhtml#sc3_237a)'
  prefs: []
  type: TYPE_NORMAL
- en: Write a function to check whether person is eligible for voting or not. To check
    eligibility, the Vote function requires age as an argument.
  prefs: []
  type: TYPE_NORMAL
- en: Refer Training File5.xls
  prefs: []
  type: TYPE_NORMAL
- en: '| Function Vote(Age)If Age >= 18 ThenVote = "Eligible"ElseVote = "not eligible"EndIfEnd
    Function |'
  prefs: []
  type: TYPE_TB
- en: '[Scenario 11](contents.xhtml#sc3_238a)'
  prefs: []
  type: TYPE_NORMAL
- en: 'Write a function to find grade of employee based on basic salary as per given
    criteria (Using If Elseif):'
  prefs: []
  type: TYPE_NORMAL
- en: Grade Salary
  prefs: []
  type: TYPE_NORMAL
- en: D <8000
  prefs: []
  type: TYPE_NORMAL
- en: C 8000 – 15000
  prefs: []
  type: TYPE_NORMAL
- en: B 15000 – 25000
  prefs: []
  type: TYPE_NORMAL
- en: A >=25000
  prefs: []
  type: TYPE_NORMAL
- en: Refer Training File5.xls
  prefs: []
  type: TYPE_NORMAL
- en: '| Function Grade (salary)If salary<8000 ThenGrade = "D"ElseIf salary<15000
    ThenGrade = "C"ElseIf salary<25000 ThenGrade = "B"ElseGrade ="A"End IfEnd Function
    |'
  prefs: []
  type: TYPE_TB
- en: '[Scenario 12](contents.xhtml#sc3_239a)'
  prefs: []
  type: TYPE_NORMAL
- en: Write a function to find bonus based on grade (Using Select Case)
  prefs: []
  type: TYPE_NORMAL
- en: Grade bonus
  prefs: []
  type: TYPE_NORMAL
- en: A 25000
  prefs: []
  type: TYPE_NORMAL
- en: B 20000
  prefs: []
  type: TYPE_NORMAL
- en: C 15000
  prefs: []
  type: TYPE_NORMAL
- en: D 10000
  prefs: []
  type: TYPE_NORMAL
- en: Refer Training File5.xls
  prefs: []
  type: TYPE_NORMAL
- en: '| Function bonus(grade)Select Case gradeCase "a", "A"bonus = 25000Case "b",
    "B"bonus = 20000Case "c", "C"bonus = 15000Case Elsebonus = 10000End SelectEnd
    Function |'
  prefs: []
  type: TYPE_TB
- en: '[Scenario 13](contents.xhtml#sc3_240a)'
  prefs: []
  type: TYPE_NORMAL
- en: Write a function to calculate DA based on region. DA is 5% if region is either
    east or west, or else it will be 10%. Use OR Operator to check multiple conditions.
  prefs: []
  type: TYPE_NORMAL
- en: '[OR operator](contents.xhtml#sc4_241a)'
  prefs: []
  type: TYPE_NORMAL
- en: The OR operator is used to perform a logical conjunction on two expressions.
    It results true if any one of the expression results true.
  prefs: []
  type: TYPE_NORMAL
- en: '| Function CalcDa(Region, sal)If Region = "east" Or Region = "west" ThenCalcDa
    = sal * 0.05ElseCalcDa = sal * 0.1EndIfEnd Function |'
  prefs: []
  type: TYPE_TB
- en: '[Scenario 14](contents.xhtml#sc3_242a)'
  prefs: []
  type: TYPE_NORMAL
- en: Write a function to calculate DA based on region. DA is 5% if region is east
    and salary >10000, and otherwise, it is 10%
  prefs: []
  type: TYPE_NORMAL
- en: Use AND Operator to check multiple condition.
  prefs: []
  type: TYPE_NORMAL
- en: '[AND Operator](contents.xhtml#sc4_243a)'
  prefs: []
  type: TYPE_NORMAL
- en: Used to perform a logical conjunction on two expressions. AND results true if
    all the expressions result true.
  prefs: []
  type: TYPE_NORMAL
- en: '| Function CalcDa(Region, sal)If Region = "east" And sal > 10000 ThenCalcDa
    = sal * 0.05ElseCalcDa = sal * 0.1EndIf |'
  prefs: []
  type: TYPE_TB
- en: '[Conclusion](contents.xhtml#sc2_244a)'
  prefs: []
  type: TYPE_NORMAL
- en: Functions and Subroutines are powerful tools in VBA that help you automate tasks
    and perform calculations in Excel. By understanding how to write procedures, use
    the Visual Basic Editor, and apply branching techniques, you can enhance your
    VBA programming skills and create more efficient and dynamic Excel applications.
  prefs: []
  type: TYPE_NORMAL
- en: '[Exercise](contents.xhtml#sc2_245a)'
  prefs: []
  type: TYPE_NORMAL
- en: Write a Function to calculate the area of a rectangle given its length and width.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Subroutine to format a range of cells based on specific conditions,
    such as highlighting cells with values above a certain threshold.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Develop a Function that converts a temperature from Fahrenheit to Celsius.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Write a Subroutine to sort a column of data in ascending order.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Create a Function to calculate the factorial of a given number.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: Join our book’s Discord space
  prefs: []
  type: TYPE_NORMAL
- en: 'Join the book’s Discord Workspace for Latest updates, Offers, Tech happenings
    around the world, New Release and Sessions with the Authors:'
  prefs: []
  type: TYPE_NORMAL
- en: '**[https://discord.bpbonline.com](https://discord.bpbonline.com)**'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/fm1.png)'
  prefs: []
  type: TYPE_IMG
