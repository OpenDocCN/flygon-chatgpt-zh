- en: '[CHAPTER 9](toc.xhtml#c09)'
  id: totrans-0
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[第9章](toc.xhtml#c09)'
- en: '[`predictive-powers:` GPT Implementation Framework for Java](toc.xhtml#c09)'
  id: totrans-1
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[`predictive-powers:` Java的GPT实现框架](toc.xhtml#c09)'
- en: '[Introduction](toc.xhtml#s460a)'
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[介绍](toc.xhtml#s460a)'
- en: In the previous chapter, we explored `LangChain`, a GPT implementation framework
    for Python. In this chapter, we will explore `predictive-powers`, a software library
    that allows Java developers to quickly build generative AI[¹](#ftn1a)-based solutions.
    Understanding this library should be considered critical for a couple of reasons.
  id: totrans-3
  prefs: []
  type: TYPE_NORMAL
  zh: 在上一章中，我们探讨了Python的GPT实现框架`LangChain`。在本章中，我们将探讨`predictive-powers`，这是一个允许Java开发人员快速构建生成式人工智能[¹](#ftn1a)解决方案的软件库。出于几个原因，理解这个库应该被视为至关重要。
- en: Firstly, as Java remains a cornerstone in enterprise-level application development,
    integrating generative AI capabilities via this library significantly broadens
    the scope of what your Java applications can achieve. Imagine automating customer
    service inquiries, generating dynamic content, or even building intelligent data
    analytics tools, all within the comfort and familiarity of the Java ecosystem.
  id: totrans-4
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，由于Java仍然是企业级应用程序开发的基石，通过这个库集成生成式人工智能功能显著扩大了您的Java应用程序可以实现的范围。想象一下自动化客户服务查询，生成动态内容，甚至构建智能数据分析工具，所有这些都在Java生态系统的舒适和熟悉中实现。
- en: Secondly, the ease of implementation offered by this library democratizes access
    to advanced AI functionalities, making it particularly appealing for both seasoned
    Java developers and newcomers alike. If you’re interested in leveraging the power
    of GPT models but find the AI landscape daunting, this chapter serves as a navigational
    aid.
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 其次，该库提供的实现便利性使得普通用户可以访问先进的人工智能功能，这对经验丰富的Java开发人员和新手都非常吸引。如果您有兴趣利用GPT模型的强大功能，但发现人工智能领域令人生畏，本章将作为一个导航工具。
- en: After a quick comparison between Java and Python, this chapter will describe
    the library and its features.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在快速比较Java和Python之后，本章将描述该库及其特性。
- en: The first section unveils the key features of the library. You will learn about
    the underlying concepts such as API clients, endpoints, and services, with examples
    provided for enhanced comprehension.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 第一部分揭示了该库的关键特性。您将了解到诸如API客户端、端点和服务等基本概念，并提供示例以增进理解。
- en: We then embark on a journey to showcase the practical implementation of the
    library via an autonomous agent called the ‘Essay Writer’. This use case aims
    to illustrate the versatility of the library and its application to real-world
    tasks, thereby equipping you with actionable insights that can be adapted to various
    other applications.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，我们开始展示通过一个名为‘Essay Writer’的自主代理来展示该库的实际实现。这个用例旨在说明该库的多功能性及其在现实任务中的应用，从而为您提供可应用于各种其他应用程序的可操作见解。
- en: Following this, the chapter delves into the architectural patterns involved
    in implementing the Essay Writer, providing an exemplification of what has been
    presented in *[Chapter 4](c04.xhtml)*. Each section explores how the `predictive-powers`
    services are woven into the agent’s architecture, providing you with a roadmap
    for building similar applications.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 随后，本章深入探讨了实现Essay Writer所涉及的架构模式，提供了*[第4章](c04.xhtml)*中所呈现的内容的实例。每个部分都探讨了`predictive-powers`服务如何融入代理的架构，为您提供了构建类似应用程序的路线图。
- en: Finally, we delve into a code walkthrough. This section will be necessarily
    concise and will only highlight some of the implementation details. Please note
    that while we provide snippets of code for context, you are encouraged to visit
    the `predictive-powers` GitHub repository [10] if you are interested in exploring
    the complete commented code. While having a foundational understanding of the
    Java language can indeed foster a deeper comprehension of the code examples presented
    in this chapter, it is not a prerequisite. Readers unfamiliar with Java can still
    grasp the ease with which the library allows for the application of the concepts
    discussed in earlier sections. However, it is advisable for readers to have a
    basic acquaintance with software development principles, as not every technical
    term will be defined in depth.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 最后，我们深入了解代码。这一部分将是必要的简洁，并且只会突出一些实现细节。请注意，虽然我们提供了代码片段作为上下文，但如果您有兴趣探索完整的注释代码，我们鼓励您访问`predictive-powers`
    GitHub存储库[10]。虽然对Java语言有基本的了解确实可以促进对本章中所呈现的代码示例的更深入理解，但这并不是必需的。对Java不熟悉的读者仍然可以理解该库如何轻松应用于前几节讨论的概念。然而，建议读者对软件开发原则有基本了解，因为并非每个技术术语都会被深入定义。
- en: '[Structure](toc.xhtml#s461a)'
  id: totrans-11
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[结构](toc.xhtml#s461a)'
- en: 'In this chapter, we will discuss the following topics:'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章中，我们将讨论以下主题：
- en: Quick comparison of Java and Python programming languages
  id: totrans-13
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 快速比较Java和Python编程语言
- en: Overview of the `predictive-powers` library
  id: totrans-14
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`predictive-powers`库概述'
- en: 'Understanding essential concepts: API clients, endpoints, and services'
  id: totrans-15
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 理解基本概念：API客户端、端点和服务
- en: '`predictive-powers` use case: implementation of the ‘Essay Writer’ autonomous
    agent'
  id: totrans-16
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`predictive-powers`用例：实现‘Essay Writer’自主代理'
- en: ‘Essay Writer’ architecture
  id: totrans-17
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘Essay Writer’架构
- en: ‘Essay Writer’ code Walkthrough
  id: totrans-18
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: ‘Essay Writer’代码演示
- en: '[Java vs. Python](toc.xhtml#s462a)'
  id: totrans-19
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[Java vs. Python](toc.xhtml#s462a)'
- en: Python and Java, each holding a formidable position in the technology sector,
    cater distinctively to different professional niches, setting a rich ground for
    leveraging GPT in diverse applications.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: Python和Java在技术领域各自占据重要地位，为不同的专业领域提供了独特的服务，为在各种应用中利用GPT打下了丰富的基础。
- en: Renowned for its simplicity and readability, Python has evolved as a fundamental
    tool in the data science sector. The language’s user-friendly nature, combined
    with a rich repository of libraries, makes it a favored choice for data analysis
    and visualization, a characteristic that resonates well with professionals venturing
    into data science and artificial intelligence fields.
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: Python以其简单性和可读性而闻名，已成为数据科学领域的基本工具。该语言的用户友好性，加上丰富的库存储库，使其成为数据分析和可视化的首选，这一特点与涉足数据科学和人工智能领域的专业人士相契合。
- en: In contrast, Java remains a pillar in the enterprise application development
    landscape, with a reputation built on stability, built-in security features, and
    remarkable scalability to sustain large infrastructure projects. Its versatility
    extends further; Java can seamlessly operate across various environments such
    as enterprise servers, desktops, and notably, Android smartphones. This wide-ranging
    applicability makes it a preferred choice for developers aiming for adaptability
    and robust performance.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 相比之下，Java仍然是企业应用程序开发领域的支柱，以其稳定性、内置安全功能和显著的可扩展性而享有盛誉，以支持大型基础设施项目。其多功能性进一步延伸；Java可以在企业服务器、桌面和尤其是Android智能手机等各种环境中无缝运行。这种广泛的适用性使其成为开发人员追求适应性和强大性能的首选。
- en: In presenting both Python and Java frameworks, this book aims at enabling a
    nuanced understanding of the available technologies for potential GPT integration
    in applications, thereby facilitating a more informed approach for developers
    from different spheres.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 通过展示Python和Java框架，本书旨在使开发人员从不同领域更加了解可用技术，以便在应用程序中实现GPT集成，从而为他们提供更加明智的方法。
- en: '[The `predictive-powers` Library](toc.xhtml#s463a)'
  id: totrans-24
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[`predictive-powers`库](toc.xhtml#s463a)'
- en: The `predictive-powers` library is designed to simplify the integration of generative
    AI capabilities for Java developers. As an Apache-2.0 licensed resource, it is
    freely available on GitHub. While this section provides illustrative code snippets,
    to truly delve into its extensive functionality, we encourage a visit to the `predictive-powers`
    GitHub repository for comprehensive code and working examples.
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: '`predictive-powers`库旨在简化Java开发人员集成生成AI能力。作为Apache-2.0许可的资源，它在GitHub上免费提供。虽然本节提供了示例代码片段，但为了真正深入了解其广泛功能，我们鼓励访问`predictive-powers`GitHub存储库以获取全面的代码和工作示例。'
- en: 'These are the key features of the `predictive-powers` library:'
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: 这些是`predictive-powers`库的关键特性：
- en: It offers low-level access to OpenAI and Hugging Face Hosted Inference APIs.
    This functionality enables developers to directly interact with these APIs, if
    they choose.
  id: totrans-27
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它提供对OpenAI和Hugging Face托管推理API的低级访问。此功能使开发人员可以直接与这些API交互，如果他们选择的话。
- en: The library adds an abstraction layer for generative AI capabilities, aligning
    them with the CapabilityGPT framework exposed in *[Chapter 2](c02.xhtml)*. This
    design decision ensures compatibility with various capability providers, mitigating
    the risk of vendor lock-in. As we will illustrate, the library makes switching
    between providers trivial, allowing the developers to test different providers
    and upgrade to new language models once they are available.
  id: totrans-28
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该库为生成AI能力添加了一个抽象层，将它们与*[第2章](c02.xhtml)*中公开的CapabilityGPT框架对齐。这种设计决策确保与各种能力提供商的兼容性，减轻了供应商锁定的风险。正如我们将要说明的，该库使得在不同提供商之间切换变得微不足道，允许开发人员测试不同的提供商，并在新的语言模型可用时升级。
- en: It hosts an in-memory vector database crucial for abilities such as semantic
    search[²](#ftn2a), information extraction, and question answering. Upcoming versions
    will allow developers to utilize any existing vector database[³](#ftn3a).
  id: totrans-29
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 它托管了一个关键的内存向量数据库，对语义搜索[²](#ftn2a)、信息提取和问题回答等能力至关重要。即将推出的版本将允许开发人员利用任何现有的向量数据库[³](#ftn3a)。
- en: The library includes methods to conveniently read textual content from various
    sources, including web pages and files in formats such as MS Office, PDF, HTML,
    etc.
  id: totrans-30
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: 该库包括方便地从各种来源（包括网页和各种格式的文件，如MS Office、PDF、HTML等）读取文本内容的方法。
- en: '[Essential Components](toc.xhtml#s464a)'
  id: totrans-31
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[基本组件](toc.xhtml#s464a)'
- en: 'Here’s an explanation of the main components you need to familiarize yourself
    with to use the `predictive-powers` library. These are also depicted in *[Figure
    9.1](#fig9_1)*, which shows their interrelationships:'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: 以下是您需要熟悉的主要组件的解释，以便使用`predictive-powers`库。这些也在*[图9.1](#fig9_1)*中描述，显示它们的相互关系：
- en: '![](images/Figure-9.1.jpg)'
  id: totrans-33
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-9.1.jpg)'
- en: '**[Figure 9.1](#fig9_1):** Essential components of the `predictive-powers`
    library and their relationships'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '**[图9.1](#fig9_1)：** `predictive-powers`库的基本组件及其关系'
- en: '**API clients**'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '**API客户端**'
- en: API clients are the lowest-level components of the `predictive-powers` library,
    facilitating direct API calls to service providers. For example, developers might
    choose to directly access the OpenAI API via an `OpenAiClient` instantiation and
    the subsequent invocation of its methods.
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: API客户端是`predictive-powers`库的最底层组件，可直接调用服务提供商的API。例如，开发人员可以选择通过`OpenAiClient`实例化直接访问OpenAI
    API，并随后调用其方法。
- en: The API clients also offer secure access to API keys (required for service access)
    and automated management of temporary server unavailability scenarios, such as
    request flooding.
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: API客户端还提供对API密钥（用于服务访问）的安全访问以及临时服务器不可用情况的自动管理，例如请求洪水。
- en: In essence, API clients offer developers the liberty of direct API calls coupled
    with robust and efficient development via boilerplate code provision.
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 实质上，API客户端为开发人员提供了直接API调用的自由，同时通过提供样板代码实现了强大而高效的开发。
- en: 'Consider the following example of API client usage; the code instantiates an
    `OpenAiClient` and then uses it to execute a very simple prompt:'
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: 考虑以下API客户端使用示例；该代码实例化了一个`OpenAiClient`，然后使用它执行一个非常简单的提示：
- en: '`import io.github.mzattera.predictivepowers.openai.client.OpenAiClient;`'
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: '`import io.github.mzattera.predictivepowers.openai.client.OpenAiClient;`'
- en: '`import io.github.mzattera.predictivepowers.openai.client.completions.CompletionsRequest;`'
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: '`import io.github.mzattera.predictivepowers.openai.client.completions.CompletionsRequest;`'
- en: '`import io.github.mzattera.predictivepowers.openai.client.completions.CompletionsResponse;`'
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: '`import io.github.mzattera.predictivepowers.openai.client.completions.CompletionsResponse;`'
- en: '`public class OpenAiClientExample {`'
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: '`public class OpenAiClientExample {`'
- en: '`public static void main(String[] args) {`'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: '`public static void main(String[] args) {`'
- en: '`// Retrieve API key from OS`'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 从操作系统中检索API密钥`'
- en: '`// environment variable OpenAiClient.OS_ENV_VAR_NAME`'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 环境变量 OpenAiClient.OS_ENV_VAR_NAME`'
- en: '`try (OpenAiClient client = new OpenAiClient()) {`'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: '`try (OpenAiClient client = new OpenAiClient()) {`'
- en: '``// Complete a sentence; refer to`'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: '``// 完成一个句子；参考`'
- en: '`// https://platform.openai.com/docs/api-reference/completions`'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '`// https://platform.openai.com/docs/api-reference/completions`'
- en: '`// for details`'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 详情`'
- en: '`CompletionsRequest req = CompletionsRequest.builder()`'
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: '`CompletionsRequest req = CompletionsRequest.builder()`'
- en: '`.model(“text-davinci-003”)`'
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: '`.model(“text-davinci-003”)`'
- en: '`.maxTokens(50)`'
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: '`.maxTokens(50)`'
- en: '`.prompt(“Alan Turing was”)`'
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: '`.prompt(“Alan Turing was”)`'
- en: '`.build();`'
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: '`.build();`'
- en: '`CompletionsResponse resp = client.createCompletion(req);`'
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: '`CompletionsResponse resp = client.createCompletion(req);`'
- en: '`// Output result`'
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 输出结果`'
- en: '`System.out.println(resp.getChoices().get(0).getText());`'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '`System.out.println(resp.getChoices().get(0).getText());`'
- en: '``} // Closes client`'
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: '``} // 关闭客户端`'
- en: '`}`'
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: 'This will generate an output as follows:'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 这将生成以下输出：
- en: '`a British mathematician, computer scientist, logician, cryptanalyst, philosopher,
    and theoretical biologist who was highly influential in the development of theoretical
    computer science and artificial intelligence.`'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: '`一位英国数学家、计算机科学家、逻辑学家、密码分析家、哲学家和理论生物学家，对理论计算机科学和人工智能的发展产生了深远的影响。`'
- en: '**Endpoints and Services**'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '**端点和服务**'
- en: An endpoint is a capability provider, meaning it employs an API client to render
    different capabilities in the form of services.
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: 端点是一个能力提供者，意味着它使用API客户端以服务的形式呈现不同的能力。
- en: 'The following code illustrates the creation of an `AiEndpoint`, which provides
    access to generative AI capabilities, both for OpenAI and Hugging Face providers[⁴](#ftn4a):'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 以下代码说明了创建`AiEndpoint`的过程，该端点提供对生成AI功能的访问，包括OpenAI和Hugging Face提供商[⁴](#ftn4a)：
- en: '`// Builds a Hugging Face endpoint.`'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 构建Hugging Face端点。`'
- en: '`// API key is retrieved from OS environment.`'
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: '`// API密钥从操作系统环境中检索。`'
- en: '`AiEndpoint endpoint = new HuggingFaceEndpoint();`'
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: '`AiEndpoint endpoint = new HuggingFaceEndpoint();`'
- en: '`// Builds an OpenAI endpoint from an existing API client`'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 从现有API客户端构建OpenAI端点`'
- en: '`OpenAiClient cli = new OpenAiClient();`'
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: '`OpenAiClient cli = new OpenAiClient();`'
- en: '`AiEndpoint endpoint = new OpenAiEndpoint(cli);`'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: '`AiEndpoint endpoint = new OpenAiEndpoint(cli);`'
- en: 'Once an endpoint is created, it enables access to services. These are high-level
    generative AI capabilities, akin to those described in the CapabilityGPT framework.
    Current services include:'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦创建了端点，它就可以访问服务。这些是高级生成AI功能，类似于CapabilityGPT框架中描述的那些。当前的服务包括：
- en: '`**ModelService**`: Provides access to model metadata such as list of models,
    model context size, etc.'
  id: totrans-74
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**ModelService**`：提供对模型元数据的访问，例如模型列表、模型上下文大小等。'
- en: '`**CompletionService**`: Performs text completion by executing provided text
    prompts. This is the most flexible service since we can instruct it to execute
    different tasks by providing the right prompts, as discussed in *[Chapter 5](c05.xhtml)*.
    With proper instructions, this service can provide capabilities such as **Assessment**,
    **Classification**, **Creation**, **Information Extraction**, **Matchmaking**,
    **Summarization**, **Transformation**, and more.'
  id: totrans-75
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**CompletionService**`：通过执行提供的文本提示来执行文本完成。这是最灵活的服务，因为我们可以通过提供正确的提示来指示它执行不同的任务，如*[第5章](c05.xhtml)*中所讨论的那样。通过适当的指示，该服务可以提供**评估**、**分类**、**创作**、**信息提取**、**撮合**、**摘要**、**转换**等功能。'
- en: '`**ChatService**`: Handles conversations between the user and an agent, managing
    the agent’s personality and the conversation history. This would correspond to
    the **Communication** capability. Also notice that `ChatService` can provide all
    the capabilities that `CompletionService` exposes, as prompt execution can be
    seen as a conversation with a single exchange, with the user starting the conversation
    by providing the prompt and the agent responding to it, thus executing it.'
  id: totrans-76
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**ChatService**`：处理用户和代理之间的对话，管理代理的个性和对话历史。这将对应于**通信**功能。还要注意，`ChatService`可以提供`CompletionService`公开的所有功能，因为提示执行可以被视为与用户进行单次交换的对话，用户通过提供提示开始对话，代理对其做出响应，从而执行它。'
- en: '`**EmbeddingService**`: Offers text embeddings[²](#ftn2a) and similarity calculation
    features, which are essential for providing the **Semantic Search** capability
    in the CapabilityGPT framework.'
  id: totrans-77
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**EmbeddingService**`：提供文本嵌入和相似性计算功能，这对于CapabilityGPT框架中的**语义搜索**功能至关重要。'
- en: '`**QuestionAnsweringService**`: Maps directly into the **Question Answering**
    capability of the CapabilityGPT framework by answering questions using a user-provided
    context.'
  id: totrans-78
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**QuestionAnsweringService**`：通过使用用户提供的上下文来直接映射到CapabilityGPT框架中的**问答**功能来回答问题。'
- en: '`**QuestionExtractionService**`: Extracts different kinds of questions from
    a text (for example, true/false questions, multiple choice quizzes, etc.). This
    is an example of the **Information Extraction** capability.'
  id: totrans-79
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**QuestionExtractionService**`：从文本中提取不同类型的问题（例如，判断题、多项选择测验等）。这是**信息提取**功能的一个例子。'
- en: '`**ImageGenerationService**`: Generates images using either OpenAI (DALL-E
    3[⁵](#ftn5a)) or Hugging Face (Openjourney[⁶](#ftn6a)). This is another example
    of the **Creation** capability.'
  id: totrans-80
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**ImageGenerationService**`：使用OpenAI（DALL-E 3[⁵](#ftn5a)）或Hugging Face（Openjourney[⁶](#ftn6a)）生成图像。这是**创作**功能的另一个例子。'
- en: '`**SearchService**`: Searches the Internet for data. This is an example of
    an external tool that can be used as a building block for agents[⁷](#ftn7a).'
  id: totrans-81
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**SearchService**`：在互联网上搜索数据。这是一个可以作为代理的构建块使用的外部工具的例子[⁷](#ftn7a)。'
- en: 'The following example showcases the use of `CompletionService` to complete
    a sentence. After creating an endpoint, the code obtains an instance of a `CompletionService`
    from it, which is used to complete a simple prompt. Note how the service abstraction
    allows for changing service providers (OpenAI or Hugging Face) with a single line
    of code modification:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 以下示例展示了使用`CompletionService`完成句子的用法。创建端点后，代码从中获取了一个`CompletionService`的实例，用于完成一个简单的提示。请注意，服务抽象允许使用一行代码修改来更改服务提供者（OpenAI或Hugging
    Face）：
- en: '`import io.github.mzattera.predictivepowers.AiEndpoint;`'
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: '`import io.github.mzattera.predictivepowers.AiEndpoint;`'
- en: '`import io.github.mzattera.predictivepowers.huggingface.endpoint.HuggingFaceEndpoint;`'
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: '`import io.github.mzattera.predictivepowers.huggingface.endpoint.HuggingFaceEndpoint;`'
- en: '`import io.github.mzattera.predictivepowers.openai.endpoint.OpenAiEndpoint;`'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: '`import io.github.mzattera.predictivepowers.openai.endpoint.OpenAiEndpoint;`'
- en: '`import io.github.mzattera.predictivepowers.services.CompletionService;`'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: '`import io.github.mzattera.predictivepowers.services.CompletionService;`'
- en: '`public class CompletionExample {`'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: '`public class CompletionExample {`'
- en: '`public static void main(String[] args) throws Exception {`'
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: '`public static void main(String[] args) throws Exception {`'
- en: '`// Uncomment the below to use OpenAI`'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '`// Uncomment the below to use OpenAI`'
- en: '`AiEndpoint endpoint = new OpenAiEndpoint();`'
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: '`AiEndpoint endpoint = new OpenAiEndpoint();`'
- en: '`// Uncomment the below to use Hugging Face`'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '`// Uncomment the below to use Hugging Face`'
- en: '`// AiEndpoint endpoint = new HuggingFaceEndpoint();`'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: '`// AiEndpoint endpoint = new HuggingFaceEndpoint();`'
- en: '`try (endpoint) {`'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '`try (endpoint) {`'
- en: '`CompletionService cs = endpoint.getCompletionService();`'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: '`CompletionService cs = endpoint.getCompletionService();`'
- en: '`System.out.println(cs.complete(“Alan Turing was”).getText());`'
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: '`System.out.println(cs.complete(“Alan Turing was”).getText());`'
- en: '`}`'
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '**Knowledge Base**'
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: '**Knowledge Base**'
- en: A knowledge base in the context of the `predictive-powers` library is an in-memory
    vector database housing text embeddings[⁸](#ftn8a). Each embedding can possess
    an array of properties encapsulated as a `Map`. The knowledge base presents methods
    for semantic search based on embedding similarity and other filtering criteria.
    It can be partitioned into domains to allow separate searches and optimize performance.
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: 在`predictive-powers`库的上下文中，知识库是一个内存中的向量数据库，其中包含文本嵌入[⁸](#ftn8a)。每个嵌入可以具有作为`Map`封装的属性数组。知识库提供了基于嵌入相似性和其他过滤条件的语义搜索方法。它可以分区为域，以允许单独搜索并优化性能。
- en: '[`predictive-powers` Use Case](toc.xhtml#s465a)'
  id: totrans-101
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[`predictive-powers` Use Case](toc.xhtml#s465a)'
- en: In this section, we will guide you through the implementation of an autonomous
    agent called the ‘Essay Writer’ (‘***Writer***’ for short), whose goal is to produce
    essays about different topics. The Writer is designed to take a short textual
    description of an essay content, search the Internet for relevant information,
    download and collate it, generating a complete essay.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们将指导您实现一个名为“Essay Writer”（简称“***Writer***”）的自主代理，其目标是撰写关于不同主题的文章。Writer旨在接收文章内容的简短文本描述，搜索互联网上的相关信息，下载和整理它，生成完整的文章。
- en: We will provide code snippets to demonstrate how the capabilities of the CapabilityGPT
    framework are utilized to build the agent. For the full code of the agent, you
    can refer to the `predictive-powers` GitHub repository.
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 我们将提供代码片段来演示如何利用CapabilityGPT框架的功能来构建代理。有关代理的完整代码，您可以参考`predictive-powers` GitHub存储库。
- en: '**Architecture**'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: '**Architecture**'
- en: This section provides a detailed explanation of the architecture employed in
    implementing the Writer, using the three-layer approach that should be familiar
    from *[Chapter 4](c04.xhtml)*[⁹](#ftn9a). This architecture is designed to be
    extensible, allowing it to handle more complex scenarios. However, the fundamental
    layered approach will remain consistent, utilizing `predictive-powers` services
    to create a modular architecture for the application and AI layers.
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: 本节详细解释了实现Writer所采用的架构，使用了应该在*[Chapter 4](c04.xhtml)*[⁹](#ftn9a)中熟悉的三层方法。该架构旨在具有可扩展性，使其能够处理更复杂的情况。但是，基本的分层方法将保持一致，利用`predictive-powers`服务来为应用程序和AI层创建模块化架构。
- en: '![](images/Figure-9.2.jpg)'
  id: totrans-106
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-9.2.jpg)'
- en: '**[Figure 9.2](#fig9_2):** Essay Writer – Architecture'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '**[Figure 9.2](#fig9_2):** Essay Writer – Architecture'
- en: '**User Experience Layer**'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: '**User Experience Layer**'
- en: In our example, to maintain simplicity, users will interact with the Writer
    solely via the computer console. The Writer can be launched with various command-line
    options to execute different steps in the essay writing task (please refer to
    the full application code for details). The output generated will consist of both
    JSON[^(10)](#ftn10a) and plain text files that can be inspected by using any text
    file viewer.
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 在我们的示例中，为了保持简单，用户将仅通过计算机控制台与Writer进行交互。可以使用各种命令行选项启动Writer以执行文章写作任务中的不同步骤（有关详细信息，请参阅完整的应用程序代码）。生成的输出将包括可以使用任何文本文件查看器检查的JSON[^(10)](#ftn10a)和纯文本文件。
- en: '**Application Layer**'
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: '**Application Layer**'
- en: At the application layer, the orchestration agent responds to user commands
    by executing the corresponding application flow and properly coordinating different
    `predictive-powers` services. Later in this chapter, we will delve into the detailed
    description of these application flows.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 在应用层，编排代理通过执行相应的应用流程并正确协调不同的`predictive-powers`服务来响应用户命令。本章后面，我们将深入介绍这些应用流程的详细描述。
- en: 'In addition, an information retrieval component is also present. It is responsible
    for searching the Internet for relevant content that will be used to create the
    essay:'
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: 此外，还有一个信息检索组件。它负责在互联网上搜索相关内容，这些内容将用于创建文章：
- en: '`**SearchService**`: The `SearchService` performs web searches based on the
    queries generated by the `ChatService` (see below). It returns a list of links
    to relevant web pages for the orchestration agent to download and utilize.'
  id: totrans-113
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**SearchService**`: `SearchService`根据`ChatService`生成的查询执行网络搜索。它返回相关网页的链接列表，供编排代理下载和利用。'
- en: '`**GoogleEndpoint**`: This component facilitates the integration with Google’s
    Custom Search JSON API to bolster the functionality of the `SearchService`. It
    allows users to craft custom search engines, underpinned by Google’s robust search
    capabilities. This endpoint can then be directed towards these engines. It empowers
    users to construct potent search utilities, capable of restricting searches to
    specific websites, filtering out mature content, confining searches to particular
    regions, and more.'
  id: totrans-114
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**GoogleEndpoint**`：该组件促进了与谷歌自定义搜索JSON API的集成，以增强`SearchService`的功能。它允许用户创建定制搜索引擎，以谷歌强大的搜索能力为基础。然后可以将该端点指向这些引擎。它赋予用户构建强大搜索工具的能力，能够限制搜索到特定网站，过滤成人内容，将搜索限制在特定地区等。'
- en: '**AI Layer**'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '**AI层**'
- en: The AI layer is where CapabilityGPT capabilities are implemented and exposed
    as `predictive-powers` services. Here, the endpoints connect to the relevant service
    providers to execute the tasks required by the orchestration agent.
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: AI层是CapabilityGPT功能的实现和公开的`predictive-powers`服务。在这里，端点连接到相关的服务提供商，执行编排代理所需的任务。
- en: '`**ChatService**`: This service will provide the creation capabilities needed
    to build the essay structure. It will start from its draft description, create
    search queries, search relevant materials from the web, and write each section
    of the essay by summarizing and rewriting the knowledge gathered from the Internet.'
  id: totrans-117
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**ChatService**`：该服务将提供构建论文结构所需的创建能力。它将从其草稿描述开始，创建搜索查询，从网络中搜索相关材料，并通过总结和重写从互联网收集的知识来撰写论文的每个部分。'
- en: '`**EmbeddingService**`: This service is employed to embed the content downloaded
    from the Internet, enabling it to be stored in the knowledge base to power semantic
    search.'
  id: totrans-118
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**EmbeddingService**`：该服务用于嵌入从互联网下载的内容，使其能够存储在知识库中以支持语义搜索。'
- en: '`**OpenAiEndpoint**`: This endpoint connects to the required OpenAI models[^(11)](#ftn11a).'
  id: totrans-119
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**OpenAiEndpoint**`：该端点连接到所需的OpenAI模型[^(11)](#ftn11a)。'
- en: '`**KnowledgeBase**`: This provides an in-memory vector database to store the
    downloaded content and retrieve it when needed to write different sections of
    the essay. Additionally, the `KnowledgeBase` can be persisted as a single file
    on the user’s PC, allowing users to regenerate the essay without re-downloading
    the relevant web pages.'
  id: totrans-120
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**KnowledgeBase**`：这提供了一个内存向量数据库，用于存储下载的内容，并在需要时检索它，以撰写论文的不同部分。此外，`KnowledgeBase`可以作为单个文件持久化在用户的个人电脑上，允许用户重新生成论文，而无需重新下载相关网页。'
- en: It’s important to remark that the services at both layers are independent of
    the endpoints and knowledge base used. This abstraction ensures that the application
    layer remains decoupled from the specific implementations provided by each service
    provider. During development, this means the software engineers can easily test
    different service providers and language models, to decide which one is more suitable
    for the solution being built.
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: 重要的是要指出，两个层的服务都独立于端点和知识库的使用。这种抽象确保应用层与每个服务提供商提供的具体实现保持解耦。在开发过程中，这意味着软件工程师可以轻松测试不同的服务提供商和语言模型，以决定哪一个更适合正在构建的解决方案。
- en: '**Workflow**'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '**工作流程**'
- en: 'The workflow diagram, as shown in *[Figure 9.3](#fig9_3)*, illustrates the
    steps involved in transforming a user’s essay draft into the final essay produced
    by the Writer:'
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 如*[图9.3](#fig9_3)*所示的工作流程图，说明了将用户的论文草稿转化为作者生成的最终论文所涉及的步骤：
- en: A user provides a textual description of the essay content.
  id: totrans-124
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 用户提供论文内容的文本描述。
- en: The Writer generates the essay structure (chapters and sections) as a JSON file.
  id: totrans-125
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作者生成论文结构（章节和部分）作为JSON文件。
- en: The Writer generates Google queries to search for information suitable to populate
    each section of the essay.
  id: totrans-126
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作者生成谷歌查询，以搜索适合填充论文每个部分的信息。
- en: The Writer then executes each query and compiles the list of relevant web page
    links, as returned by the Google search engine.
  id: totrans-127
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作者然后执行每个查询，并编制由谷歌搜索引擎返回的相关网页链接列表。
- en: The Writer downloads the content of each link and creates corresponding embeddings,
    which are stored in the `KnowledgeBase`.
  id: totrans-128
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 作者下载每个链接的内容并创建相应的嵌入，这些嵌入存储在`KnowledgeBase`中。
- en: For each section of the essay, the Writer uses semantic search to retrieve relevant
    information from the knowledge base.
  id: totrans-129
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 对于论文的每个部分，作者使用语义搜索从知识库中检索相关信息。
- en: Finally, the Writer uses this information to produce each section of the essay,
    resulting in a single text file output.
  id: totrans-130
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 最后，作者使用这些信息来生成论文的每个部分，从而产生单个文本文件输出。
- en: '![](images/Figure-9.3.jpg)'
  id: totrans-131
  prefs: []
  type: TYPE_IMG
  zh: '![](images/Figure-9.3.jpg)'
- en: '**[Figure 9.3](#fig9_3):** The Essay Writer – Workflow'
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: '**[图9.3](#fig9_3)**：论文作者-工作流程'
- en: Let’s examine each step in detail and explore the CapabilityGPT framework’s
    capabilities utilized at each stage.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 让我们详细研究每个步骤，并探索CapabilityGPT框架在每个阶段使用的能力。
- en: 'The process begins with the user providing a textual description of the essay,
    as follows:'
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: 该过程始于用户提供论文的文本描述，如下所示：
- en: '`Write an essay about the Italian city of Padua.`'
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: '`写一篇关于意大利帕多瓦市的论文。`'
- en: '`The first chapter describes the geography and demographics of the city, its
    economics, and its history from proto-history to the modern age.`'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: '`第一章描述了这座城市的地理和人口统计情况，经济状况，以及从原始历史到现代的历史。`'
- en: '`Additionally, have a section for the famous people who lived in Padua.`'
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: '`此外，还有一个章节介绍了生活在帕多瓦的名人。`'
- en: '`The second chapter focuses on traditions and folklore, including traditional
    events and festivals, food and wine, and other relevant topics.`'
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: '`第二章侧重于传统和民间传说，包括传统活动和节日，食品和葡萄酒，以及其他相关主题。`'
- en: '`The last chapter is a collection of notable sights, with separate sections
    for each attraction, describing the places of interest and visitors’ experiences.`'
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: '`最后一章是一个显著景点的集合，每个景点都有单独的部分，描述了有趣的地方和游客的经历。`'
- en: 'It’s important to note that the Writer understands the essay as consisting
    of chapters divided into sections. Although more complex structures are possible,
    for simplicity, we will focus on this format. The essay structure is initially
    generated using ChatGPT generation capabilities, creating chapters and sections
    based on the provided description. The resulting structure is saved in JSON format
    for further processing. Here’s an example structure:'
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: 需要注意的是，作者将论文视为由章节组成的结构。尽管更复杂的结构是可能的，但为简单起见，我们将专注于这种格式。论文结构最初是使用ChatGPT生成能力生成的，根据提供的描述创建章节和部分。生成的结构以JSON格式保存以供进一步处理。以下是一个示例结构：
- en: '`{`'
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '`“title”: “My Essay”,`'
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: '“title”: “我的论文”,'
- en: '`“description”: “Write an essay about the Italian city of Padua.\r\nThe first
    chapter describes the geography and demographics of the city, its economics, and
    its history from proto-history to the modern age.\r\nAdditionally, have a section
    for the famous people who lived in Padua.\r\nThe second chapter focuses on traditions
    and folklore, including traditional events and festivals, food and wine, and other
    relevant topics.\r\nThe last chapter is a collection of notable sights, with separate
    sections for each attraction, describing the places of interest and visitors’
    experiences.\r\n”,`'
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: '“description”: “写一篇关于意大利帕多瓦市的论文。\r\n第一章描述了城市的地理和人口统计信息，其经济状况，以及从原始历史到现代的历史。\r\n此外，还有一个关于居住在帕多瓦的名人的部分。\r\n第二章重点介绍传统和民间故事，包括传统活动和节日、食品和葡萄酒等相关主题。\r\n最后一章是著名景点的集合，每个景点都有单独的部分，描述了有趣的地方和游客的体验。\r\n”,'
- en: '`“chapters”: [`'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '“chapters”: ['
- en: '`{`'
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '`“id”: “1”,`'
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: '“id”: “1”,'
- en: '`“title”: “Geography and Demographics”,`'
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: '“title”: “地理和人口统计”,'
- en: '`“summary”: “This chapter provides an overview of the geography and demographics
    of the city of Padua. It explores the city’s location, climate, and natural features.
    Additionally, it delves into the population demographics, including the ethnic
    makeup, age distribution, and population growth over time.”,`'
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: '“summary”: “本章概述了帕多瓦市的地理和人口统计信息。它探讨了城市的位置、气候和自然特征。此外，它深入研究了人口统计信息，包括种族构成、年龄分布和人口随时间的增长。”,'
- en: '`“sections”: [`'
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: '“sections”: ['
- en: '`{`'
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '`“id”: “1.1”,`'
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: '“id”: “1.1”,'
- en: '`“title”: “Economics”,`'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '“title”: “经济学”,'
- en: '`“summary”: “This section explores the economic aspects of Padua, including
    its main industries, trade, and economic development. It highlights the city’s
    position as an economic hub and discusses the key sectors driving its economy.”`'
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: '“summary”: “本部分探讨了帕多瓦的经济方面，包括其主要产业、贸易和经济发展。它突出了城市作为经济中心的地位，并讨论了推动其经济的关键部门。”'
- en: '`…`'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '`},`'
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '`{`'
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '`“id”: “1.2”,`'
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: '“id”: “1.2”,'
- en: '`“title”: “History”,`'
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: '“title”: “历史”,'
- en: '`“summary”: “This section traces the history of Padua from its proto-historic
    origins to the modern age. It covers significant historical events, rulers, and
    cultural developments that have shaped the city’s identity over time.”`'
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: '“summary”: “本部分追溯了帕多瓦从原始历史起源到现代的历史。它涵盖了塑造城市身份的重要历史事件、统治者和文化发展。”'
- en: '`…`'
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '`},`'
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '`…`'
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '`]`'
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '`},`'
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '`…`'
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '`]`'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: ']'
- en: '`}`'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Note how ChatGPT enhances the description of each section, providing a more
    detailed content summary. In the “Notable Sights” section, the places of interest
    are automatically added without the need for prior listing, thanks to ChatGPT
    capabilities.
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 注意ChatGPT如何增强了每个部分的描述，提供了更详细的内容摘要。在“著名景点”部分，有趣的地方会自动添加，无需事先列出，这要归功于ChatGPT的能力。
- en: '`“id” : “3”,`'
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: '“id” : “3”,'
- en: '`“title” : “Notable Sights”,`'
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: '“title” : “著名景点”,'
- en: '`“summary” : “This chapter serves as a guide to the notable sights in Padua,
    highlighting the city’s architectural, historical, and cultural landmarks. Each
    section focuses on a specific attraction, providing a detailed description and
    capturing the visitors’ experience.”,`'
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: '“summary” : “本章是帕多瓦著名景点的指南，重点介绍了城市的建筑、历史和文化地标。每个部分都专注于一个特定的景点，提供了详细的描述并捕捉了游客的体验。”,'
- en: '`“sections” : [`'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: '“sections” : ['
- en: '`“id” : “3.1”,`'
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: '“id” : “3.1”,'
- en: '`“title” : “Basilica di Sant’Antonio”,`'
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: '“title” : “圣安东尼教堂”,'
- en: '`…`'
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '`}, {`'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '}, {'
- en: '`“id” : “3.2”,`'
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: '“id” : “3.2”,'
- en: '`“title” : “Prato della Valle”,`'
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: '“title” : “Prato della Valle”,'
- en: '`…`'
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '`}, {`'
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: '}, {'
- en: '`“id” : “3.3”,`'
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: '“id” : “3.3”,'
- en: '`“title” : “Palazzo della Ragione”,`'
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: '“title” : “雷焦内宫”,'
- en: '`…`'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '`}, {`'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: '}, {'
- en: '`“id” : “3.4”,`'
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: '“id” : “3.4”,'
- en: '`“title” : “Scrovegni Chapel”,`'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '“title” : “斯科罗韦尼小教堂”,'
- en: '`…`'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: …
- en: '`} ],`'
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: '} ],'
- en: With the essay structure in place, the Writer needs to populate it with relevant
    information. Instead of relying solely on the model’s implicit knowledge, we want
    to fetch updated and relevant information from the Internet. To accomplish this,
    we generate Google searches for each section using ChatGPT text generation capabilities.
    This generates a short list of Google queries for each section.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: With the essay structure in place, the Writer needs to populate it with relevant
    information. Instead of relying solely on the model’s implicit knowledge, we want
    to fetch updated and relevant information from the Internet. To accomplish this,
    we generate Google searches for each section using ChatGPT text generation capabilities.
    This generates a short list of Google queries for each section.
- en: 'The next step involves leveraging a different capability of our framework:
    **Search**. The Essay Writer uses these generated Google queries to query the
    search engine and collect a list of relevant web page links.'
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 'The next step involves leveraging a different capability of our framework:
    **Search**. The Essay Writer uses these generated Google queries to query the
    search engine and collect a list of relevant web page links.'
- en: Once we have identified the relevant web pages, they are downloaded and stored
    in a database for semantic search. Semantic search will allow the Writer to search
    for text in the database that is semantically similar to the summary of a given
    section, thus retrieving those documents that are relevant to compile that section
    of the essay. To enable semantic search, the downloaded pages are encoded in a
    special way known as ‘embedding’; this encoding provides a numerical representation
    of the text that is easier for AI to process.
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我们确定了相关的网页，它们就会被下载并存储在数据库中以进行语义搜索。语义搜索将允许Writer在数据库中搜索与给定部分摘要在语义上相似的文本，从而检索与编译该部分文章相关的文档。为了启用语义搜索，下载的页面以一种特殊的方式编码，称为‘嵌入’；这种编码为文本提供了AI更容易处理的数值表示。
- en: The `predictive-powers` library provides high-level methods to download web
    content, perform embedding, and store the data in an in-memory database (the `KnowledgeBase`),
    which is available as part of the library.
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: '`predictive-powers`库提供了高级方法来下载网页内容、执行嵌入并将数据存储在内存数据库（`KnowledgeBase`）中，该数据库作为库的一部分可用。'
- en: After downloading, embedding, and storing the relevant web pages, the Writer
    employs semantic search to fetch contextually relevant content for each section
    of the essay. These contextual pieces, referred to as the ‘context’ for each section,
    serve as the basis for generating the actual content of the sections. ChatGPT
    utilizes its **Summarization** and **Generation** capabilities to create the section
    content based on the provided context.
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: 在下载、嵌入和存储相关网页之后，Writer使用语义搜索来获取与文章各部分相关的内容。这些上下文片段，称为每个部分的‘上下文’，作为生成各部分实际内容的基础。ChatGPT利用其**摘要**和**生成**能力根据提供的上下文创建部分内容。
- en: By following this workflow, the Writer autonomously generates an essay that
    incorporates up-to-date information from the web, producing a comprehensive and
    well-researched final output.
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: 通过遵循这个工作流程，Writer自主生成了一篇文章，其中包含来自网络的最新信息，产生了全面且经过深入研究的最终输出。
- en: '[Code Walkthrough](toc.xhtml#s466a)'
  id: totrans-195
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[代码演示](toc.xhtml#s466a)'
- en: In this section, we elucidate the workflow of the application that was outlined
    in previous sections, offering snippets of code to demonstrate how various tasks
    are performed. Should you wish to delve deeper into the full code for the Writer,
    it is always accessible in the `predictive-powers` GitHub repository.
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: 在本节中，我们阐明了在前几节中概述的应用程序的工作流程，提供了代码片段来演示如何执行各种任务。如果您希望深入了解Writer的完整代码，它始终可以在`predictive-powers`
    GitHub存储库中访问。
- en: While showcasing the application code, we take the opportunity to list some
    of the prompts used. We challenge readers to try writing their own prompts following
    the guidelines in *[Chapter 5](c05.xhtml)* and see if and how the Writer’s skills
    improve.
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: 在展示应用程序代码的同时，我们有机会列出一些使用的提示。我们鼓励读者尝试根据*[第5章](c05.xhtml)*中的指南编写自己的提示，并查看Writer的技能是否有所提高。
- en: Take note that the Writer is a multithreaded application for the sake of efficiency.
    The method `parallelExecution()` manages the simultaneous execution of multiple
    tasks, compiling all of their results into a single `List`. Throughout this chapter,
    we will showcase snippets of code for various tasks, while not focusing much on
    the required structure for multitasking.
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，为了提高效率，Writer是一个多线程应用程序。方法`parallelExecution()`管理多个任务的同时执行，将它们的所有结果编译成一个`List`。在本章中，我们将展示用于各种任务的代码片段，但不会过多关注多任务处理所需的结构。
- en: The `Essay` class is an inner class utilized by the Writer to maintain the structure
    of the essay. It offers several methods that facilitate obtaining its nicely formatted
    contents in an organized manner. The Writer contains one instance of `Essay` in
    its `essay` field; as the program executes, the instance is gradually populated
    with data.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '`Essay`类是Writer使用的内部类，用于维护文章的结构。它提供了几种方法，以有组织的方式方便地获取其格式良好的内容。Writer在其`essay`字段中包含`Essay`的一个实例；随着程序的执行，该实例逐渐被数据填充。'
- en: The orchestration of the application workflow happens within the `main()` method
    of the class. Here, the user input is processed, and the required tasks are executed.
    In short, the `main()` method implements the ‘Orchestration Agent’ component shown
    in our architecture.
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: 应用程序工作流程的编排发生在类的`main()`方法中。在这里，用户输入被处理，并执行所需的任务。简而言之，`main()`方法实现了我们架构中显示的‘编排代理’组件。
- en: 'The first task in the workflow is to read the user-provided draft and establish
    the structure of the essay. For processing convenience, the structure is saved
    as a JSON file. The following code snippet demonstrates how this task is accomplished.
    It assumes that the essay draft has been stored in `essay.description` (this would
    have already been carried out by the `main()` method at this point). Notice how
    the code leverages GPT’s ability to return data in various formats, JSON in this
    instance. Java libraries dedicated to handling JSON serialization allow us to
    easily transform the returned data into an `Essay` instance using a single line
    of code:'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: 工作流程中的第一个任务是读取用户提供的草稿并建立文章的结构。为了方便处理，结构被保存为JSON文件。以下代码片段演示了如何完成此任务。它假设文章草稿已经存储在`essay.description`中（这在此时`main()`方法已经执行过了）。请注意代码如何利用GPT返回数据的能力以各种格式，本例中是JSON。专门处理JSON序列化的Java库使我们能够轻松地将返回的数据转换为一个`Essay`实例，只需一行代码：
- en: '`public void createStructure() throws JsonProcessingException {`'
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: '`public void createStructure() throws JsonProcessingException {`'
- en: '`String description = essay.description;`'
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: '`String description = essay.description;`'
- en: '`[…]`'
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: '`[…]`'
- en: '`// Instantiate a service to create the essay structure`'
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 实例化一个服务来创建文章结构`'
- en: '`OpenAiChatService chatSvc = openAi.getChatService();`'
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: '`OpenAiChatService chatSvc = openAi.getChatService();`'
- en: '`chatSvc.setModel(COMPLETION_MODEL);`'
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: '`chatSvc.setModel(COMPLETION_MODEL);`'
- en: '`chatSvc.setTemperature(40.0);`'
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: '`chatSvc.setTemperature(40.0);`'
- en: '`// Set agent personality, instruct it to return JSON`'
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 设置代理人个性，指示它返回JSON`'
- en: '`// and provide one example`'
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: '`// and provide one example`'
- en: '`chatSvc.setPersonality(`'
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: chatSvc.setPersonality（
- en: '`“You are an assistant helping a writer to create the structure of an essay.
    The essay structure is composed of an array of chapters, each chapter containing
    an array of sections. Always return the structure using this JSON format; here
    is an example of the format:\n”`'
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: “您是一名助手，正在帮助作家创建文章的结构。文章结构由一系列章节组成，每个章节包含一系列部分。始终使用此JSON格式返回结构；以下是格式的示例：
- en: '`+ “\n”`'
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: +“\n”
- en: '`+ “{\n”`'
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: +“{\n”
- en: '`+ “ \”chapters\”: [{\n”`'
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”章节\”：[{\n”
- en: '`+ “  \”title\”: \”Title for first chapter\”,\n”`'
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”title\”：\”第一章的标题\”，\n”
- en: '`+ “  \”summary\”: \”Summary of first chapter.\”,\n”`'
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”summary\”：\”第一章的摘要。\”，\n”
- en: '`+ “  \”sections\”: [{\n”`'
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”部分\”：[{\n”
- en: '`+ “    \”title\”: \”Title for first section of first chapter\”,\n”`'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”title\”：\”第一章的第一节标题\”，\n”
- en: '`+ “    \”summary\”: \”Summary of this section\”\n”`'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”summary\”：\”本节摘要\”\n”
- en: '`+ “  },{\n”`'
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: +“}，{\n”
- en: '`+ “    \”title\”: \”Title for second section of first chapter\”,\n”`'
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”title\”：\”第一章的第二节标题\”，\n”
- en: '`+ “    \”summary\”: \”Summary of this section\”\n”`'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”summary\”：\”本节摘要\”\n”
- en: '`+ “  }]\n”`'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: +“}]\n”
- en: '`+ “ }, {\n”`'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: +“}，{\n”
- en: '`+ “  \”title\”: \”Title for second chapter\”,\n”`'
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”title\”：\”第二章的标题\”，\n”
- en: '`+ “  \”summary\”: \”Summary of second chapter.\”,\n”`'
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”summary\”：\”第二章的摘要。\”，\n”
- en: '`+ “  \”sections\”: [{\n”`'
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”部分\”：[{\n”
- en: '`+ “    \”title\”: \”Title for first section of second chapter\”,\n”`'
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”title\”：\”第二章的第一节标题\”，\n”
- en: '`+ “    \”summary\”: \”Summary of this section\”\n”`'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”summary\”：\”本节摘要\”\n”
- en: '`+ “  }, {\n”`'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: +“}，{\n”
- en: '`+ “      \”title\”: \”Title for second section of second chapter\”,\n”`'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”title\”：\”第二章的第二节标题\”，\n”
- en: '`+ “    \”summary\”: \”Summary of this section\”\n”`'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: +“\”summary\”：\”本节摘要\”\n”
- en: '`+ “  }]\n”`'
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: +“}]\n”
- en: '`+ “ }]\n”`'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: +“}]\n”
- en: '`+ “}\n”`'
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: +“}\n”
- en: '`+ “\n”`'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: +“\n”
- en: '`+ “Ensure that sections are not nested within other sections. Titles should
    not include section numbering or the words ‘Chapter’ or ‘Section’.”);`'
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: +“确保各节不嵌套在其他节内。标题不应包括节编号或单词‘章’或‘节’。”
- en: '`// Invoke the agent to create the structure,`'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: //调用代理创建结构，
- en: '`// using the draft in description`'
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: //使用描述中的草稿
- en: '`TextCompletion resp = chatSvc.complete(`'
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: TextCompletion resp = chatSvc.complete（
- en: '`“You are tasked with creating the structure of a book based on the provided
    description. The book should consist of several chapters, each containing a title,
    a summary, and a list of sections. Each section should have a title and a summary.
    Ensure that sections are not nested within each other.\n”`'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: “您的任务是根据提供的描述创建一本书的结构。该书应包括几个章节，每个章节包含一个标题，一个摘要和一个部分列表。每个部分应包括一个标题和一个摘要。确保各节不嵌套在彼此内。
- en: '`+ “\n”`'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: +“\n”
- en: '`+ “If possible, try to make the summaries of the chapters and sections at
    least 100 words long to provide substantial content for the book’s outline.\n”`'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: +“如果可能，尝试使章节和部分的摘要至少100个字长，以提供书纲的实质内容。
- en: '`+ “\n”`'
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: +“\n”
- en: '`+ “Think it through step by step and list all chapters and the sections they
    contain. Return the result using JSON format.\n”`'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: +“逐步考虑并列出所有章节及其包含的部分。使用JSON格式返回结果。
- en: '`+ “\n”`'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: +“\n”
- en: '`+ “User Description: “ + description`'
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: +“用户描述：”+描述
- en: '`);`'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: ）;
- en: '`// Transform returned JSON into an Essay`'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: //将返回的JSON转换为文章
- en: '`// which is then copied into the local instance.`'
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: //然后将其复制到本地实例中。
- en: '`Essay created = JSON_MAPPER.readValue(resp.getText(), Essay.class);`'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: Essay created = JSON_MAPPER.readValue（resp.getText（），Essay.class）;
- en: '`essay.chapters = new ArrayList<>(created.chapters);`'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: essay.chapters = new ArrayList<>(created.chapters);
- en: '`[…]`'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: '[…]'
- en: '`}`'
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Following the creation of the structure, relevant data for writing the essay
    is sourced from the Internet. The following code snippet returns a list of `SearchResult`
    instances (links to web pages), which content can be used to compose the given
    section. These links are returned in a `Pair` structure, along with their corresponding
    rank, as determined by Google.
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 在创建结构之后，从互联网上获取撰写文章所需的相关数据。以下代码片段返回一个SearchResult实例（指向网页的链接）列表，这些内容可以用来撰写给定的部分。这些链接以Pair结构返回，以及它们在Google中确定的相应排名。
- en: 'This code also illustrates another feature of the library: the capability to
    create prompt templates, which are parameterized prompts. Prompt parameters are
    indicated in the template by enclosing them in double curly braces. At runtime,
    these placeholders are replaced with values bearing the same key contained in
    a `Map` that is passed to the `CompletionService.fillSlots()` method. For instance,
    in the following code, the string “`{{chapter_summary}}`” is replaced by the value
    associated with the “`chapter_summary`” key in the `params` `Map`:'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码还说明了库的另一个特性：创建提示模板的能力，这些模板是参数化的提示。在模板中，通过双大括号将提示参数括起来。在运行时，这些占位符将被传递给CompletionService.fillSlots（）方法的Map中具有相同键的值替换。例如，在以下代码中，“{{chapter_summary}}”字符串将被params
    Map中“chapter_summary”键关联的值替换：
- en: '`public List<Pair<SearchResult, Integer>>`'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: public List<Pair<SearchResult, Integer>>
- en: '`google(Section chapter, Section section)`'
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: 谷歌（章节章节，部分部分）
- en: '`{`'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: '`// First create a list of search queries,`'
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: //首先创建一个搜索查询列表，
- en: '`// based on what we want to search`'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: //基于我们想要搜索的内容
- en: '`// Instanciates model to create Google searches`'
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: //实例化模型以创建谷歌搜索
- en: '`OpenAiChatService chatSvc = openAi.getChatService();`'
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: OpenAiChatService chatSvc = openAi.getChatService（）;
- en: '`chatSvc.setModel(COMPLETION_MODEL);`'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: chatSvc.setModel（COMPLETION_MODEL）;
- en: '`chatSvc.setTemperature(50.0);`'
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: chatSvc.setTemperature（50.0）;
- en: '`// Dynamically build the prompt`'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: //动态构建提示
- en: '`final String prompt =`'
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: 最终的提示字符串=
- en: '`“Given the below chapter summary, section title and section summary, provided
    in XML tags, generate a list of search engine queries that can be used to search
    the topic corresponding to the section on the Internet.”`'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: “鉴于下面的章节摘要，部分标题和部分摘要，以XML标记提供，生成可用于在互联网上搜索与该部分对应的主题的搜索引擎查询列表。”
- en: '`+ “ Each query is a short sentence or a short list of key terms relevant for
    the section topic.”`'
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: +“每个查询都是一个简短的句子或与该部分主题相关的关键词的简短列表。”
- en: '`+ “ Include terms to provide a context for the topic, as described by the
    chapter summary, so that the query is clearly related to the chapter content.”`'
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: '`+ “ 包括术语，以便为主题提供上下文，如章节摘要所述，以便查询与章节内容明确相关。”`'
- en: '`+ “ Be creative and provide exactly 5 queries.”`'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '`+ “ 创造性地提供确切的5个查询。”`'
- en: '`+ “ Strictly provide results as a JSON array of strings.\n\n”`'
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: '`+ “ 严格按照JSON字符串数组的形式提供结果。\n\n”`'
- en: '`+ “<chapter_summary>{{chapter_summary}}</chapter_summary>\n\n”`'
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: '`+ “<chapter_summary>{{chapter_summary}}</chapter_summary>\n\n”`'
- en: '`+ “<section_title>{{section_title}}</section_title>\n\n”`'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '`+ “<section_title>{{section_title}}</section_title>\n\n”`'
- en: '`+ “<section_summary>{{section_summary}}</section_summary>”;`'
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: '`+ “<section_summary>{{section_summary}}</section_summary>”;`'
- en: '`// Provide data to fill slots in the prompt template`'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 提供数据以填充提示模板中的插槽`'
- en: '`Map<String, String> params = new HashMap<>();`'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`Map<String, String> params = new HashMap<>();`'
- en: '`params.put(“chapter_summary”, chapter.summary);`'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '`params.put(“chapter_summary”, chapter.summary);`'
- en: '`params.put(“section_title”, section.title);`'
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`params.put(“section_title”, section.title);`'
- en: '`params.put(“section_summary”, section.summary);`'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: '`params.put(“section_summary”, section.summary);`'
- en: '`// Prepares the conversation;`'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 准备对话；`'
- en: '`// notice the call to fill the slots in the prompt template`'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 注意在提示模板中填充插槽的调用`'
- en: '`List<ChatMessage> msgs = new ArrayList<>();`'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '`List<ChatMessage> msgs = new ArrayList<>();`'
- en: '`msgs.add(new ChatMessage(`'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: '`msgs.add(new ChatMessage(`'
- en: '`Role.SYSTEM,`'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`Role.SYSTEM,`'
- en: '`“You are an assistant helping a researcher in finding web pages that are relevant
    for the essay section they are writing.”`'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`“您是一名助手，帮助研究人员找到与他们正在撰写的文章部分相关的网页。”`'
- en: '`));`'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '`));`'
- en: '`msgs.add(new ChatMessage(`'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`msgs.add(new ChatMessage(`'
- en: '`Role.USER, CompletionService.fillSlots(prompt, params)`'
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: '`Role.USER, CompletionService.fillSlots(prompt, params)`'
- en: '`));`'
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: '`));`'
- en: '`// Build a list of Google queries for the section.`'
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 为该部分构建Google查询列表。`'
- en: '`// Queries are returned as a JSON list of Strings, that is deserialized.`'
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 查询作为JSON字符串列表返回，进行反序列化。`'
- en: '`List<String> queries;`'
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: '`List<String> queries;`'
- en: '`while (true) {`'
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`while (true) {`'
- en: '`try {`'
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`try {`'
- en: '`queries = JSON_MAPPER.readValue(chatSvc.complete(msgs).getText(),`'
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`queries = JSON_MAPPER.readValue(chatSvc.complete(msgs).getText(),`'
- en: '`new TypeReference<List<String>>() {});`'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '`new TypeReference<List<String>>() {});`'
- en: '`break;`'
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: '`break;`'
- en: '`} catch (JsonProcessingException e) {`'
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: '`} catch (JsonProcessingException e) {`'
- en: '`// Retry in case GPT returned badly formatted JSON`'
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 重试以防GPT返回格式不正确的JSON`'
- en: '`LOG.warn(“Retrying because of malformed JSON, e);`'
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOG.warn(“因为JSON格式错误而重试，e);`'
- en: '`}`'
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`}`'
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`// Now submit each query and collect returned links`'
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 现在提交每个查询并收集返回的链接`'
- en: '`List<Pair<SearchResult, Integer>> result = new ArrayList<>();`'
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`List<Pair<SearchResult, Integer>> result = new ArrayList<>();`'
- en: '`for (String query : queries) {`'
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: '`for (String query : queries) {`'
- en: '`List<SearchResult> links;`'
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`List<SearchResult> links;`'
- en: '`try {`'
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`try {`'
- en: '`links = google.getSearchService()`'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '`links = google.getSearchService()`'
- en: '`.search(query, LINKS_PER_QUERY);`'
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: '`.search(query, LINKS_PER_QUERY);`'
- en: '`} catch (Exception e) {`'
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`} catch (Exception e) {`'
- en: '`// Skip single query that fails`'
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 跳过失败的单个查询`'
- en: '`LOG.warn(“Ignoring error searching for: “ + query, e);`'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOG.warn(“忽略搜索错误: “ + query, e);`'
- en: '`continue;`'
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`continue;`'
- en: '`}`'
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`[…]`'
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: '[…]`'
- en: '`}`'
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`return result;`'
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: '`return result;`'
- en: '`}`'
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: Once the Writer has the list of pages to be downloaded, it goes ahead and retrieves
    them, delivering the corresponding embedding. Depending on the size of the page,
    this could potentially result in multiple items. The `ExtractionUtil.fromUrl()`
    method is a handy one-liner for fetching text content directly from a URL.
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦写手有要下载的页面列表，它就会继续并检索它们，提供相应的嵌入。根据页面的大小，这可能会导致多个项目。`ExtractionUtil.fromUrl()`方法是一个方便的一行代码，用于直接从URL获取文本内容。
- en: The reader should also notice how we use the `ModelService` to have some model
    metadata, like the maximum number of tokens it accepts as input.
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: 读者还应该注意我们如何使用`ModelService`来获取一些模型元数据，比如它接受的最大标记数。
- en: 'In Java, this process looks like this:'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: 在Java中，这个过程看起来像这样：
- en: '`private List<EmbeddedText> download(SearchResult link) {`'
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: '`private List<EmbeddedText> download(SearchResult link) {`'
- en: '`// Instantiate the service used to embed the downloaded pages`'
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 实例化用于嵌入下载页面的服务`'
- en: '`EmbeddingService embSvc = openAi.getEmbeddingService();`'
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: '`EmbeddingService embSvc = openAi.getEmbeddingService();`'
- en: '`// Set the maximum size for each embedded text chunk;`'
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 设置每个嵌入文本块的最大大小；`'
- en: '`// the following calculation ensures approximately 15 embeddings`'
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 以下计算确保大约有15个嵌入`'
- en: '`// will be used to compose each section.`'
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 将用于组成每个部分。`'
- en: '`// Notice how the ModelService is fetched from the OpenAIEndpoint (openAI)`'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 注意ModelService是如何从OpenAIEndpoint（openAI）中获取的`'
- en: '`// to retrieve the maximum prompt size for the completion model and the`'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 用于检索完成模型和`'
- en: '`// embedding model.`'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 嵌入模型。`'
- en: '`int writerSize = openAi.getModelService().getContextSize(WRITER_MODEL);`'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '`int writerSize = openAi.getModelService().getContextSize(WRITER_MODEL);`'
- en: '`int embSize = openAi.getModelService().getContextSize(embSvc.getModel());`'
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: '`int embSize = openAi.getModelService().getContextSize(embSvc.getModel());`'
- en: '`embSvc.setMaxTextTokens(`'
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: '`embSvc.setMaxTextTokens(`'
- en: '`Math.min(embSize, (writerSize - SECTION_LENGTH_TOKENS) / 15)    );`'
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: '`Math.min(embSize, (writerSize - SECTION_LENGTH_TOKENS) / 15)    );`'
- en: '``// Download the page content as a String`'
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: '``// 将页面内容作为字符串下载`'
- en: '`String content = null;`'
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: '`String content = null;`'
- en: '`try {`'
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: '`try {`'
- en: '`content = ExtractionUtil.fromUrl(`'
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: '`content = ExtractionUtil.fromUrl(`'
- en: '`link.getLink(), DOWNLOAD_TIMEOUT_MILLIS));`'
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: '`link.getLink(), DOWNLOAD_TIMEOUT_MILLIS));`'
- en: '`} catch (Exception e) {`'
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: '`} catch (Exception e) {`'
- en: '`// If an error occurs during page download, the page is skipped`'
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 如果在下载页面过程中发生错误，则跳过该页面`'
- en: '`LOG.error(“Error downloading “ + link.getLink(), e);`'
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: '`LOG.error(“下载错误 “ + link.getLink(), e);`'
- en: '`return new ArrayList<>();`'
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: '`return new ArrayList<>();`'
- en: '`}`'
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '`// Embed the downloaded content`'
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 嵌入下载的内容`'
- en: '`List<EmbeddedText> result = embSvc.embed(content);`'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '`List<EmbeddedText> result = embSvc.embed(content);`'
- en: '`[…]`'
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: '[…]`'
- en: '`return result;`'
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: '`return result;`'
- en: '`}`'
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: Upon successful completion, the embeddings are stored within the knowledge base,
    paving the way for the writing process to commence. The following code snippet
    outlines how a single section is written.
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: 成功完成后，嵌入将存储在知识库中，为写作过程的开始铺平道路。以下代码片段概述了如何编写单个部分。
- en: 'Examining the code, the reader can see how the `search()` method from the `KnowledgeBase`
    is used to perform semantic search, by passing an embedded version of the section
    summary:'
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 通过检查代码，读者可以看到`KnowledgeBase`中的`search()`方法是如何使用的，通过传递部分摘要的嵌入版本来执行语义搜索：
- en: '`private List<Section> write(Section section) {`'
  id: totrans-354
  prefs: []
  type: TYPE_NORMAL
  zh: '`private List<Section> write(Section section) {`'
- en: '`// Instanciate services`'
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: '`//实例化服务`'
- en: '`EmbeddingService embSvc = openAi.getEmbeddingService();`'
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: '`EmbeddingService embSvc = openAi.getEmbeddingService();`'
- en: '`OpenAiChatService chatSvc = openAi.getChatService();`'
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: '`OpenAiChatService chatSvc = openAi.getChatService();`'
- en: '`chatSvc.setModel(WRITER_MODEL);`'
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: '`chatSvc.setModel(WRITER_MODEL);`'
- en: '`chatSvc.setTemperature(0.0);`'
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: '`chatSvc.setTemperature(0.0);`'
- en: '`String prompt =`'
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: '`String prompt =`'
- en: '`“<context>{{context}}</context>\n\n”`'
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: '`“<context>{{context}}</context>\n\n”`'
- en: '`+ “<summary>{{summary}}</summary>”;`'
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: '`+“<summary>{{summary}}</summary>”;`'
- en: '`Map<String, String> params = new HashMap<>();`'
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: '`Map<String, String> params = new HashMap<>();`'
- en: '`params.put(“summary”, section.summary);`'
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: '`params.put(“summary”, section.summary);`'
- en: '`// This is the prompt used for creating the section`'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '`//这是用于创建部分的提示`'
- en: '`List<ChatMessage> msgs = new ArrayList<>();`'
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: '`List<ChatMessage> msgs = new ArrayList<>();`'
- en: '`msgs.add(new ChatMessage(Role.SYSTEM,`'
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: '`msgs.add(new ChatMessage(Role.SYSTEM,`'
- en: '`“You will be provided with a context and the summary of a section of an essay,
    both delimited by XML tags.”`'
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: '`“您将获得一个上下文和一篇文章部分摘要，两者都由XML标记限定。”`'
- en: '`+ “ Your task is to use the content of the context to write the entire section
    of the essay.”`'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '`+“您的任务是使用上下文的内容来撰写文章的整个部分。”`'
- en: '`+ “ Use a professional style.” + “ Avoid content repetitions but be detailed.”`'
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: '`+“使用专业风格。”+“避免内容重复，但要详细。”`'
- en: '`+ “ Output only the section content, not its title, do not create subsections.”`'
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: '`+“仅输出部分内容，而不是标题，不要创建子部分。”`'
- en: '`+ “ Do not make up missing information or put placeholders for data you do
    not have.”`'
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: '`+“不要编造缺失的信息或为没有的数据放置占位符。”`'
- en: '`+ “ Only if enough information is available in the content, produce a text
    at least “`'
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: '`+“只有在内容中有足够的信息时，才产生至少一个文本”`'
- en: '`+ SECTION_LENGTH_TOKENS + “ tokens long.\n\n”));`'
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: '`+ SECTION_LENGTH_TOKENS +“令牌长。\n\n”));`'
- en: '`[…]`'
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: '`[…]`'
- en: '`// Searches the knowledge base for relevant content// (= builds the context)`'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '`//搜索知识库以获取相关内容//（=构建上下文）`'
- en: '`List<Pair<EmbeddedText, Double>> knowledge = kb.search(embSvc.embed(section.summary).get(0),
    50, 0);`'
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: '`List<Pair<EmbeddedText, Double>> knowledge = kb.search(embSvc.embed(section.summary).get(0),
    50, 0);`'
- en: '`// Here some code is needed to take only`'
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: '`//这里需要一些代码来仅获取`'
- en: '`// the context that fits the model prompt size.`'
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: '`//适合模型提示大小的上下文。`'
- en: '`// It is omitted for simplicity.`'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: '`//出于简单起见，它被省略了。`'
- en: '`[…]`'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: '`[…]`'
- en: '`// Add generated content to the section`'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '`// 将生成的内容添加到部分`'
- en: '`section.content = chatSvc.complete(msgs).getText();`'
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: '`section.content = chatSvc.complete(msgs).getText();`'
- en: '`[…]`'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '`[…]`'
- en: '`return section.sections; // Not used really`'
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: '`return section.sections; //实际上没有使用`'
- en: '`}`'
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: '`}`'
- en: '[Conclusion](toc.xhtml#s467a)'
  id: totrans-387
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[结论](toc.xhtml#s467a)'
- en: This chapter has presented a comprehensive overview of the `predictive-powers`
    library and its ability to harness the power of generative AI for Java developers.
    The focus was to present a real-life approach to utilizing generative AI capabilities.
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: 本章介绍了`predictive-powers`库及其利用Java开发人员的生成AI能力的能力。重点是提供一种真实生活的方法来利用生成AI能力。
- en: The `predictive-powers` library offers distinct advantages for Java developers
    and AI enthusiasts alike. It not only simplifies the integration of generative
    AI capabilities but also provides low-level access to popular APIs like OpenAI
    and Hugging Face. This flexibility allows developers to engage directly with these
    APIs if desired. Moreover, the library’s design aligns with the CapabilityGPT
    framework, ensuring compatibility with different capability providers, reducing
    the risk of vendor lock-in. Additionally, its in-memory vector database supports
    essential functions like semantic search, information extraction, and question
    answering. Lastly, it facilitates the convenient retrieval of textual content
    from diverse sources, including web pages and various file formats like MS Office,
    PDF, and HTML. These features make the `predictive-powers` library a valuable
    tool for harnessing generative AI capabilities in Java applications while leveraging
    flexibility, compatibility, and ease of use typical of Java applications.
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: '`predictive-powers`库为Java开发人员和AI爱好者提供了独特的优势。它不仅简化了生成AI能力的集成，还提供了对OpenAI和Hugging
    Face等流行API的低级访问权限。这种灵活性允许开发人员在需要时直接与这些API进行交互。此外，该库的设计与CapabilityGPT框架保持一致，确保与不同的能力提供者兼容，降低了供应商锁定的风险。此外，其内存向量数据库支持语义搜索、信息提取和问题回答等重要功能。最后，它便于从各种来源检索文本内容，包括网页和各种文件格式，如MS
    Office、PDF和HTML。这些功能使`predictive-powers`库成为在Java应用程序中利用生成AI能力的有价值工具，同时利用了Java应用程序的灵活性、兼容性和易用性。'
- en: We delved into the technical aspects of the library, detailing essential concepts
    such as API clients, endpoints and services, and the knowledge base. We learned
    about their roles and functionalities within the broader framework and gained
    insights into their underlying mechanisms.
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: 我们深入研究了该库的技术方面，详细介绍了API客户端、端点和服务以及知识库等基本概念。我们了解了它们在更广泛框架内的角色和功能，并深入了解了它们的基本机制。
- en: 'One of the chapter’s highlights was a practical example: the creation of an
    autonomous agent named the ‘Essay Writer’. This served as a concrete illustration
    of how to leverage the `predictive-powers` library and its different features
    in a realistic project.'
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: 本章的亮点之一是一个实际的例子：创建了一个名为“Essay Writer”的自主代理。这作为一个具体的例子，展示了如何在一个现实项目中利用`predictive-powers`库及其不同的特性。
- en: '[Key Points](toc.xhtml#s468a)'
  id: totrans-392
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: '[要点](toc.xhtml#s468a)'
- en: 'By the end of this chapter, the reader should be familiar with:'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: 在本章结束时，读者应该熟悉：
- en: '**The** `**predictive-powers**` **library**: An Apache-2.0 licensed library
    that offers a simplified yet powerful interface for Java developers to harness
    generative AI.'
  id: totrans-394
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**The** `**predictive-powers**` **library**: 一个Apache-2.0许可的库，为Java开发人员提供了一个简化但强大的界面，以利用生成AI。'
- en: '**API clients**: Fundamental units of the `predictive-powers` library that
    facilitate direct API calls to service providers like OpenAI and Hugging Face.'
  id: totrans-395
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**API客户端**：`predictive-powers`库的基本单元，用于直接调用OpenAI和Hugging Face等服务提供商的API。'
- en: '**Endpoints and services**: High-level generative AI components that utilize
    API clients to render services. The reader should be aware of the services offered,
    such as the `ModelService`, `CompletionService`, `ChatService`, `EmbeddingService`,
    and others.'
  id: totrans-396
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**端点和服务**：利用API客户端提供服务的高级生成式人工智能组件。读者应该了解提供的服务，比如`ModelService`、`CompletionService`、`ChatService`、`EmbeddingService`等。'
- en: '`**KnowledgeBase**`: An in-memory vector database crucial for abilities such
    as semantic search, information extraction, and question answering.'
  id: totrans-397
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '`**知识库**`：对于语义搜索、信息提取和问题回答等能力至关重要的内存中向量数据库。'
- en: '**Implementation of an autonomous agent**: The chapter guides the reader through
    the creation of an ‘Essay Writer’, demonstrating the practical application of
    the concepts learned. It shows how the library components can be easily combined,
    leveraging the CapabilityGPT framework, prompt engineering techniques, and architecture
    patterns presented in other parts of the book to create an agent able to perform
    a complex task.'
  id: totrans-398
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**自主代理的实现**：本章指导读者创建一个“论文写作机”，演示所学概念的实际应用。它展示了如何轻松组合库组件，利用CapabilityGPT框架、提示工程技术和本书其他部分介绍的架构模式，创建能够执行复杂任务的代理。'
- en: '**Architecture pattern**: Understanding the architecture pattern and navigating
    the code is a critical part of the learning process. The reader should be familiar
    with the three-tier architecture: the User Experience layer, the Application layer,
    and the AI layer, and understand how these layers can be implemented using components
    from the `predictive-powers` library.'
  id: totrans-399
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**架构模式**：理解架构模式并导航代码是学习过程的关键部分。读者应熟悉三层架构：用户体验层、应用层和人工智能层，并了解如何使用`predictive-powers`库中的组件来实现这些层。'
- en: '**Code navigation**: Understanding the code snippets and their workings, presented
    in the Code Walkthrough section, will help the reader apply these concepts to
    their own projects.'
  id: totrans-400
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
  zh: '**代码导航**：理解代码片段及其工作原理，可以帮助读者将这些概念应用到自己的项目中。'
- en: ____________________
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: ____________________
- en: '[¹](#ftn1) ***Generative AI*** refers to the branch of artificial intelligence
    that specializes in producing new content, which can range from text and images
    to audio and video, drawing upon patterns and information it has gleaned from
    existing data sources. The GPT series from OpenAI serves as a notable representation
    of this kind of AI. Throughout this chapter, the term ‘generative AI’ will be
    used more frequently than ‘GPT’ to maintain a focus on the broader technology
    category, emphasizing the versatility of the `predictive-powers` library, which
    is not confined to utilizing GPT exclusively.'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '[¹](#ftn1) ***生成式人工智能*** 指的是人工智能的一个分支，专门用于生成新内容，可以是文本、图像、音频和视频，利用从现有数据源中获取的模式和信息。OpenAI的GPT系列是这种人工智能的一个显著代表。在本章中，“生成式人工智能”这个术语将比“GPT”更频繁地使用，以保持对更广泛技术类别的关注，强调`predictive-powers`库的多功能性，该库不仅限于专门使用GPT。'
- en: '[²](#ftn2) As already mentioned in *[Chapter 8: LangChain: GPT Implementation
    Framework for Python](c08.xhtml)*, Text ***embeddings*** are numerical representations
    of text, enabling machines to understand and process natural language. They transform
    words or phrases into a list of numbers, with semantically similar items possessing
    similar values. In ***semantic search***, this allows the system to match user’s
    queries with relevant documents based on semantic similarity, not just keyword
    matches. By employing text embeddings, systems can understand nuanced meanings
    and improve the relevance of search results, providing a more efficient and effective
    search experience.'
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: '[²](#ftn2) 正如在*[第8章：LangChain：Python的GPT实现框架](c08.xhtml)*中已经提到的，文本***嵌入***是文本的数值表示，使机器能够理解和处理自然语言。它们将单词或短语转换为一系列数字，具有语义相似性的项目具有相似的值。在***语义搜索***中，这使系统能够基于语义相似性而不仅仅是关键词匹配来匹配用户的查询和相关文档。通过使用文本嵌入，系统可以理解微妙的含义，并提高搜索结果的相关性，提供更高效和有效的搜索体验。'
- en: '[³](#ftn3) In-memory vector databases leverage the system memory (RAM) to store
    data, which provides the advantage of extremely quick data retrieval and processing.
    However, this comes with constraints related to RAM size, making it less suitable
    for handling extremely large datasets.'
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: '[³](#ftn3) 内存中向量数据库利用系统内存（RAM）存储数据，这提供了极快的数据检索和处理优势。然而，这也带来了与RAM大小相关的限制，使其不太适合处理极大的数据集。'
- en: '[⁴](#ftn4) As we will see later, there are also other endpoints, providing
    different capabilities, such as the `SearchEndpoint` that exposes methods to access
    web search services.'
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: '[⁴](#ftn4) 正如我们将在后面看到的，还有其他端点，提供不同的功能，比如`SearchEndpoint`，它公开了访问网络搜索服务的方法。'
- en: '[⁵](#ftn5) [https://openai.com/dall-e-3](https://openai.com/dall-e-3)'
  id: totrans-406
  prefs: []
  type: TYPE_NORMAL
  zh: '[⁵](#ftn5) [https://openai.com/dall-e-3](https://openai.com/dall-e-3)'
- en: '[⁶](#ftn6) [https://openjourney.art/](https://openjourney.art/)'
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '[⁶](#ftn6) [https://openjourney.art/](https://openjourney.art/)'
- en: '[⁷](#ftn7) See *[Chapter 4: Architecture Patterns enabled by GPT-Models](c04.xhtml)*,
    specifically the section “B Conversational Patterns with External Tool Integration”.'
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: '[⁷](#ftn7) 参见*[第4章：GPT模型支持的架构模式](c04.xhtml)*，特别是“B 与外部工具集成的对话模式”部分。'
- en: '[⁸](#ftn8) The knowledge base is similar to vector stores in LangChain. See
    *[Chapter 8: LangChain: GPT Implementation Framework for Python](c08.xhtml)*.'
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: '[⁸](#ftn8) 知识库类似于LangChain中的向量存储。参见*[第8章：LangChain：Python的GPT实现框架](c08.xhtml)*。'
- en: '[⁹](#ftn9) Please refer to *[Chapter 4: Architecture Patterns enabled by GPT-Models](c04.xhtml)*,
    and compare this architecture with architecture pattern “D2 Orchestration Agent”.'
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: '[⁹](#ftn9) 请参考*[第4章：GPT模型支持的架构模式](c04.xhtml)*，并将此架构与“D2 Orchestration Agent”架构模式进行比较。'
- en: '[^(10)](#ftn10) JSON, which stands for JavaScript Object Notation, is a method
    used to store information in an organized, easy-to-access manner. In a nutshell,
    it gives us a textual human-readable collection of data that we can access in
    a logical manner. It is widely used in many digital services and products to help
    systems and servers share data efficiently and quickly. Even though its name includes
    “JavaScript,” it can be used in many programming environments outside of JavaScript.'
  id: totrans-411
  prefs: []
  type: TYPE_NORMAL
  zh: '[^(10)](#ftn10) JSON，全称JavaScript对象表示法，是一种用于以有组织、易于访问的方式存储信息的方法。简而言之，它为我们提供了一个文本人类可读的数据集合，我们可以以逻辑方式访问。它被广泛应用于许多数字服务和产品中，以帮助系统和服务器高效快速地共享数据。即使它的名称包含“JavaScript”，它也可以在JavaScript之外的许多编程环境中使用。'
- en: '[^(11)](#ftn11) [https://platform.openai.com/docs/models](https://platform.openai.com/docs/models)
    (specifically, gpt-3.5-turbo for the chat service and text-embedding-ada-002 for
    embedding).```'
  id: totrans-412
  prefs: []
  type: TYPE_NORMAL
  zh: '[^(11)](#ftn11) [https://platform.openai.com/docs/models](https://platform.openai.com/docs/models)（具体来说，用于聊天服务的gpt-3.5-turbo和用于嵌入的text-embedding-ada-002）。'
