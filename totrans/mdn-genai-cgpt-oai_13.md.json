["```\nresponse = openai.Completion.create(\n\u00a0\u00a0engine=\"test1\",\n\u00a0\u00a0prompt= contract + \" what is the termination clause?\",\n\u00a0\u00a0temperature=0,\n\u00a0\u00a0max_tokens=1968,\n\u00a0\u00a0top_p=0.5,\n\u00a0\u00a0frequency_penalty=0,\n\u00a0\u00a0presence_penalty=0,\n\u00a0\u00a0best_of=1,\n\u00a0\u00a0stop=None)\nprint(response[\"choices\"][0][\"text\"].strip())\n```", "```\nprompt = \"<|im_start|>system\\n\" + contract + \"\\n<|im_end|>\\n\"\n#print('AI Assistant: ' + prompt + '\\n')\nwhile True:\n\u00a0\u00a0\u00a0\u00a0query = input(\"you:\")\n\u00a0\u00a0\u00a0\u00a0if query == 'q':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0user_input = \"<|im_start|>user\\n\" + query + \"\\n<|im_end|>\\n<|im_start|>assistant\\n\"\n\u00a0\u00a0\u00a0\u00a0prompt+=user_input\n\u00a0\u00a0\u00a0\u00a0output = openai.Completion.create(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine=\"test1\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prompt=prompt,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temperature=0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max_tokens=2000,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0top_p=0.95,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0frequency_penalty=0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0presence_penalty=0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stop=[\"<|im_end|>\"])\n\u00a0\u00a0\u00a0\u00a0print('\\n')\n\u00a0\u00a0\u00a0\u00a0print('AI Assistant: ' + output[\"choices\"][0][\"text\"].strip() + '\\n')\n\u00a0\u00a0\u00a0\u00a0response = output[\"choices\"][0][\"text\"].strip() + \"\\n<|im_end|>\\n\"\n\u00a0\u00a0\u00a0\u00a0prompt+=response\n```", "```\nprompt = \"<|im_start|>system\\n\" + contract + \"\\n<|im_end|>\\n\"\n#print('AI Assistant: ' + prompt + '\\n')\nwhile True:\n\u00a0\u00a0\u00a0\u00a0query = input(\"you:\")\n\u00a0\u00a0\u00a0\u00a0if query == 'q':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0user_input = \"<|im_start|>user\\n\" + query + \"\\n<|im_end|>\\n<|im_start|>assistant\\n\"\n\u00a0\u00a0\u00a0\u00a0prompt+=user_input\n\u00a0\u00a0\u00a0\u00a0output = openai.Completion.create(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine=\"test1\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prompt=prompt,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temperature=0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max_tokens=2000,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0top_p=0.95,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0frequency_penalty=0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0presence_penalty=0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stop=[\"<|im_end|>\"])\n\u00a0\u00a0\u00a0\u00a0print('\\n')\n\u00a0\u00a0\u00a0\u00a0print('AI Assistant: ' + output[\"choices\"][0][\"text\"].strip() + '\\n')\n\u00a0\u00a0\u00a0\u00a0response = output[\"choices\"][0][\"text\"].strip() + \"\\n<|im_end|>\\n\"\n\u00a0\u00a0\u00a0\u00a0prompt+=response\n```", "```\nresponse = openai.Completion.create(\n\u00a0\u00a0engine=\"test1\",\n\u00a0\u00a0prompt= contract + \"Analyze this contract and tell me whether there might be some ambiguity or conflicting terms.\",\n\u00a0\u00a0temperature=0,\n\u00a0\u00a0max_tokens=1968,\n\u00a0\u00a0top_p=0.5,\n\u00a0\u00a0frequency_penalty=0,\n\u00a0\u00a0presence_penalty=0,\n\u00a0\u00a0best_of=1,\n\u00a0\u00a0stop=None)\nprint(response[\"choices\"][0][\"text\"].strip())\n```", "```\nprompt = \"<|im_start|>system\\n\" + contract + \"\\n<|im_end|>\\n\"\n#print('AI Assistant: ' + prompt + '\\n')\nwhile True:\n\u00a0\u00a0\u00a0\u00a0query = input(\"you:\")\n\u00a0\u00a0\u00a0\u00a0if query == 'q':\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0break\n\u00a0\u00a0\u00a0\u00a0user_input = \"<|im_start|>user\\n\" + query + \"\\n<|im_end|>\\n<|im_start|>assistant\\n\"\n\u00a0\u00a0\u00a0\u00a0prompt+=user_input\n\u00a0\u00a0\u00a0\u00a0output = openai.Completion.create(\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine=\"test1\",\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prompt=prompt,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temperature=0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max_tokens=2000,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0top_p=0.95,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0frequency_penalty=0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0presence_penalty=0,\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stop=[\"<|im_end|>\"])\n\u00a0\u00a0\u00a0\u00a0print('\\n')\n\u00a0\u00a0\u00a0\u00a0print('AI Assistant: ' + output[\"choices\"][0][\"text\"].strip() + '\\n')\n\u00a0\u00a0\u00a0\u00a0response = output[\"choices\"][0][\"text\"].strip() + \"\\n<|im_end|>\\n\"\n\u00a0\u00a0\u00a0\u00a0prompt+=response\n```", "```\nyou: explain why there are no ambiguities or conflicting terms now in this new contract\nAI Assistant: There are no ambiguities or conflicting terms now because the \"Duties\" section is more specific about what John Doe's responsibilities will be, and the \"Compensation\" section makes it clear that John Doe will receive the annual bonus that he is expecting.\n```", "```\nresponse = openai.Completion.create(\n\u00a0\u00a0engine=\"test1\",\n\u00a0\u00a0prompt= contract + \"Analyze this contract and tell me whether there are clauses that might violate the antitrust laws. Make sure to highlight those clauses.\",\n\u00a0\u00a0temperature=0,\n\u00a0\u00a0max_tokens=1968,\n\u00a0\u00a0top_p=0.5,\n\u00a0\u00a0frequency_penalty=0,\n\u00a0\u00a0presence_penalty=0,\n\u00a0\u00a0best_of=1,\n\u00a0\u00a0stop=None)\nprint(response[\"choices\"][0][\"text\"].strip())\n```", "```\nservice_provider = \"Supplier ABC\"\nclient = \"Company XYZ\"\nservices_description = \"installation, configuration, and maintenance of Company's IT infrastructure\"\nstart_date = \"1/9/2023\"\nduration = \"Three (3) years\"\npayment_terms = f\"Within 30 days after receipt of an invoice from {service_provider}\"\ntermination_notice = \"30 days\"\nstate = \"Italy\"\nresponse = openai.Completion.create(\n\u00a0\u00a0engine=\"test1\",\n\u00a0\u00a0prompt= f\"Generate a Service Delivery Agreement with the following elements: Service Provider: {service_provider}, Client: {client}, Description of Services: {services_description}, Start Date: {start_date}, Duration: {duration}, Payment terms: {payment_terms}, Termination notice: {termination_notice}, State or Countries: {state}\",\n\u00a0\u00a0temperature=0,\n\u00a0\u00a0max_tokens=1968,\n\u00a0\u00a0top_p=0.5,\n\u00a0\u00a0frequency_penalty=0,\n\u00a0\u00a0presence_penalty=0,\n\u00a0\u00a0best_of=1,\n\u00a0\u00a0stop=None)\nprint(response[\"choices\"][0][\"text\"].strip())\n```", "```\nresponse = openai.Completion.create(\n\u00a0\u00a0engine=\"test1\",\n\u00a0\u00a0prompt= transcript + \"Extract the following information from the above text:\\n Name and Surname\\nReason for calling\\n Policy Number\\n Resolution \\n\\n\",\n\u00a0\u00a0temperature=1,\n\u00a0\u00a0max_tokens=1968,\n\u00a0\u00a0top_p=0.5,\n\u00a0\u00a0frequency_penalty=0,\n\u00a0\u00a0presence_penalty=0,\n\u00a0\u00a0best_of=1,\n\u00a0\u00a0stop=None)\nprint(response[\"choices\"][0][\"text\"].strip())\n```", "```\nName and Surname: Mario Rossi\nReason for calling: Accidental damage to car\nPolicy Number: 123456\nResolution: The operator is processing the customer's claim and sending an email with next steps.\n```", "```\n[\n\u00a0\u00a0{\n\u00a0\u00a0\u00a0\u00a0\"name\": \"Mario Rossi\",\n\u00a0\u00a0\u00a0\u00a0\"reason_for_calling\": \"To file a claim for an accidental damage\",\n\u00a0\u00a0\u00a0\u00a0\"policy_number\": \"123456\",\n\u00a0\u00a0\u00a0\u00a0\"resolution\": \"The operator is processing the claim and will send an email with the next steps to follow.\"\n\u00a0\u00a0}\n]\n```", "```\nresponse = openai.Completion.create(\n\u00a0\u00a0engine=\"test1\",\n\u00a0\u00a0prompt= transcript + \"What is the initial and final sentiment of the conversation?\",\n\u00a0\u00a0temperature=1,\n\u00a0\u00a0max_tokens=1968,\n\u00a0\u00a0top_p=0.5,\n\u00a0\u00a0frequency_penalty=0,\n\u00a0\u00a0presence_penalty=0,\n\u00a0\u00a0best_of=1,\n\u00a0\u00a0stop=None)\nprint(response[\"choices\"][0][\"text\"].strip())\n```", "```\nresponse = openai.Completion.create(\n\u00a0\u00a0engine=\"test1\",\n\u00a0\u00a0prompt= transcript + \"why is the customer's sentiment initially negative?\",\n\u00a0\u00a0temperature=1,\n\u00a0\u00a0max_tokens=1968,\n\u00a0\u00a0top_p=0.5,\n\u00a0\u00a0frequency_penalty=0,\n\u00a0\u00a0presence_penalty=0,\n\u00a0\u00a0best_of=1,\n\u00a0\u00a0stop=None)\nprint(response[\"choices\"][0][\"text\"].strip())\n```", "```\nresponse = openai.Completion.create(\n\u00a0\u00a0engine=\"test1\",\n\u00a0\u00a0prompt= transcript + \"classify the above text in one of the following: reporting issue, claim handling and general inquiry.\",\n\u00a0\u00a0temperature=1,\n\u00a0\u00a0max_tokens=1968,\n\u00a0\u00a0top_p=0.5,\n\u00a0\u00a0frequency_penalty=0,\n\u00a0\u00a0presence_penalty=0,\n\u00a0\u00a0best_of=1,\n\u00a0\u00a0stop=None)\nprint(response[\"choices\"][0][\"text\"].strip())\n```", "```\n    def generate_email(transcript):\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0response = openai.Completion.create(\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine=\"test1\",\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prompt= transcript + f\"Generate a response email to the transcript above, notifying the customer that the ticket has been created and apologizing if it was complaining. The name of the customer is {data['name']} and the policy number is {data['policy_number']}.\",\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temperature=1,\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max_tokens=1968,\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0top_p=0.5,\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0frequency_penalty=0,\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0presence_penalty=0,\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0best_of=1,\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stop=None)\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0return response[\"choices\"][0][\"text\"].strip()\n    ```", "```\n    def improvement(data):\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0response = openai.Completion.create(\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0engine=\"test1\",\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0prompt= f\"Elaborate a list of remediations to get to the following improvement: {data['contact_center_improvement']}\",\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0temperature=1,\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0max_tokens=1968,\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0top_p=0.5,\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0frequency_penalty=0,\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0presence_penalty=0,\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0best_of=1,\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0stop=None)\n    ```", "```\n    \u00a0\u00a0\u00a0\u00a0return response[\"choices\"][0][\"text\"].strip()\n    ```", "```\nfrom langchain.embeddings import OpenAIEmbeddings from langchain.chat_models import AzureOpenAI\nfrom langchain.embeddings import OpenAIEmbeddings\nfrom langchain.vectorstores.faiss import FAISS\nfrom pypdf import PdfReader\nfrom langchain.document_loaders import PyPDFLoader\n\u00a0\u00a0embeddings = OpenAIEmbeddings(document_model_name=\"text-embedding-ada-002\") embeddings.embed_query('this is a test')\n```", "```\nloader = PyPDFLoader(\"path_to_file\") pages = loader.load_and_split() faiss_index = FAISS.from_documents(pages, embeddings)\n```", "```\nllm = AzureOpenAI(deployment_name=\"text-davinci-003\")\n```", "```\ndef get_answer(index, query):\u00a0\u00a0\u00a0\u00a0\u00a0\"\"\"Returns answer to a query using langchain QA chain\"\"\"\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0docs = index.similarity_search(query)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0chain = load_qa_chain(llm)\u00a0\u00a0\u00a0\u00a0\u00a0answer = chain.run(input_documents=docs, question=query)\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0return answer\n```", "```\nquery = st.text_area(\"Ask a question about the document\")\nif query:\n\u00a0\u00a0\u00a0\u00a0docs = faiss_index.similarity_search(query, k=1)\n\u00a0\u00a0\u00a0\u00a0button = st.button(\"Submit\")\n\u00a0\u00a0\u00a0\u00a0if button:\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0st.write(get_answer(faiss_index, query))\n```"]