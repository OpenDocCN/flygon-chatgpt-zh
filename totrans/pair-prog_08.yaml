- en: '| ![image](d2d_images/chapter_title_corner_decoration_left.png) |  | ![image](d2d_images/chapter_title_corner_decoration_right.png)
    |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| ![image](d2d_images/chapter_title_corner_decoration_left.png) |  | ![image](d2d_images/chapter_title_corner_decoration_right.png)
    |'
- en: '![image](d2d_images/chapter_title_above.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](d2d_images/chapter_title_above.png)'
- en: Data Generation
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 数据生成
- en: '![image](d2d_images/chapter_title_below.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](d2d_images/chapter_title_below.png)'
- en: '![Gambling table with dice, cards, and chips](d2d_images/image020.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![带有骰子、卡片和筹码的赌桌](d2d_images/image020.jpg)'
- en: Image by [Thorsten Frenzel from Pixabay](https://pixabay.com/users/thorstenf-7677369/?amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4178462)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由[Pixabay的Thorsten Frenzel](https://pixabay.com/users/thorstenf-7677369/?amp;utm_medium=referral&amp;utm_campaign=image&amp;utm_content=4178462)提供
- en: Never Lack Sample Data for Your Apps
  id: totrans-6
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 永远不要缺少应用程序的样本数据
- en: Generating sample data is a crucial aspect of application development, as it
    allows developers to test and refine their software in a controlled environment.
    In this chapter, we will explore the effectiveness of Copilot and ChatGPT in generating
    sample data for applications. We will start with simple examples and gradually
    move towards more complex ideas, sharing both the successes and failures along
    the way. By the end of this chapter, you will have a better understanding of the
    capabilities and limitations of these tools and how they can be leveraged to improve
    your application development process.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 生成样本数据是应用程序开发的一个关键方面，因为它允许开发人员在受控环境中测试和完善他们的软件。在本章中，我们将探讨Copilot和ChatGPT在为应用程序生成样本数据方面的有效性。我们将从简单的示例开始，逐渐转向更复杂的想法，分享沿途的成功和失败。通过本章的结束，您将更好地了解这些工具的能力和局限性，以及如何利用它们来改进您的应用程序开发过程。
- en: As before I will show my simple comment, followed by what the AIs suggested,
    with commentary where appropriate.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 与以往一样，我将展示我的简单评论，然后是AI建议的内容，必要时附有评论。
- en: Lorem Ipsum Text
  id: totrans-9
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Lorem Ipsum文本
- en: First, let’s see what Copilot suggested for a generic request for some “lorem
    ipsum” text.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 首先，让我们看看Copilot为一般请求“lorem ipsum”文本提供了什么建议。
- en: // Generate a paragraph of lorem ipsum text
  id: totrans-11
  prefs: []
  type: TYPE_NORMAL
  zh: // 生成一段lorem ipsum文本
- en: 'const text = require(''lorem-ipsum'').loremIpsum({count: 1, units: ''paragraphs''});'
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: 'const text = require(''lorem-ipsum'').loremIpsum({count: 1, units: ''paragraphs''});'
- en: 'That isn’t what I expected at all. I had hoped it would simply build some for
    me. Honestly, I’d never heard of a [lorem-ipsum npm package](https://www.npmjs.com/package/lorem-ipsum/v/1.0.5),
    so I decided to look for it. I installed the package and ran my code, which output
    this:'
  id: totrans-13
  prefs: []
  type: TYPE_NORMAL
  zh: 这根本不是我期望的。我希望它可以简单地为我构建一些。老实说，我从来没有听说过[lorem-ipsum npm包](https://www.npmjs.com/package/lorem-ipsum/v/1.0.5)，所以我决定去找它。我安装了这个包并运行了我的代码，输出如下：
- en: Aliquip qui est officia tempor elit aliquip. Lorem culpa ea exercitation aliqua
    aliquip et aute. Eiusmod ad sunt labore proident id reprehenderit ullamco dolore
    laborum excepteur ad eiusmod laboris. Et duis consectetur culpa nulla velit adipisicing
    minim velit dolore deserunt commodo id occaecat. Mollit aliquip consectetur aliquip
    duis eu incididunt ut amet deserunt qui.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: Aliquip qui est officia tempor elit aliquip。Lorem culpa ea exercitation aliqua
    aliquip et aute。Eiusmod ad sunt labore proident id reprehenderit ullamco dolore
    laborum excepteur ad eiusmod laboris。Et duis consectetur culpa nulla velit adipisicing
    minim velit dolore deserunt commodo id occaecat。Mollit aliquip consectetur aliquip
    duis eu incididunt ut amet deserunt qui。
- en: Again, not what I expected, but it did the right thing. I can hardly complain
    when it gives me working code.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 再次，这不是我期望的，但它做对了。当它给我可用的代码时，我几乎不能抱怨。
- en: ChatGPT did exactly what I expected without any additional prompting. It just
    worked.
  id: totrans-16
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT完全按照我的期望做了，没有任何额外提示。它就是有效的。
- en: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed auctor, purus non
    ornare congue, magna magna porta velit, eget malesuada velit velit vel mi. Sed
    velit velit, suscipit vel dolor eu, malesuada ornare elit. Sed dictum id elit
    vel dictum. Donec malesuada risus vitae ipsum placerat, eget aliquam velit ullamcorper.
    Sed in eros vel velit blandit elementum. Sed nec tempor tellus. Sed non eros euismod,
    feugiat eros ut, gravida dolor. Nam auctor malesuada est, euismod euismod erat
    tempor id.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed auctor, purus non
    ornare congue, magna magna porta velit, eget malesuada velit velit vel mi. Sed
    velit velit, suscipit vel dolor eu, malesuada ornare elit. Sed dictum id elit
    vel dictum. Donec malesuada risus vitae ipsum placerat, eget aliquam velit ullamcorper.
    Sed in eros vel velit blandit elementum. Sed nec tempor tellus. Sed non eros euismod,
    feugiat eros ut, gravida dolor. Nam auctor malesuada est, euismod euismod erat
    tempor id.
- en: List of schools in the USA
  id: totrans-18
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 美国学校列表
- en: For the next experiment, I wanted a list of schools that can be found in the
    United States. This one took on the same pattern as above, but with a different
    outcome.
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: 对于下一个实验，我想要一个可以在美国找到的学校列表。这个实验采用了与上面相同的模式，但结果不同。
- en: // List of schools in the USA
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: // 美国的学校列表
- en: const schools = require('us-schools').schools;
  id: totrans-21
  prefs: []
  type: TYPE_NORMAL
  zh: const schools = require('us-schools').schools;
- en: console.log(schools);
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(schools);
- en: Unfortunately, no such npm package exists, at least not that I could find. I
    was starting to have less faith in this process than when I began.
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 不幸的是，没有这样的 npm 包存在，至少我找不到。我开始对这个过程的信心比开始时更少。
- en: On the other hand, ChatGPT again came through.
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，ChatGPT 再次成功。
- en: Give me a list of schools in the USA as a JavaScript array
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: 给我一个美国学校的列表作为 JavaScript 数组
- en: const schools = [
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: const schools = [
- en: '{ name: "Harvard University", state: "Massachusetts" },'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: '{ name: "哈佛大学", state: "马萨诸塞" },'
- en: '{ name: "Stanford University", state: "California" },'
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: '{ name: "斯坦福大学", state: "加利福尼亚" },'
- en: '{ name: "Princeton University", state: "New Jersey" },'
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: '{ name: "普林斯顿大学", state: "新泽西" },'
- en: '{ name: "Yale University", state: "Connecticut" },'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: '{ name: "耶鲁大学", state: "康涅狄格" },'
- en: '{ name: "Columbia University", state: "New York" },'
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: '{ name: "哥伦比亚大学", state: "纽约" },'
- en: '{ name: "Brown University", state: "Rhode Island" },'
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: '{ name: "布朗大学", state: "罗德岛" },'
- en: '{ name: "University of Pennsylvania", state: "Pennsylvania" },'
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: '{ name: "宾夕法尼亚大学", state: "宾夕法尼亚" },'
- en: '{ name: "Cornell University", state: "New York" },'
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: '{ name: "康奈尔大学", state: "纽约" },'
- en: '{ name: "Dartmouth College", state: "New Hampshire" }'
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: '{ name: "达特茅斯学院", state: "新罕布什尔" }'
- en: '];'
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: '];'
- en: Fake Customers with Addresses
  id: totrans-37
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 伪造带有地址的客户
- en: Wondering whether I would ever get a success out of Copilot, I moved on with
    my preplanned list. Could it generate some fake customers for me?
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: 想知道我是否能从 Copilot 中获得成功，我继续进行我的预定清单。它能为我生成一些虚假客户吗？
- en: // Generate a list of random customer names and addresses
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: // 生成一个随机客户姓名和地址列表
- en: const faker = require('faker');
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: const faker = require('faker');
- en: const customers = [];
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: const customers = [];
- en: for (let i = 0; i < 100; i++) {
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: for (let i = 0; i < 100; i++) {
- en: customers.push({
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: customers.push({
- en: 'name: faker.name.findName(),'
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: faker.name.findName(),'
- en: 'address: faker.address.streetAddress(),'
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: 'address: faker.address.streetAddress(),'
- en: 'city: faker.address.city(),'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: 'city: faker.address.city(),'
- en: 'state: faker.address.state(),'
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: 'state: faker.address.state(),'
- en: 'zip: faker.address.zipCode(),'
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: 'zip: faker.address.zipCode(),'
- en: '});'
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: I’ve used [faker](https://www.npmjs.com/package/@faker-js/faker) ([https://www.npmjs.com/package/@faker-js/faker](https://www.npmjs.com/package/@faker-js/faker))
    in the past, so I had higher hopes for this one. I installed the faker npm package
    and added a console.table(customers)command. This would print the array to my
    browser console in a grid, with each “customer” on its own row.
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: 我过去曾使用[faker](https://www.npmjs.com/package/@faker-js/faker)（[https://www.npmjs.com/package/@faker-js/faker](https://www.npmjs.com/package/@faker-js/faker)），所以我对这个有更高的期望。我安装了
    faker npm 包，并添加了一个 console.table(customers) 命令。这会在浏览器控制台中以网格形式打印数组，每个“客户”占据一行。
- en: That gave me errors, as the require line is incorrect. The correct version is
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: 这给了我错误，因为 require 行不正确。正确的版本是
- en: const { faker } = require('@faker-js/faker');
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: const { faker } = require('@faker-js/faker');
- en: Once I fixed that, I was informed that findName has been deprecated in favor
    of fullName, but the code still runs. I was provided with an output of fake customers.
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: 一旦我修复了那个问题，我被告知 findName 已被弃用，应使用 fullName，但代码仍在运行。我得到了一组虚假客户的输出。
- en: GitHub Copilot was trained on years and years of existing code, so it makes
    sense that some of that code will be based on older patterns or deprecated libraries.
    It’s inevitable, but the good news is that as we continue to train it, it’ll only
    get better.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: GitHub Copilot 是在多年的现有代码基础上训练的，因此某些代码将基于较旧的模式或已弃用的库。这是不可避免的，但好消息是随着我们继续训练，它只会变得更好。
- en: Given what you’ve already seen, you probably have more faith in ChatGPT in getting
    this right. If you were to bet on it, you would have lost.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于您已经看到的内容，您可能更信任 ChatGPT 能够做对这个。如果您打赌的话，您会输掉。
- en: Generate a list of random customer names and addresses
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个随机客户姓名和地址列表
- en: const faker = require('faker');
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: const faker = require('faker');
- en: let customers = [];
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: let customers = [];
- en: for(let i = 0; i < 10; i++) {
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: for(let i = 0; i < 10; i++) {
- en: let customer = {
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: let customer = {
- en: 'name: faker.name.findName(),'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: faker.name.findName(),'
- en: 'address: faker.address.streetAddress()'
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 'address: faker.address.streetAddress()'
- en: '}'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: customers.push(customer);
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: customers.push(customer);
- en: '}'
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.log(customers);
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(customers);
- en: ChatGPT made the exact same mistakes as Copilot. This is not entirely unexpected,
    as the data on which ChatGPT was trained ended sometime in 2021\. It isn’t aware
    of any updates to libraries and frameworks made after that. What is less expected
    is that it wrote code that was almost identical to Copilot.
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT做出了与Copilot完全相同的错误。这并不完全出乎意料，因为ChatGPT训练所使用的数据于2021年结束。它并不知道在那之后对库和框架进行的任何更新。更意外的是，它写出的代码几乎与Copilot完全相同。
- en: Not completely undaunted, I made a slight change and asked ChatGPT to try again,
    without faker. I wanted to see whether it could do it on its own. I got more than
    I expected, but it did what I asked.
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 稍作修改后，我并不完全感到泄气，于是让ChatGPT再次尝试，这次不使用faker。我想看看它是否能够自己完成。它给出的结果比我预期的要多，但它做到了我的要求。
- en: Generate a list of random customer names and addresses without using the faker
    library
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个不使用faker库的随机客户姓名和地址列表
- en: let customers = []
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: let customers = []
- en: const firstNames = ['John', 'Emily', 'Jessica', 'Michael', 'David',
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: const firstNames = ['John', 'Emily', 'Jessica', 'Michael', 'David',
- en: '''Jacob'', ''Madison'', ''Ethan'', ''Elizabeth'']'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '''Jacob'', ''Madison'', ''Ethan'', ''Elizabeth'']'
- en: const lastNames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown',
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: const lastNames = ['Smith', 'Johnson', 'Williams', 'Jones', 'Brown',
- en: '''Miller'', ''Wilson'', ''Moore'', ''Taylor'']'
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: '''Miller'', ''Wilson'', ''Moore'', ''Taylor'']'
- en: const streets = ['Main St', 'High St', 'Park Ave', '1st St', '2nd St',
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: const streets = ['Main St', 'High St', 'Park Ave', '1st St', '2nd St',
- en: '''4th St'', ''5th St'', ''6th St'', ''7th St'']'
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: '''4th St'', ''5th St'', ''6th St'', ''7th St'']'
- en: const cities = ['New York', 'Los Angeles', 'Chicago', 'Houston',
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: const cities = ['New York', 'Los Angeles', 'Chicago', 'Houston',
- en: '''Philadelphia'', ''San Antonio'', ''San Diego'', ''Dallas'']'
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: '''Philadelphia'', ''San Antonio'', ''San Diego'', ''Dallas'']'
- en: const states = ['NY', 'CA', 'TX', 'AZ', 'PA', 'TX', 'CA', 'TX', 'CA']
  id: totrans-80
  prefs: []
  type: TYPE_NORMAL
  zh: const states = ['NY', 'CA', 'TX', 'AZ', 'PA', 'TX', 'CA', 'TX', 'CA']
- en: const zipCodes = ['10001', '90001', '60601', '77001', '85001', '19019',
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: const zipCodes = ['10001', '90001', '60601', '77001', '85001', '19019',
- en: '''78201'', ''92201'', ''75201'', ''95201'']'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: '''78201'', ''92201'', ''75201'', ''95201'']'
- en: for(let i = 0; i < 10; i++) {
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: for(let i = 0; i < 10; i++) {
- en: let customer = {
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: let customer = {
- en: 'name: firstNames[Math.floor(Math.random() * firstNames.length)] +'
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 'name: firstNames[Math.floor(Math.random() * firstNames.length)] +'
- en: ''' '' + lastNames[Math.floor(Math.random() * lastNames.length)],'
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: ''' '' + lastNames[Math.floor(Math.random() * lastNames.length)],'
- en: 'address: streets[Math.floor(Math.random() * streets.length)] + '' '' +'
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: 'address: streets[Math.floor(Math.random() * streets.length)] + '' '' +'
- en: cities[Math.floor(Math.random() * cities.length)] + ' ' +
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: cities[Math.floor(Math.random() * cities.length)] + ' ' +
- en: states[Math.floor(Math.random() * states.length)] + ' ' +
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: states[Math.floor(Math.random() * states.length)] + ' ' +
- en: zipCodes[Math.floor(Math.random() * zipCodes.length)]
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: zipCodes[Math.floor(Math.random() * zipCodes.length)]
- en: '}'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: customers.push(customer)
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: customers.push(customer)
- en: '}'
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'Another interesting thing about this particular code generation: I asked ChatGPT
    to wrap at 60 characters and to use single quotes instead of double quotes, which
    it did.'
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: 这次代码生成的另一个有趣之处：我要求ChatGPT将代码包装在60个字符处，并使用单引号而不是双引号，它确实做到了。
- en: Random Color generation
  id: totrans-95
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机颜色生成
- en: Have you ever needed some random colors? I admit this one is a bit less impressive,
    but I was determined to continue. My hypothesis at this point is that Copilot
    would continue to use faker.
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: 你曾经需要一些随机颜色吗？我承认这个有点不那么令人印象深刻，但是我决心继续下去。此刻，我做出的假设是，Copilot会继续使用faker。
- en: // Add a random color to each customer
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: // 为每个客户添加一个随机颜色
- en: const colors = ['red', 'green', 'blue', 'yellow', 'orange', 'purple'];
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: const colors = ['red', 'green', 'blue', 'yellow', 'orange', 'purple'];
- en: for (const customer of customers) {
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: for (const customer of customers) {
- en: customer.color = colors[Math.floor(Math.random() * colors.length)];
  id: totrans-100
  prefs: []
  type: TYPE_NORMAL
  zh: customer.color = colors[Math.floor(Math.random() * colors.length)];
- en: '}'
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: But, of course, I was wrong. This is closer to what I expected it to do before
    it started using faker. I was hoping to get some CSS colors instead of names.
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: 当然，我错了。这更接近在开始使用faker之前我期望它能够做到的。我希望得到一些CSS颜色而不是名字。
- en: // Add a favorite CSS Color to each customer
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: // 为每个客户添加一个喜欢的CSS颜色
- en: for (const customer of customers) {
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: for (const customer of customers) {
- en: customer.color = faker.commerce.color();
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: customer.color = faker.commerce.color();
- en: '}'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: What? It went back to using faker! This is fine, but commerce.color()apparently
    is deprecated also. Copilot never suggested using the newer functions. It worked,
    though, which might be all we can expect.
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: 什么？它又回到了使用faker！这没关系，但是commerce.color()显然也已经被弃用了。Copilot从未建议使用更新的函数。不过，它奏效了，这可能是我们唯一可以期待的。
- en: 'ChatGPT took that comment and rewrote its entire code block, adding the new
    functionality where appropriate. Here are the relevant lines it added:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT接受了我提出的注释，重新编写了整个代码块，并在适当的位置添加了新功能。以下是它添加的相关行：
- en: Add a random color to each customer
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 为每个客户添加一个随机颜色
- en: const colors = ['Red', 'Green', 'Blue', 'Orange', 'Yellow', 'Purple', 'Pink',
    'Brown', 'Gray', 'Black']
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: const colors = ['红色', '绿色', '蓝色', '橙色', '黄色', '紫色', '粉色', '棕色', '灰色', '黑色']
- en: for(let i = 0; i < 10; i++) {
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: for(let i = 0; i < 10; i++) {
- en: let customer = {
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: let customer = {
- en: . . .
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: . . .
- en: 'color: colors[Math.floor(Math.random() * colors.length)]'
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: 'color: colors[Math.floor(Math.random() * colors.length)]'
- en: '}'
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: customers.push(customer)
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: customers.push(customer)
- en: '}'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.log(customers)
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(customers)
- en: Would it do as well if I asked it to use CSS colors? It came through perfectly,
    changing the above colors array to a colorValues array.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 如果我让它使用CSS颜色，它会做得像那样好吗？它表现得非常完美，将上述颜色数组更改为一个colorValues数组。
- en: Add a favorite CSS Color to each customer
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: 为每位顾客添加一个喜爱的CSS颜色
- en: const colorValues = ['#ff0000', '#00ff00', '#0000ff', '#ffa500',
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: const colorValues = ['#ff0000', '#00ff00', '#0000ff', '#ffa500',
- en: '''#ffc0cb'', ''#a52a2a'', ''#808080'', ''#000000'']'
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: '''#ffc0cb'', ''#a52a2a'', ''#808080'', ''#000000'']'
- en: Notice that ChatGPT doesn’t use semicolons in its generated code. I don’t know
    what to make of that, but if you want it to include them, you can simply ask it
    to do so.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 注意，ChatGPT在生成的代码中不使用分号。我不知道该怎么办，但如果你想要包含它们，你可以简单地要求它这样做。
- en: By the way, ChatGPT is happy to use the faker library to generate colors. I
    won’t include that code here, as it is still insisting on using a version that
    doesn’t work.
  id: totrans-124
  prefs: []
  type: TYPE_NORMAL
  zh: 顺便说一下，ChatGPT很乐意使用假数据库来生成颜色。我不会在这里包含那段代码，因为它还坚持使用一个无法运行的版本。
- en: As I have said before, this stuff isn’t perfect.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 正如我之前所说的，这些东西并不完美。
- en: Movie titles
  id: totrans-126
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 电影标题
- en: What about movie titles? Would they be able to generate real movies or real-sounding
    fake movies?
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 电影标题呢？它们能生成真实的电影还是听起来真实但又是假的电影？
- en: // Add a favorite movie to each customer
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: // 为每位顾客添加一个喜爱的电影
- en: for (const customer of customers) {
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: for (const customer of customers) {
- en: customer.movie = faker.commerce.productName();
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: customer.movie = faker.commerce.productName();
- en: '}'
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Apparently, faker doesn’t know anything about movies, and Copilot was unable
    (or unwilling) to suggest anything else.
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: 显然，假数据库对电影一无所知，而Copilot则无法（或不愿意）建议其他任何事情。
- en: I consider this one a failure, at least for Copilot.
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: 我认为这个是失败的，至少对于Copilot来说是这样的。
- en: ChatGPT did exactly what I had hoped it would do from the beginning. It gave
    me an array of movie titles.
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT确实做到了我最初希望它能做到的事情。它为我提供了一系列电影标题。
- en: // Add a favorite movie to each customer
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: // 为每位顾客添加一个喜爱的电影
- en: 'const movies = [''The Godfather'', ''The Shawshank Redemption'', ''The Dark
    Knight'', ''The Good, the Bad and the Ugly'', ''The Lord of the Rings: The Return
    of the King'', ''Pulp Fiction'', ''The Matrix'', ''Goodfellas'', ''One Flew Over
    the Cuckoo\''s Nest'', ''Seven Samurai'']'
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: const movies = ['教父', '肖申克的救赎', '黑暗骑士', '黄金三镖客', '指环王:王者归来', '低俗小说', '黑客帝国',
    '好家伙', '飞越疯人院', '七武士']
- en: Then, it added a random element from that array into each customer (not shown).
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: 然后，它向每位顾客中添加了来自该数组的随机元素（未显示）。
- en: Given the movie list, I didn’t have high hopes for Copilot to handle the rest
    of my list. My expectations for ChatGPT were still pretty high, though. I will
    present the rest of them here without comment unless the results were way out
    of line with my (by now meager) expectations.
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: 鉴于电影列表，我并不对Copilot能否处理其余的列表抱有很高的期望。尽管如此，我对ChatGPT的期望仍然很高，我会在这里呈现其余部分，除非结果与我的（现在微薄的）期望差距很大。
- en: Car Makes and Models
  id: totrans-139
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 汽车品牌和型号
- en: Copilot
  id: totrans-140
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Copilot
- en: // What kind of car does each customer drive?
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: // 每位顾客驾驶什么样的汽车？
- en: for (const customer of customers) {
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: for (const customer of customers) {
- en: customer.car = faker.vehicle.model();
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: customer.car = faker.vehicle.model();
- en: '}'
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ChatGPT
  id: totrans-145
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ChatGPT
- en: It gave me another array from which it would randomly assign a car.
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: 它从中为我提供了另一个数组，以供随机分配汽车。
- en: What kind of car does each customer drive?
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: 每位顾客驾驶什么样的汽车？
- en: const cars = ['Ford', 'Chevrolet', 'Toyota', 'Honda', 'Nissan', 'Jeep', 'Dodge',
    'Chrysler', 'BMW', 'Mercedes-Benz']
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: const cars = ['福特', '雪佛兰', '丰田', '本田', '日产', '吉普', '道奇', '克莱斯勒', '宝马', '奔驰']
- en: Dog breeds
  id: totrans-149
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 狗的品种
- en: Copilot
  id: totrans-150
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Copilot
- en: // What kind of dog does each customer have?
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: // 每位顾客拥有什么样的狗？
- en: for (const customer of customers) {
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: for (const customer of customers) {
- en: customer.dog = faker.animal.dog();
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: customer.dog = faker.animal.dog();
- en: '}'
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ChatGPT
  id: totrans-155
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ChatGPT
- en: What kind of dog does each customer have?
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: 每位顾客拥有什么样的狗？
- en: const dogs = ['Golden Retriever', 'Labrador Retriever', 'German Shepherd', 'Bulldog',
    'Poodle', 'Beagle', 'Rottweiler', 'Yorkshire Terrier']
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: const dogs = ['金毛寻回犬', '拉布拉多寻回犬', '德国牧羊犬', '英国斗牛犬', '贵宾犬', '比格犬', '罗威纳犬', '约克郡梗']
- en: Deck of cards
  id: totrans-158
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 牌组
- en: Copilot
  id: totrans-159
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Copilot
- en: // Create a random deck of cards
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一副随机牌
- en: const deck = [];
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: const deck = [];
- en: const suits = ['Hearts', 'Diamonds', 'Spades', 'Clubs'];
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: const suits = ['红心', '方块', '黑桃', '梅花'];
- en: const ranks = ['Ace', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'Jack',
    'Queen', 'King'];
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: const ranks = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q',
    'K'];
- en: for (const suit of suits) {
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: for (const suit of suits) {
- en: for (const rank of ranks) {
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: for (const rank of ranks) {
- en: deck.push({ suit, rank });
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: deck.push({ suit, rank });
- en: '}'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: This wasn’t bad and it’s accurate. Next, we might want to shuffle the deck.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 这不错，而且准确。接下来，我们可能想要洗牌。
- en: // Shuffle the deck
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: // 洗牌
- en: deck.sort(() => Math.random() - 0.5);
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: deck.sort(() => Math.random() - 0.5);
- en: Not bad. And it didn’t use faker.
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 不错。而且它没有使用 faker。
- en: ChatGPT
  id: totrans-173
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ChatGPT
- en: ChatGPT did a similar job and added some explanation, which as we have seen,
    is typical for its output.
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 做了类似的工作，并添加了一些解释，正如我们所见，这是它输出的典型特征。
- en: // Create an array of all possible card values
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个包含所有可能卡牌值的数组
- en: const cardValues = ['Ace', 'Two', 'Three', 'Four', 'Five', 'Six', 'Seven', 'Eight',
    'Nine', 'Ten', 'Jack', 'Queen', 'King'];
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: const cardValues = ['A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J',
    'Q', 'K'];
- en: // Create an array of all possible card suits
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个包含所有可能卡牌花色的数组
- en: const cardSuits = ['Hearts', 'Diamonds', 'Spades', 'Clubs'];
  id: totrans-178
  prefs: []
  type: TYPE_NORMAL
  zh: const cardSuits = ['红心', '方块', '黑桃', '梅花'];
- en: // Create an empty array to store the random deck of cards
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个空数组来存储随机排列的卡牌
- en: const randomDeck = [];
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: const randomDeck = [];
- en: // Loop through each card value and suit, creating a new card object and pushing
    it to the randomDeck array
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: // 遍历每个卡牌值和花色，创建一个新的卡牌对象并将其推送到 randomDeck 数组中
- en: for (let i = 0; i < cardValues.length; i++) {
  id: totrans-182
  prefs: []
  type: TYPE_NORMAL
  zh: for (let i = 0; i < cardValues.length; i++) {
- en: for (let j = 0; j < cardSuits.length; j++) {
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: for (let j = 0; j < cardSuits.length; j++) {
- en: 'const card = { value: cardValues[i], suit: cardSuits[j] };'
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: 'const card = { value: cardValues[i], suit: cardSuits[j] };'
- en: randomDeck.push(card);
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: randomDeck.push(card);
- en: '}'
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.log(randomDeck);
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(randomDeck);
- en: This code will create a random deck of 52 cards, with 13 card values (Ace, Two,
    Three, etc.) and 4 card suits (Hearts, Diamonds, Spades, Clubs). The resulting
    randomDeck array will contain 52 card objects, each with a value property and
    a suit property.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码将创建一个包含52张卡牌的随机牌堆，其中包括13种卡牌值（A、2、3等）和4种花色（红心、方块、黑桃、梅花）。生成的 randomDeck 数组将包含52个卡牌对象，每个对象都有一个值属性和一个花色属性。
- en: When I asked it to shuffle the deck, I expected it to use built-in array functions,
    but it did not. Instead, it wrote a shuffle function the hard way.
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: 当我要求它洗牌时，我期望它使用内置的数组函数，但它没有。相反，它用了一种费力的方式写了一个洗牌函数。
- en: // Function to shuffle the deck
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: // 洗牌函数
- en: function shuffleDeck(deck) {
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: function shuffleDeck(deck) {
- en: // Loop through the deck and swap each card with a randomly chosen card
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: // 遍历牌堆并将每张牌与随机选择的牌交换
- en: for (let i = 0; i < deck.length; i++) {
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: for (let i = 0; i < deck.length; i++) {
- en: const randomIndex = Math.floor(Math.random() * deck.length);
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: const randomIndex = Math.floor(Math.random() * deck.length);
- en: const temp = deck[i];
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: const temp = deck[i];
- en: deck[i] = deck[randomIndex];
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: deck[i] = deck[randomIndex];
- en: deck[randomIndex] = temp;
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: deck[randomIndex] = temp;
- en: '}'
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: return deck;
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: return deck;
- en: '}'
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Shuffle the deck
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: // 洗牌
- en: const shuffledDeck = shuffleDeck(randomDeck);
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: const shuffledDeck = shuffleDeck(randomDeck);
- en: console.log(shuffledDeck);
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(shuffledDeck);
- en: Encouraged, I asked it one more time, this time instructing it to use built-in
    array functions. It gave me basically the same function Copilot wrote.
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: 鼓励的，我又问了一次，这次指示它使用内置的数组函数。它基本上给了我 Copilot 写的相同函数。
- en: // Shuffle the deck using built-in Javascript array functionality
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: // 使用内置的 Javascript 数组功能洗牌
- en: const shuffledDeck = randomDeck.sort(() => Math.random() - 0.5);
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: const shuffledDeck = randomDeck.sort(() => Math.random() - 0.5);
- en: console.log(shuffledDeck);
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(shuffledDeck);
- en: That should do the trick. It’s all about asking for exactly what you want.
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: 那应该就可以了。关键在于准确地要求你想要的东西。
- en: Deck of uno cards
  id: totrans-210
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: Uno 卡牌堆
- en: Does they even know what Uno cards are?
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: 他们甚至知道 Uno 卡牌是什么吗？
- en: Copilot
  id: totrans-212
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Copilot
- en: // Create a random deck of Uno cards
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个随机的Uno卡牌堆
- en: const unoDeck = [];
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: const unoDeck = [];
- en: const colors = ['Red', 'Yellow', 'Green', 'Blue'];
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: const colors = ['红色', '黄色', '绿色', '蓝色'];
- en: const specialCards = ['Skip', 'Reverse', 'Draw Two', 'Wild', 'Wild Draw Four'];
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: const specialCards = ['跳过', '反转', '抽两张', '万能', '万能抽四张'];
- en: for (const color of colors) {
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: for (const color of colors) {
- en: for (const rank of ranks) {
  id: totrans-218
  prefs: []
  type: TYPE_NORMAL
  zh: for (const rank of ranks) {
- en: unoDeck.push({ color, rank });
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: unoDeck.push({ color, rank });
- en: '}'
  id: totrans-220
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: for (const specialCard of specialCards) {
  id: totrans-221
  prefs: []
  type: TYPE_NORMAL
  zh: for (const specialCard of specialCards) {
- en: unoDeck.push({ color, specialCard });
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: unoDeck.push({ color, specialCard });
- en: '}'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: It’s clear that it knows something about Uno cards, given the colors and special
    cards. I was a little annoyed that it didn’t create the rank. I presume it used
    the rank array from the last code block, since I didn’t delete any of that code.
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 很明显它知道一些关于Uno卡片的东西，包括颜色和特殊卡片。我有点烦恼它没有创建等级。我推测它使用了上一个代码块中的等级数组，因为我没有删除任何那部分代码。
- en: I decided to delete the other card code and try again.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 我决定删除其他卡片的代码，然后再试一次。
- en: // Create a random deck of Uno cards
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个随机的Uno卡牌牌堆
- en: const { uno } = require('@faker-js/faker');
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: const { uno } = require('@faker-js/faker');
- en: const deck = [];
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: const deck = [];
- en: for (let i = 0; i < 108; i++) {
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: for (let i = 0; i < 108; i++) {
- en: deck.push(uno.card());
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: deck.push(uno.card());
- en: '}'
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: Nope, this didn’t work at all. Not surprisingly, the faker library has nounoexport.
    Nothing else I tried got it to work. The first code block was actually better.
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 不，这一点都不起作用。毫不奇怪，faker库没有输出。我尝试的其他方法都没用。第一个代码块实际上更好。
- en: ChatGPT
  id: totrans-234
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ChatGPT
- en: I must admit to being impressed with what ChatGPT gave me. It produced functional,
    well-documented code, and an explanation of what it generated.
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT给我的成果让我印象深刻。它生成了功能完备、文档完善的代码，并解释了它生成的内容。
- en: Create a random deck of Uno cards
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个随机的Uno卡牌牌堆
- en: // Create an array of all possible card values
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个包含所有可能的卡片值的数组
- en: const cardValues = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'Skip',
    'Reverse', 'Draw Two', 'Wild', 'Wild Draw Four'];
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: const cardValues = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'Skip',
    'Reverse', 'Draw Two', 'Wild', 'Wild Draw Four'];
- en: // Create an array of all possible card colors
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个包含所有可能的卡片颜色的数组
- en: const cardColors = ['Red', 'Yellow', 'Green', 'Blue'];
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: const cardColors = ['Red', 'Yellow', 'Green', 'Blue'];
- en: // Create an empty array to store the random deck of Uno cards
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个空数组来存储Uno卡片的随机牌堆
- en: const randomDeck = [];
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: const randomDeck = [];
- en: // Loop through each card value and color, creating a new card object and pushing
    it to the randomDeck array
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: // 循环遍历每张卡片的值和颜色，创建一个新的卡片对象并将其推入randomDeck数组
- en: for (let i = 0; i < cardValues.length; i++) {
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: for (let i = 0; i < cardValues.length; i++) {
- en: for (let j = 0; j < cardColors.length; j++) {
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: for (let j = 0; j < cardColors.length; j++) {
- en: // Skip the 'Wild' and 'Wild Draw Four' card values since they can be any color
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: // 跳过'Wild'和'Wild Draw Four'卡片值，因为它们可以是任何颜色
- en: if (cardValues[i] === 'Wild' || cardValues[i] === 'Wild Draw Four') {
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: if (cardValues[i] === 'Wild' || cardValues[i] === 'Wild Draw Four') {
- en: continue;
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: continue;
- en: '}'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'const card = { value: cardValues[i], color: cardColors[j] };'
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: 'const card = { value: cardValues[i], color: cardColors[j] };'
- en: randomDeck.push(card);
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: randomDeck.push(card);
- en: '}'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Add the 'Wild' and 'Wild Draw Four' cards to the randomDeck array
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: // 将'Wild'和'Wild Draw Four'卡片添加到randomDeck数组中
- en: for (let i = 0; i < 4; i++) {
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: for (let i = 0; i < 4; i++) {
- en: 'const wildCard = { value: ''Wild'', color: ''Any'' };'
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: 'const wildCard = { value: ''Wild'', color: ''Any'' };'
- en: randomDeck.push(wildCard);
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: randomDeck.push(wildCard);
- en: '}'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: for (let i = 0; i < 4; i++) {
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: for (let i = 0; i < 4; i++) {
- en: 'const wildDrawFourCard = { value: ''Wild Draw Four'', color: ''Any'' };'
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: 'const wildDrawFourCard = { value: ''Wild Draw Four'', color: ''Any'' };'
- en: randomDeck.push(wildDrawFourCard);
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: randomDeck.push(wildDrawFourCard);
- en: '}'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.log(randomDeck);
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(randomDeck);
- en: This code creates a random deck of 108 Uno cards, with 15 card values (0, 1,
    2, etc.) and 4 card colors (Red, Yellow, Green, Blue) and two special cards 'Wild'
    and 'Wild Draw Four' card, these cards have any color, then it creates a for loop
    to add 4 cards of 'Wild' and 'Wild Draw Four' for each color and push it to the
    randomDeck array, the resulting randomDeck array will contain 108 card objects,
    each with a value property and a color property.
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了一个包含108张Uno卡片的随机牌堆，包括15个卡片值（0，1，2，等等）和4个卡片颜色（红色，黄色，绿色，蓝色），以及两张特殊卡片'Wild'和'Wild
    Draw Four'，这些卡片可以是任何颜色，然后它创建一个循环来为每种颜色添加4张'Wild'和'Wild Draw Four'卡，并将其推入randomDeck数组，最终的randomDeck数组将包含108个卡片对象，每个对象都有一个值属性和一个颜色属性。
- en: Grocery shopping list
  id: totrans-265
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 食品杂货购物清单
- en: Copilot
  id: totrans-266
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Copilot
- en: 'This one also used faker, and after a few false starts, it finally gave me
    this:'
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: 这个也使用了faker，经过几次失败尝试后，最终给我这个：
- en: // Create a random grocery list
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个随机的食品杂货购物清单
- en: const groceryList = [];
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: const groceryList = [];
- en: for (let i = 0; i < 10; i++) {
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: for (let i = 0; i < 10; i++) {
- en: groceryList.push(faker.commerce.productName());
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: groceryList.push(faker.commerce.productName());
- en: '}'
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: It was more proof that Copilot is aware of the rest of the code in your project.
    Sometimes you need to delete the code it generated before and try again. If you
    don’t like what you get, try rewording the comment slightly.
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: 这更多证明了Copilot意识到了你项目中的其他代码。有时你需要删除它生成的代码，然后再试一次。如果你不喜欢结果，尝试稍微改变一下注释。
- en: ChatGPT
  id: totrans-274
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ChatGPT
- en: ChatGPT took a slightly different approach. It seems to understand whether it
    should take prior instructions into account. When given this prompt, it did exactly
    what I thought it would.
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT采取了稍微不同的方法。它似乎能够理解是否应该考虑先前的指令。在给定这个提示时，它做了我想到的事情。
- en: Create an array of possible grocery items
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个可能的杂货项目数组
- en: // Create an array of possible grocery items
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个可能的杂货项目数组
- en: const groceryItems = ['Apples', 'Bananas', 'Oranges', 'Lemons', 'Lettuce', 'Carrots',
    'Potatoes', 'Onions', 'Tomatoes', 'Garlic', 'Ground Beef', 'Chicken Breasts',
    'Eggs', 'Milk', 'Cheese', 'Bread', 'Pasta', 'Rice', 'Beans', 'Cereal', 'Yogurt'];
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '`const groceryItems = [''Apples'', ''Bananas'', ''Oranges'', ''Lemons'', ''Lettuce'',
    ''Carrots'', ''Potatoes'', ''Onions'', ''Tomatoes'', ''Garlic'', ''Ground Beef'',
    ''Chicken Breasts'', ''Eggs'', ''Milk'', ''Cheese'', ''Bread'', ''Pasta'', ''Rice'',
    ''Beans'', ''Cereal'', ''Yogurt''];`'
- en: // Create an empty array to store the random grocery list
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个空数组来存储随机的股票清单
- en: const randomList = [];
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: '`const randomList = [];`'
- en: // Function to generate a random number of items
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: // 生成随机数量的项目的函数
- en: function randomNumberOfItems() {
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '`function randomNumberOfItems() {`'
- en: return Math.floor(Math.random() * groceryItems.length);
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: 返回`Math.floor(Math.random() * groceryItems.length);`
- en: '}'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Loop through the groceryItems array and push a random number of items to
    the randomList array
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: // 遍历groceryItems数组并将随机数量的项目推送到randomList数组
- en: for (let i = 0; i < randomNumberOfItems(); i++) {
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: '`for (let i = 0; i < randomNumberOfItems(); i++) {`'
- en: randomList.push(groceryItems[Math.floor(Math.random() * groceryItems.length)]);
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '`randomList.push(groceryItems[Math.floor(Math.random() * groceryItems.length)]);`'
- en: '}'
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.log(randomList);
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(randomList);`'
- en: This code creates an array of possible grocery items, then creates an empty
    array to store a random grocery list, it also creates a function randomNumberOfItems
    that uses Math.random() to generate a random number of items, this function is
    then used to create a for loop that will push a random number of items to the
    randomList array. The resulting randomList array will contain a random number
    of grocery items from the groceryItems array.
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: 这段代码创建了一个可能的杂货项目数组，然后创建一个空数组来存储随机的杂货清单，还创建了一个使用Math.random()生成随机项目数量的函数randomNumberOfItems，然后使用这个函数创建一个for循环，将随机数量的项目推送到randomList数组中。最终的randomList数组将包含来自groceryItems数组的随机数量的杂货项目。
- en: Stock market symbols
  id: totrans-291
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 股票市场符号
- en: Copilot
  id: totrans-292
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Copilot
- en: Copilot made a valiant attempt on this one, but it wanted to use currency symbols
    from faker, which apparently has no stock ticker symbols.
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: Copilot在这方面做出了英勇的尝试，但它想要使用faker中的货币符号，显然没有股票代码。
- en: // Create a list of random stock symbols
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个随机股票符号列表
- en: const symbols = [];
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: '`const symbols = [];`'
- en: for (let i = 0; i < 100; i++) {
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: '`for (let i = 0; i < 100; i++) {`'
- en: symbols.push(faker.finance.currencyCode());
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: '`symbols.push(faker.finance.currencyCode());`'
- en: '}'
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: It generated a list of 100 3-letter codes. For the purposes of sample code in
    a demo UI, I suppose this would do the job.
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: 它生成了一个包含100个3个字母代码的列表。对于演示UI中的示例代码而言，我想这样做就足够了。
- en: ChatGPT
  id: totrans-300
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ChatGPT
- en: What I most appreciate about ChatGPT is that it understands context. It knows
    what I mean by “Stock Symbols.” It gave me a very thorough code block.
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: 我最欣赏ChatGPT的地方在于它理解上下文。它知道我所说的“股票符号”的含义。它给了我一个非常详尽的代码块。
- en: Create a list of random stock symbols
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: 创建一个随机股票符号列表
- en: // Create an array of possible stock symbols
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个可能的股票符号数组
- en: const stockSymbols = ['AAPL', 'GOOGL', 'AMZN', 'FB', 'MSFT', 'BABA', 'TATAMOTORS',
    'BA', 'INFY', 'WMT', 'GE', 'CVX', 'PG', 'XOM', 'CMCSA', 'C'];
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: '`const stockSymbols = [''AAPL'', ''GOOGL'', ''AMZN'', ''FB'', ''MSFT'', ''BABA'',
    ''TATAMOTORS'', ''BA'', ''INFY'', ''WMT'', ''GE'', ''CVX'', ''PG'', ''XOM'', ''CMCSA'',
    ''C''];`'
- en: // Create an empty array to store the random stock symbols
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个空数组来存储随机的股票符号
- en: const randomStockSymbols = [];
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: '`const randomStockSymbols = [];`'
- en: // Function to generate a random number of stock symbols
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: // 生成随机数量的股票符号的函数
- en: function randomNumberOfSymbols() {
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: '`function randomNumberOfSymbols() {`'
- en: return Math.floor(Math.random() * stockSymbols.length);
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: '`return Math.floor(Math.random() * stockSymbols.length);`'
- en: '}'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Loop through the stockSymbols array and push a random number of symbols to
    the randomStockSymbols array
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: // 遍历stockSymbols数组并将随机数量的符号推送到randomStockSymbols数组
- en: for (let i = 0; i < randomNumberOfSymbols(); i++) {
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: '`for (let i = 0; i < randomNumberOfSymbols(); i++) {`'
- en: randomStockSymbols.push(stockSymbols[Math.floor(Math.random() * stockSymbols.length)]);
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: '`randomStockSymbols.push(stockSymbols[Math.floor(Math.random() * stockSymbols.length)]);`'
- en: '}'
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.log(randomStockSymbols);
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: '`console.log(randomStockSymbols);`'
- en: Random stock price stream
  id: totrans-316
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 随机股票价格流
- en: Can they also provide a random price stream from one of those symbols?
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 它们还能提供来自这些符号之一的随机价格流吗？
- en: Copilot
  id: totrans-318
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: Copilot
- en: // Create a list of random stock prices
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个随机股票价格列表
- en: const prices = [];
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: '`const prices = [];`'
- en: for (let i = 0; i < 100; i++) {
  id: totrans-321
  prefs: []
  type: TYPE_NORMAL
  zh: '`for (let i = 0; i < 100; i++) {`'
- en: prices.push(faker.finance.amount());
  id: totrans-322
  prefs: []
  type: TYPE_NORMAL
  zh: prices.push(faker.finance.amount());
- en: '}'
  id: totrans-323
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.table(prices);
  id: totrans-324
  prefs: []
  type: TYPE_NORMAL
  zh: console.table(prices);
- en: Then I figured I’d ask Copilot to put the two lists together.
  id: totrans-325
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我想让Copilot把这两个列表合在一起。
- en: // Combine the prices and symbols into a list of stocks
  id: totrans-326
  prefs: []
  type: TYPE_NORMAL
  zh: // 将价格和代码合并为股票列表
- en: const stocks = [];
  id: totrans-327
  prefs: []
  type: TYPE_NORMAL
  zh: const stocks = [];
- en: for (let i = 0; i < 100; i++) {
  id: totrans-328
  prefs: []
  type: TYPE_NORMAL
  zh: for (let i = 0; i < 100; i++) {
- en: stocks.push({
  id: totrans-329
  prefs: []
  type: TYPE_NORMAL
  zh: stocks.push({
- en: 'symbol: symbols[i],'
  id: totrans-330
  prefs: []
  type: TYPE_NORMAL
  zh: 'symbol: symbols[i],'
- en: 'price: prices[i],'
  id: totrans-331
  prefs: []
  type: TYPE_NORMAL
  zh: 'price: prices[i],'
- en: '});'
  id: totrans-332
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-333
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.table(stocks);
  id: totrans-334
  prefs: []
  type: TYPE_NORMAL
  zh: console.table(stocks);
- en: It isn’t horrible, but it would be cool to generate a stream that I could subscribe
    to.
  id: totrans-335
  prefs: []
  type: TYPE_NORMAL
  zh: 这并不糟糕，但生成一个我可以订阅的流会很酷。
- en: // Generate an observable stream of prices for each stock, changing every 5
    seconds
  id: totrans-336
  prefs: []
  type: TYPE_NORMAL
  zh: // 为每支股票生成一个可观察流的价格，每5秒变化一次
- en: const { interval } = require('rxjs');
  id: totrans-337
  prefs: []
  type: TYPE_NORMAL
  zh: const { interval } = require('rxjs');
- en: const { map, mergeMap } = require('rxjs/operators');
  id: totrans-338
  prefs: []
  type: TYPE_NORMAL
  zh: const { map, mergeMap } = require('rxjs/operators');
- en: const { from } = require('rxjs');
  id: totrans-339
  prefs: []
  type: TYPE_NORMAL
  zh: const { from } = require('rxjs');
- en: const { zip } = require('rxjs');
  id: totrans-340
  prefs: []
  type: TYPE_NORMAL
  zh: const { zip } = require('rxjs');
- en: const { take } = require('rxjs/operators');
  id: totrans-341
  prefs: []
  type: TYPE_NORMAL
  zh: const { take } = require('rxjs/operators');
- en: const stockStream = from(stocks);
  id: totrans-342
  prefs: []
  type: TYPE_NORMAL
  zh: const stockStream = from(stocks);
- en: const priceStream = interval(5000).pipe(take(10));
  id: totrans-343
  prefs: []
  type: TYPE_NORMAL
  zh: const priceStream = interval(5000).pipe(take(10));
- en: const combinedStream = zip(stockStream, priceStream).pipe(
  id: totrans-344
  prefs: []
  type: TYPE_NORMAL
  zh: const combinedStream = zip(stockStream, priceStream).pipe(
- en: map(([stock, price]) => {
  id: totrans-345
  prefs: []
  type: TYPE_NORMAL
  zh: map(([stock, price]) => {
- en: stock.price = price;
  id: totrans-346
  prefs: []
  type: TYPE_NORMAL
  zh: stock.price = price;
- en: return stock;
  id: totrans-347
  prefs: []
  type: TYPE_NORMAL
  zh: return stock;
- en: '}'
  id: totrans-348
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: ));
  id: totrans-349
  prefs: []
  type: TYPE_NORMAL
  zh: ));
- en: combinedStream.subscribe((stock) => {
  id: totrans-350
  prefs: []
  type: TYPE_NORMAL
  zh: combinedStream.subscribe((stock) => {
- en: console.log(stock);
  id: totrans-351
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(stock);
- en: '});'
  id: totrans-352
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: This was cool and mostly correct. I would have preferred that it take its prices
    from the list it created earlier, but it did most of the heavy lifting for me.
    When I ran it, it emitted a stock symbol and price every 5 seconds.
  id: totrans-353
  prefs: []
  type: TYPE_NORMAL
  zh: 这很酷，而且大部分是正确的。我更希望它从之前创建的列表中获取价格，但它为我做了大部分繁重的工作。当我运行它时，它每5秒发出一个股票代码和价格。
- en: ChatGPT
  id: totrans-354
  prefs:
  - PREF_H3
  type: TYPE_NORMAL
  zh: ChatGPT
- en: The code I got from ChatGPT was similar to what Copilot gave me, but far more
    complete. As with past prompts, it insists on giving a complete answer to every
    question. Here is what it gave me in its entirety.
  id: totrans-355
  prefs: []
  type: TYPE_NORMAL
  zh: 我从ChatGPT得到的代码与Copilot给我的类似，但更完整。与过去的提示一样，它坚持为每个问题提供完整的答案。这是它完整给我的内容。
- en: Generate an observable stream of prices for each stock, changing every 5 seconds
  id: totrans-356
  prefs: []
  type: TYPE_NORMAL
  zh: 生成一个可观察流的价格，每5秒变化一次
- en: const { Observable } = rxjs;
  id: totrans-357
  prefs: []
  type: TYPE_NORMAL
  zh: const { Observable } = rxjs;
- en: // Create an array of possible stock symbols
  id: totrans-358
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个可能的股票代码数组
- en: const stockSymbols = ['AAPL', 'GOOGL', 'AMZN', 'FB', 'MSFT', 'BABA', 'TATAMOTORS',
    'BA', 'INFY', 'WMT', 'GE', 'CVX', 'PG', 'XOM', 'CMCSA', 'C'];
  id: totrans-359
  prefs: []
  type: TYPE_NORMAL
  zh: const stockSymbols = ['AAPL', 'GOOGL', 'AMZN', 'FB', 'MSFT', 'BABA', 'TATAMOTORS',
    'BA', 'INFY', 'WMT', 'GE', 'CVX', 'PG', 'XOM', 'CMCSA', 'C'];
- en: // Create an empty array to store the random stock symbols
  id: totrans-360
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个空数组来存储随机股票代码
- en: const randomStockSymbols = [];
  id: totrans-361
  prefs: []
  type: TYPE_NORMAL
  zh: const randomStockSymbols = [];
- en: // Function to generate a random number of stock symbols
  id: totrans-362
  prefs: []
  type: TYPE_NORMAL
  zh: // 生成随机数量的股票代码的函数
- en: function randomNumberOfSymbols() {
  id: totrans-363
  prefs: []
  type: TYPE_NORMAL
  zh: function randomNumberOfSymbols() {
- en: return Math.floor(Math.random() * stockSymbols.length);
  id: totrans-364
  prefs: []
  type: TYPE_NORMAL
  zh: return Math.floor(Math.random() * stockSymbols.length);
- en: '}'
  id: totrans-365
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Loop through the stockSymbols array and push a random number of symbols to
    the randomStockSymbols array
  id: totrans-366
  prefs: []
  type: TYPE_NORMAL
  zh: // 遍历stockSymbols数组，并将随机数量的代码推送到randomStockSymbols数组中
- en: for (let i = 0; i < randomNumberOfSymbols(); i++) {
  id: totrans-367
  prefs: []
  type: TYPE_NORMAL
  zh: for (let i = 0; i < randomNumberOfSymbols(); i++) {
- en: randomStockSymbols.push(stockSymbols[Math.floor(Math.random() * stockSymbols.length)]);
  id: totrans-368
  prefs: []
  type: TYPE_NORMAL
  zh: randomStockSymbols.push(stockSymbols[Math.floor(Math.random() * stockSymbols.length)]);
- en: '}'
  id: totrans-369
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.log(randomStockSymbols);
  id: totrans-370
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(randomStockSymbols);
- en: // Create an empty array to store the random stock prices
  id: totrans-371
  prefs: []
  type: TYPE_NORMAL
  zh: // 创建一个空数组来存储随机股票价格
- en: const randomStockPrices = [];
  id: totrans-372
  prefs: []
  type: TYPE_NORMAL
  zh: const randomStockPrices = [];
- en: // Function to generate a random stock price
  id: totrans-373
  prefs: []
  type: TYPE_NORMAL
  zh: // 生成一个随机股票价格的函数
- en: function randomStockPrice() {
  id: totrans-374
  prefs: []
  type: TYPE_NORMAL
  zh: function randomStockPrice() {
- en: return (Math.random() * (300 - 50) + 50).toFixed(2);
  id: totrans-375
  prefs: []
  type: TYPE_NORMAL
  zh: return (Math.random() * (300 - 50) + 50).toFixed(2);
- en: '}'
  id: totrans-376
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: // Loop through the randomStockSymbols array and push a random stock price to
    the randomStockPrices array
  id: totrans-377
  prefs: []
  type: TYPE_NORMAL
  zh: // 遍历randomStockSymbols数组，并将随机股票价格推送到randomStockPrices数组中
- en: for (let i = 0; i < randomStockSymbols.length; i++) {
  id: totrans-378
  prefs: []
  type: TYPE_NORMAL
  zh: for (let i = 0; i < randomStockSymbols.length; i++) {
- en: const stock = {
  id: totrans-379
  prefs: []
  type: TYPE_NORMAL
  zh: const stock = {
- en: 'symbol: randomStockSymbols[i],'
  id: totrans-380
  prefs: []
  type: TYPE_NORMAL
  zh: 'symbol: randomStockSymbols[i],'
- en: 'price: randomStockPrice()'
  id: totrans-381
  prefs: []
  type: TYPE_NORMAL
  zh: 'price: randomStockPrice()'
- en: '};'
  id: totrans-382
  prefs: []
  type: TYPE_NORMAL
  zh: '};'
- en: randomStockPrices.push(stock);
  id: totrans-383
  prefs: []
  type: TYPE_NORMAL
  zh: randomStockPrices.push(stock);
- en: '}'
  id: totrans-384
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: console.log(randomStockPrices);
  id: totrans-385
  prefs: []
  type: TYPE_NORMAL
  zh: console.log(randomStockPrices);
- en: // Create an observable stream for each stock symbol
  id: totrans-386
  prefs: []
  type: TYPE_NORMAL
  zh: // 为每个股票代码创建一个可观察流
- en: const stockStreams = randomStockSymbols.map(symbol => {
  id: totrans-387
  prefs: []
  type: TYPE_NORMAL
  zh: const stockStreams = randomStockSymbols.map(symbol => {
- en: return Observable.create(observer => {
  id: totrans-388
  prefs: []
  type: TYPE_NORMAL
  zh: return Observable.create(observer => {
- en: setInterval(() => {
  id: totrans-389
  prefs: []
  type: TYPE_NORMAL
  zh: setInterval(() => {
- en: observer.next({
  id: totrans-390
  prefs: []
  type: TYPE_NORMAL
  zh: observer.next({
- en: symbol,
  id: totrans-391
  prefs: []
  type: TYPE_NORMAL
  zh: symbol,
- en: 'price: randomStockPrice()'
  id: totrans-392
  prefs: []
  type: TYPE_NORMAL
  zh: 'price: randomStockPrice()'
- en: '});'
  id: totrans-393
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}, 5000);'
  id: totrans-394
  prefs: []
  type: TYPE_NORMAL
  zh: '}, 5000);'
- en: '});'
  id: totrans-395
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-396
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: // Subscribe to each stock stream and log the updated stock price
  id: totrans-397
  prefs: []
  type: TYPE_NORMAL
  zh: // 订阅每个股票流并记录更新后的股票价格
- en: stockStreams.forEach(stream => {
  id: totrans-398
  prefs: []
  type: TYPE_NORMAL
  zh: stockStreams.forEach(stream => {
- en: stream.subscribe(stock => {
  id: totrans-399
  prefs: []
  type: TYPE_NORMAL
  zh: stream.subscribe(stock => {
- en: 'console.log(`${stock.symbol}: $${stock.price}`);'
  id: totrans-400
  prefs: []
  type: TYPE_NORMAL
  zh: 'console.log(`${stock.symbol}: $${stock.price}`);'
- en: '});'
  id: totrans-401
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '});'
  id: totrans-402
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: This code generates an observable stream for each stock symbol in the randomStockSymbols
    array, using the rxjs library and the Observable.create() method. It uses the
    setInterval() function to emit a new stock object containing the symbol and a
    random price every 5 seconds. Then it subscribes to each stock stream and logs
    the updated stock price.
  id: totrans-403
  prefs: []
  type: TYPE_NORMAL
  zh: 此代码使用rxjs库和Observable.create()方法为randomStockSymbols数组中的每个股票符号生成一个可观察流。它使用setInterval()函数每5秒发出一个包含符号和随机价格的新股票对象。然后订阅每个股票流，并记录更新后的股票价格。
- en: It's important to note that for this code to work, you should import rxjs library
    first.
  id: totrans-404
  prefs: []
  type: TYPE_NORMAL
  zh: 重要提示：要使此代码工作，您应该首先导入rxjs库。
- en: You have to admit that’s pretty complete.
  id: totrans-405
  prefs: []
  type: TYPE_NORMAL
  zh: 你必须承认这相当完整。
- en: Conclusion
  id: totrans-406
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 结论
- en: Overall, I rate Copilot a 5 or 6 out of 10 on the success scale. It ended up
    being more of a helper to use the faker library than anything. I suppose that
    even though it didn’t do what I expected it to do, it really doesn’t matter how
    the sample data is generated. Copilot uses the tools at its disposal, which is
    a good thing. I don’t think this should count against Copilot, though. It does
    a great job, considering what it’s designed to do.
  id: totrans-407
  prefs: []
  type: TYPE_NORMAL
  zh: '总的来说，我认为Copilot在成功度量标准上得5或6分（满分10分）。它最终更像是使用faker库的助手。我想，即使它没有做我期望它做的事情，真正重要的是如何生成示例数据并不那么重要。Copilot使用其可用的工具，这是一件好事。我认为这不应该算在Copilot的账上。考虑到其设计目的，它做得很好。 '
- en: ChatGPT, on the other hand, scored an 8 or a 9\. It will use or not use existing
    libraries, which makes it more flexible. It also remembers past requests, so you
    can give it instructions such as, “Do that again, using single quotes instead
    of double quotes.” Or “Rewrite that function using built-in JavaScript array functions.”
    One downside of ChatGPT that I did not show is that every time you ask it to rewrite
    or refactor an earlier answer, it slowly regenerates the entire block. After five
    or six of those, the time it takes to generate its answers feels longer and longer.
  id: totrans-408
  prefs: []
  type: TYPE_NORMAL
  zh: 另一方面，ChatGPT得分为8或9。它会使用或不使用现有的库，这使得它更加灵活。它还会记住过去的请求，因此您可以给出如“再次使用单引号而不是双引号”或“使用内置JavaScript数组函数重写该函数”等指示。我没有展示ChatGPT的一个缺点是，每次您要求它重新编写或重构之前的答案时，它都会缓慢地重新生成整个代码块。经过五六次这样的操作后，它生成答案的时间感觉越来越长。
- en: I did discover later that ChatGPT Plus, the paid subscription version, generates
    code much faster. I guess that’s what you get for $20/month (price as of March
    2023).
  id: totrans-409
  prefs: []
  type: TYPE_NORMAL
  zh: 我后来发现，ChatGPT Plus，即付费订阅版，生成代码的速度要快得多。我想那就是你每月付20美元的原因（截至2023年3月的价格）。
- en: As we continue to explore the various ways to use these tools, I think you’ll
    agree that each has its strengths, depending on where and how it’s used.
  id: totrans-410
  prefs: []
  type: TYPE_NORMAL
  zh: 当我们继续探索使用这些工具的各种方式时，我想你会同意每种方法都有其优点，这取决于在何处以及如何使用。
