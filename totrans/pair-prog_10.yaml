- en: '| ![image](d2d_images/chapter_title_corner_decoration_left.png) |  | ![image](d2d_images/chapter_title_corner_decoration_right.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '![image](d2d_images/chapter_title_above.png)'
  prefs: []
  type: TYPE_IMG
- en: Let’s Build an App!
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](d2d_images/chapter_title_below.png)'
  prefs: []
  type: TYPE_IMG
- en: '![image](d2d_images/image011.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Gerd Altmann](https://pixabay.com/users/geralt-9301/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=4025614) from [Pixabay](https://pixabay.com/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=4025614)
  prefs: []
  type: TYPE_NORMAL
- en: In the previous chapters, I included very verbose output from both Copilot and
    particularly ChatGPT. I also showed the output from each tool to show how well
    or poorly it did with the given prompts.
  prefs: []
  type: TYPE_NORMAL
- en: For this chapter, I’m going to use Copilot as my pair programming companion
    to build a modest application.
  prefs: []
  type: TYPE_NORMAL
- en: My technology stack will be a web application with HTML, Angular, and the Ionic
    Framework. Those choices are tangential to the point of using AI as my companion.
    Those are what I use every day, so I will quickly know whether or not the code
    generated by the AI is accurate.
  prefs: []
  type: TYPE_NORMAL
- en: It won’t be a complicated app, just enough to demonstrate how I use the tools.
  prefs: []
  type: TYPE_NORMAL
- en: Hopefully you will follow along. If you do, let me know how it goes.
  prefs: []
  type: TYPE_NORMAL
- en: An Ionic App
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Ionic is a popular web framework for building applications of all types, but
    it has traditionally been used to create hybrid mobile applications. That is,
    mobile apps written with web technologies.
  prefs: []
  type: TYPE_NORMAL
- en: New Blank Ionic Angular Application
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: To prepare for this project, I made sure I was on the latest version of Ionic
    withnpm i -g @ionic/cli. Then created a brand new, blank Ionic-Angular app with ionic
    start.
  prefs: []
  type: TYPE_NORMAL
- en: Once the project was created, I opened it in VS Code. I then created a blank
    text file and told VS Code that it’s a Shell script file. If you have been reading
    along, you may suspect what I was about to do.
  prefs: []
  type: TYPE_NORMAL
- en: Add a New Ionic Page
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I couldn’t remember how to create a new page (well, I could, but I wanted to
    see whether Copilot also knew). In my new Shell script file, I entered the following
    comment and waited to see what Copilot would offer me.
  prefs: []
  type: TYPE_NORMAL
- en: Create a new ionic page called Posts
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: ionic g page Posts
  prefs: []
  type: TYPE_NORMAL
- en: That command is one of a few valid ways to create a page, so I ran it in VS
    Code’s built-in terminal. Once created, I opened the app.component.html file,
    so that I could add a menu to my new page.
  prefs: []
  type: TYPE_NORMAL
- en: Side Menu and Split Pane
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever I create a new Ionic app, I start with a blank template, even though
    I know I’m going to want a side menu and a split-pane layout. I don’t start with
    the side-menu template because it adds a bunch of stuff I have to delete. The
    drawback is that I truly can never remember everything I need to do to create
    the split-pane and the side-menu. I was confident that Copilot could handle it,
    though.
  prefs: []
  type: TYPE_NORMAL
- en: 'When I opened the HTML file, it looked like this:'
  prefs: []
  type: TYPE_NORMAL
- en: <ion-app>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-router-outlet></ion-router-outlet>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-app>
  prefs: []
  type: TYPE_NORMAL
- en: 'Nothing surprising. I removed the <ion-router-outlet> line, replacing it with
    a comment:'
  prefs: []
  type: TYPE_NORMAL
- en: <!—Add a side menu and an ion split pane—>
  prefs: []
  type: TYPE_NORMAL
- en: Copilot “thought” a moment, almost long enough that I worried that it wasn’t
    working. Then, it gave me three different options. The first option contained
    two hard-coded pages. The second and third options built a menu from an array
    of pages on the component. The only difference between the two were some spacing,
    so I just picked one.
  prefs: []
  type: TYPE_NORMAL
- en: 'This is what Copilot gave me:'
  prefs: []
  type: TYPE_NORMAL
- en: <ion-app>
  prefs: []
  type: TYPE_NORMAL
- en: <!—Add a side menu and an ion split pane—>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-split-pane>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-menu side="start" contentId="main-content">
  prefs: []
  type: TYPE_NORMAL
- en: <ion-header>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-toolbar>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-title>Menu</ion-title>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-toolbar>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-header>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-content>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-list>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-menu-toggle auto-hide="false" *ngFor="let p of appPages">
  prefs: []
  type: TYPE_NORMAL
- en: <ion-item [routerDirection]="'root'" [routerLink]="[p.url]">
  prefs: []
  type: TYPE_NORMAL
- en: <ion-icon slot="start" [name]="p.icon"></ion-icon>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-label>
  prefs: []
  type: TYPE_NORMAL
- en: '{{p.title}}'
  prefs: []
  type: TYPE_NORMAL
- en: </ion-label>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-item>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-menu-toggle>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-list>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-content>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-menu>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-router-outlet id="main-content"></ion-router-outlet>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-app>
  prefs: []
  type: TYPE_NORMAL
- en: If you are more astute than I am, you’ll notice that the <ion-split-pane>tag
    isn’t closed. Copilot waited for me to enter a blank line just before the closing </ion-app>tag.
    Once I did, Copilot finished up for me by adding </ion-split-pane>.
  prefs: []
  type: TYPE_NORMAL
- en: My component did not yet have an appPagesarray, so I needed to get Copilot to
    make one for me. Over in app.component.ts, near the top of the class, I entered
    the word appPagesas a hint to see what it would do. It gave these lines to me
    one at a time, meaning I had to accept each suggestion by pressing the tab key
    and continuing by pressing the return key.
  prefs: []
  type: TYPE_NORMAL
- en: appPages = [
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'title: ''Home'','
  prefs: []
  type: TYPE_NORMAL
- en: 'url: ''/home'','
  prefs: []
  type: TYPE_NORMAL
- en: 'icon: ''home'''
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: I did have to cycle through the options when I got to the url. It initially
    suggested /inbox for the url. /homewas its second suggestion. You can also see
    that at this point, it hadn’t completed the array. It was waiting for me to give
    it permission to continue.
  prefs: []
  type: TYPE_NORMAL
- en: 'I still needed a menu to my new Posts page, so I gave it permission by pressing return.
    It gave me this:'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'title: ''List'','
  prefs: []
  type: TYPE_NORMAL
- en: 'I didn’t want that title, but there were no other options. Knowing by now that
    I can influence Copilot by changing its suggestions and then moving on, I changed
    the title to Postsand moved to the next line. It then added these lines:'
  prefs: []
  type: TYPE_NORMAL
- en: 'url: ''/posts'','
  prefs: []
  type: TYPE_NORMAL
- en: 'icon: ''list'''
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: Now I had no more pages, but Copilot would keep adding more if I let it, so
    I manually closed the array by typing ]; on the next line.
  prefs: []
  type: TYPE_NORMAL
- en: 'At this point, I hadn’t actually checked to see whether any of this code worked
    but remembered that I had used npm startright after opening the project. I switched
    to my browser where the project was rendered and found this waiting for me:'
  prefs: []
  type: TYPE_NORMAL
- en: '![Ionic split-pane app written mostly by GitHub Copilot](d2d_images/image012.png)Ionic
    split-pane app written mostly by GitHub Copilot'
  prefs: []
  type: TYPE_NORMAL
- en: Clicking the menus switched to the selected page, so it worked!
  prefs: []
  type: TYPE_NORMAL
- en: Looking at that screenshot, you may see the other oversight that Copilot missed.
    I admit I missed it at first but want to include it for completeness. The split
    pane layout isn’t working quite right. That home page should take up the full
    width of the screen.
  prefs: []
  type: TYPE_NORMAL
- en: Looking again at the code, I realized that Copilot did not add the required contentId attribute
    to the <ion-split-pane>. Hoping it would offer to do so, I added a blank line
    before the closing >and waited... and waited... nothing.
  prefs: []
  type: TYPE_NORMAL
- en: So, I think I finally stumped Copilot. I manually updated the line to look like
    this, and then it started working as expected.
  prefs: []
  type: TYPE_NORMAL
- en: <ion-split-pane contentId="main-content">
  prefs: []
  type: TYPE_NORMAL
- en: Copilot correctly added the contentId to the <ion-menu>, just not the <ion-split-pane>.
    Weird.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s Get Some Data!
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: If you’ve been following along in order, you may recall that I had[Copilot write
    me some RxJS with the Angular HttpClient](c008.xhtml#_Angular_s_HttpClient). I
    will use some of that code here, as it has already been written.
  prefs: []
  type: TYPE_NORMAL
- en: 'I created a new service with this command:'
  prefs: []
  type: TYPE_NORMAL
- en: ionic g service ApiService—skip-tests
  prefs: []
  type: TYPE_NORMAL
- en: Yes, I skipped creating tests — I’ll deal with Copilot and unit tests later.
  prefs: []
  type: TYPE_NORMAL
- en: I then pasted the following code from the RxJS chapter into the new file.
  prefs: []
  type: TYPE_NORMAL
- en: import { Injectable } from '[@angular/core](http://twitter.com/angular/core
    "Twitter profile for @angular/core")';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpClient } from '[@angular/common](http://twitter.com/angular/common
    "Twitter profile for @angular/common")/http';
  prefs: []
  type: TYPE_NORMAL
- en: // Provide service in root
  prefs: []
  type: TYPE_NORMAL
- en: '[@Injectable](http://twitter.com/Injectable "Twitter profile for @Injectable")({'
  prefs: []
  type: TYPE_NORMAL
- en: 'providedIn: ''root'''
  prefs: []
  type: TYPE_NORMAL
- en: '}) export class ApiService {'
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private http: HttpClient) { }'
  prefs: []
  type: TYPE_NORMAL
- en: // Get all posts from the API
  prefs: []
  type: TYPE_NORMAL
- en: getAllPosts() {
  prefs: []
  type: TYPE_NORMAL
- en: return this.http
  prefs: []
  type: TYPE_NORMAL
- en: .get('[https://jsonplaceholder.typicode.com/posts'](https://jsonplaceholder.typicode.com/posts%27));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: There is more code, but that was enough for my purposes. With this code, I expected
    I would be able to finish my modest app.
  prefs: []
  type: TYPE_NORMAL
- en: Load Blog Posts from Posts Component
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: With the service created, it was time to turn my attention to the Posts Component
    and load those posts into it. I opened posts.page.ts and added a hint to the top
    of the class. Remember, my goal was to write as little code as possible.
  prefs: []
  type: TYPE_NORMAL
- en: // Inject ApiService
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private apiService: ApiService) { }'
  prefs: []
  type: TYPE_NORMAL
- en: 'Copilot added the constructor, even though I already had one. In this case,
    it was easy enough to delete the existing one, but what if I already had one with
    other services in it? I decided to try again with the existing constructor. So,
    I started with this:'
  prefs: []
  type: TYPE_NORMAL
- en: // Inject ApiService
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private http: HttpClient) {'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'I wanted to give it an existing constructor with parameters in the hopes it
    wouldn’t create a new one. I typed a comma followed by a [space] after theHttpClient.
    Copilot added the second parameter correctly, which left me with this:'
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private http: HttpClient, private apiService: ApiService) { }'
  prefs: []
  type: TYPE_NORMAL
- en: The service name was correct, but as I have pointed out previously, Copilot
    won’t automatically import the service. Well, it will, but you have to put your
    cursor on one of the existing imports and then let it figure it out from there,
    which it will almost always do correctly, except apparently in this case. It wouldn’t
    add it for me, so I just got VS Code to do it instead.
  prefs: []
  type: TYPE_NORMAL
- en: Next, I needed to get those posts. Intellisense is really all that’s required
    in this situation, but again, my goal is to write as close to no code as possible.
  prefs: []
  type: TYPE_NORMAL
- en: // Get the posts from the API as an observable.
  prefs: []
  type: TYPE_NORMAL
- en: 'posts: any;'
  prefs: []
  type: TYPE_NORMAL
- en: ngOnInit() {
  prefs: []
  type: TYPE_NORMAL
- en: this.apiService.getAllPosts().subscribe(data => {
  prefs: []
  type: TYPE_NORMAL
- en: this.posts = data;
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: That is not at all what I wanted, though I can’t say it won’t work. I deleted
    that code and tried a different approach. I left the comment but added posts$
    =and then let Copilot suggest the rest. This tells Copilot that I want an observable
    assigned to the variable posts$.
  prefs: []
  type: TYPE_NORMAL
- en: // Get the posts from the API as an observable.
  prefs: []
  type: TYPE_NORMAL
- en: posts$ =
  prefs: []
  type: TYPE_NORMAL
- en: this.apiService.getAllPosts();
  prefs: []
  type: TYPE_NORMAL
- en: That is what I wanted, and all I needed for this file.
  prefs: []
  type: TYPE_NORMAL
- en: Responsive View for Blog Posts
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I’ve always been a big fan of the <ion-card>, so I wanted to use a bunch of
    them to display the blog posts from the above API call. I also want the UI to
    be responsive, so that was also a requirement.
  prefs: []
  type: TYPE_NORMAL
- en: I switched over to the template file at posts.page.html and placed my cursor
    on the blank line inside the <ion-content>.
  prefs: []
  type: TYPE_NORMAL
- en: Given a single HTML comment, this is what I ended up with.
  prefs: []
  type: TYPE_NORMAL
- en: <!—Create a responsive layout with ion-grid—>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-grid>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-row>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-col size="12" size-md="6" size-lg="4" *ngFor="let post of posts">
  prefs: []
  type: TYPE_NORMAL
- en: <ion-card>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-card-header>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-card-title>{{post.title}}</ion-card-title>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-card-header>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-card-content>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{{post.body}}</p>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-card-content>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-card>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-col>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-row>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-grid>
  prefs: []
  type: TYPE_NORMAL
- en: I had no idea it would offer the <ion-card>, but as that is what I wanted, I
    was cool with it. The only thing it got wrong was the postsvariable, which doesn’t
    exist. I wondered whether it would have been one of the alternative suggestions,
    so I undid the edit and tried again, planning to cycle through the suggestions.
    None of its other suggestions fixed that, though, so I tried one other idea.
  prefs: []
  type: TYPE_NORMAL
- en: I changed the comment to reference the actual variable name of posts$. Copilot
    then gave me this. I’ve found that if you give Copilot enough of a hint, it will
    get things right.
  prefs: []
  type: TYPE_NORMAL
- en: <!—Create a responsive layout of posts$ with ion-grid—>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-grid>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-row>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-col size="12"
  prefs: []
  type: TYPE_NORMAL
- en: size-sm="6"
  prefs: []
  type: TYPE_NORMAL
- en: size-md="4"
  prefs: []
  type: TYPE_NORMAL
- en: size-lg="3"
  prefs: []
  type: TYPE_NORMAL
- en: '*ngFor="let post of posts$ | async">'
  prefs: []
  type: TYPE_NORMAL
- en: <ion-card>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-card-header>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-card-title>{{post.title}}</ion-card-title>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-card-header>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-card-content>
  prefs: []
  type: TYPE_NORMAL
- en: <p>{{post.body}}</p>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-card-content>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-card>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-col>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-row>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-grid>
  prefs: []
  type: TYPE_NORMAL
- en: That’s what I wanted! Thinking this might be right, I decided to switch over
    to the browser to check out my (uh, Copilot’s) handiwork.
  prefs: []
  type: TYPE_NORMAL
- en: To my surprise, it compiled but did not run. Did you catch the problem? Maybe
    if I show you the console error it will become clear.
  prefs: []
  type: TYPE_NORMAL
- en: 'ERROR Error: Uncaught (in promise): NullInjectorError: R3InjectorError(PostsPageModule)[HttpClient
    -> HttpClient -> HttpClient -> HttpClient]:'
  prefs: []
  type: TYPE_NORMAL
- en: 'NullInjectorError: No provider for HttpClient!'
  prefs: []
  type: TYPE_NORMAL
- en: Oh, right!
  prefs: []
  type: TYPE_NORMAL
- en: I forgot to add the HttpClientModule in my app module. Long story short, I could
    have done it myself, but thought it would better to keep letting Copilot guess
    what I wanted from my comments. At the top of app.module.ts, I added this comment.
    Copilot added the rest.
  prefs: []
  type: TYPE_NORMAL
- en: // Import the HttpClientModule
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpClientModule } from '@angular/common/http';
  prefs: []
  type: TYPE_NORMAL
- en: 'Then in the imports array:'
  prefs: []
  type: TYPE_NORMAL
- en: // Add the HttpClientModule to the imports array
  prefs: []
  type: TYPE_NORMAL
- en: HttpClientModule,
  prefs: []
  type: TYPE_NORMAL
- en: Now it was finally time to review the browser again.
  prefs: []
  type: TYPE_NORMAL
- en: '![Blog posts app written almost entirely by GitHub Copilot, showing a responsive
    grid layout with a side menu.](d2d_images/image001.png)Blog posts app in Ionic
    Framework written almost entirely by GitHub Copilot'
  prefs: []
  type: TYPE_NORMAL
- en: It’s even responsive.
  prefs: []
  type: TYPE_NORMAL
- en: '![Responsive version, showing only two columns of content and no side menu.](d2d_images/image000.png)'
  prefs: []
  type: TYPE_IMG
- en: Responsive version has only two columns of content and no side menu.
  prefs: []
  type: TYPE_NORMAL
- en: But you may have noticed an oversight. The side menu appropriately disappears
    on smaller screen widths, but there is no menu button. Did Copilot forget that
    or did I? Honestly, I’m not sure.
  prefs: []
  type: TYPE_NORMAL
- en: It isn’t hard to fix, though, which we’ll soon see.
  prefs: []
  type: TYPE_NORMAL
- en: Toolbar Buttons
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'The last thing I wanted to do was see whether I could get Copilot to make some
    buttons for me. On the Posts page, the existing header looks like this:'
  prefs: []
  type: TYPE_NORMAL
- en: <ion-header>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-toolbar>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-title>Posts</ion-title>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-toolbar>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-header>
  prefs: []
  type: TYPE_NORMAL
- en: Now, I happen to know where the button goes, but let’s assume I do not. What
    if I were to remove the entire header and see what Copilot would do? I did exactly
    that, replacing the header with a comment, after which Copilot provided me with
    the rest.
  prefs: []
  type: TYPE_NORMAL
- en: <!—Header with title and menu button—>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-header>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-toolbar>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-buttons slot="start">
  prefs: []
  type: TYPE_NORMAL
- en: <ion-menu-button></ion-menu-button>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-buttons>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-title>Posts</ion-title>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-toolbar>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-header>
  prefs: []
  type: TYPE_NORMAL
- en: It did not suggest a Back button, so I added a comment immediately after the
    menu button.
  prefs: []
  type: TYPE_NORMAL
- en: <!—Back Button—>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-back-button defaultHref="/home"></ion-back-button>
  prefs: []
  type: TYPE_NORMAL
- en: That was the second suggestion. The first one had the back button commented
    out and no defaultHref, which is an attribute that tells Ionic where to navigate
    if there is nothing “to go back to.”
  prefs: []
  type: TYPE_NORMAL
- en: To be consistent, I also needed to do the same thing to the home page. What
    stood out to me about that, though, is that it this time it remembered the back
    button and added it automatically.
  prefs: []
  type: TYPE_NORMAL
- en: Copilot tends to recognize patterns in your code and applies those patterns
    where they make sense.
  prefs: []
  type: TYPE_NORMAL
- en: <!—Header with title and menu button—>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-header>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-toolbar>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-buttons slot="start">
  prefs: []
  type: TYPE_NORMAL
- en: <ion-menu-button></ion-menu-button>
  prefs: []
  type: TYPE_NORMAL
- en: <!—Back Button—>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-back-button defaultHref="/home"></ion-back-button>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-buttons>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-title>Posts</ion-title>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-toolbar>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-header>
  prefs: []
  type: TYPE_NORMAL
- en: Not always, though. It did get the page title wrong, so I fixed that manually.
  prefs: []
  type: TYPE_NORMAL
- en: Whether or not the Back button makes sense for the user experience is something
    we can debate another time.
  prefs: []
  type: TYPE_NORMAL
- en: What about ChatGPT?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: 'Could ChatGPT have done a better job? My initial hesitation about using ChatGPT
    for this chapter is twofold:'
  prefs: []
  type: TYPE_NORMAL
- en: There is a lot of back-and-forth when coding. If you’re in and out of the editor,
    back to ChatGPT, etc. It gets tiresome quickly.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: ChatGPT doesn’t know about anything past September 2021\. What versions of Angular
    and Ionic were current then? I decided to ask ChatGPT to find out.
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the newest version of Angular and Ionic Framework you know of?
  prefs: []
  type: TYPE_NORMAL
- en: 'As of my knowledge cutoff date of September 2021, the newest versions of Angular
    and Ionic Framework were:'
  prefs: []
  type: TYPE_NORMAL
- en: 'Angular: The newest version of Angular at that time was version 13, which was
    released on November 10, 2021.'
  prefs: []
  type: TYPE_NORMAL
- en: 'Ionic Framework: The newest version of Ionic Framework at that time was version
    6, which was released on February 11, 2021.'
  prefs: []
  type: TYPE_NORMAL
- en: However, please note that software versions are constantly updated and new versions
    may have been released since my knowledge cutoff date.
  prefs: []
  type: TYPE_NORMAL
- en: Well, I know those versions are current enough that the code it generates should
    be fine, so I decided to make the most comprehensive prompt I could think of and
    see what it would give me. Here it is in its entirety.
  prefs: []
  type: TYPE_NORMAL
- en: Using Angular and the Ionic Framework, create a complete web application that
    uses a split-pane layout with a side menu and a default Home page. It should have
    an Angular service to load blog posts from a remote sample API. Those blog posts
    should be displayed on a page called Posts. The Posts page should be responsive,
    displaying the blog post titles and body in an <ion-card>. When working with Observables,
    prefer the async pipe over subscribing and unsubscribing. Make sure you provide
    the Ionic CLI commands to create the application and any additional items needed
    to create the application.
  prefs: []
  type: TYPE_NORMAL
- en: As an AI language model, I am not able to create full web applications with
    code. However, I can provide you with a detailed outline of the steps and code
    snippets needed to complete the requested task.
  prefs: []
  type: TYPE_NORMAL
- en: 'To create the application using Angular and the Ionic Framework, follow these
    steps:'
  prefs: []
  type: TYPE_NORMAL
- en: '1.  Install the Ionic CLI by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: npm install -g @ionic/cli
  prefs: []
  type: TYPE_NORMAL
- en: '2.  Create a new Ionic Angular project using the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: ionic start myapp—type=angular
  prefs: []
  type: TYPE_NORMAL
- en: '3.  Change into the newly created project directory:'
  prefs: []
  type: TYPE_NORMAL
- en: cd myapp
  prefs: []
  type: TYPE_NORMAL
- en: '4.  Generate a service to load blog posts from a remote sample API by running
    the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: ionic generate service services/post
  prefs: []
  type: TYPE_NORMAL
- en: '5.  In the generated post service file (post.service.ts), add the following
    code to import HttpClient and Observable:'
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpClient } from '@angular/common/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { Observable } from 'rxjs';
  prefs: []
  type: TYPE_NORMAL
- en: '6.  Add the following code to the post service file to load the blog posts
    from the remote API:'
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private http: HttpClient) {}'
  prefs: []
  type: TYPE_NORMAL
- en: 'getPosts(): Observable<any> {'
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get('https://jsonplaceholder.typicode.com/posts');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '7.  Generate a new page called Posts by running the following command:'
  prefs: []
  type: TYPE_NORMAL
- en: ionic generate page pages/posts
  prefs: []
  type: TYPE_NORMAL
- en: '8.  In the generated posts page file (posts.page.ts), add the following code
    to import the post service and Observable:'
  prefs: []
  type: TYPE_NORMAL
- en: import { PostService } from '../../services/post/post.service';
  prefs: []
  type: TYPE_NORMAL
- en: import { Observable } from 'rxjs';
  prefs: []
  type: TYPE_NORMAL
- en: '9.  Add the following code to the posts page file to load the blog posts using
    the post service:'
  prefs: []
  type: TYPE_NORMAL
- en: 'posts$: Observable<any>;'
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private postService: PostService) {}'
  prefs: []
  type: TYPE_NORMAL
- en: ngOnInit() {
  prefs: []
  type: TYPE_NORMAL
- en: this.posts$ = this.postService.getPosts();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '10.  In the posts page template file (posts.page.html), add the following code
    to display the blog post titles and body in an <ion-card>:'
  prefs: []
  type: TYPE_NORMAL
- en: <ion-content>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-card *ngFor="let post of posts$ | async">
  prefs: []
  type: TYPE_NORMAL
- en: <ion-card-header>
  prefs: []
  type: TYPE_NORMAL
- en: '{{ post.title }}'
  prefs: []
  type: TYPE_NORMAL
- en: </ion-card-header>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-card-content>
  prefs: []
  type: TYPE_NORMAL
- en: '{{ post.body }}'
  prefs: []
  type: TYPE_NORMAL
- en: </ion-card-content>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-card>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-content>
  prefs: []
  type: TYPE_NORMAL
- en: '11.  Modify the app-routing.module.ts file to add routes for the Home and Posts
    pages:'
  prefs: []
  type: TYPE_NORMAL
- en: import { NgModule } from '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { Routes, RouterModule } from '@angular/router';
  prefs: []
  type: TYPE_NORMAL
- en: import { HomePage } from './home/home.page';
  prefs: []
  type: TYPE_NORMAL
- en: import { PostsPage } from './pages/posts/posts.page';
  prefs: []
  type: TYPE_NORMAL
- en: 'const routes: Routes = ['
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'path: '''','
  prefs: []
  type: TYPE_NORMAL
- en: 'component: HomePage'
  prefs: []
  type: TYPE_NORMAL
- en: '},'
  prefs: []
  type: TYPE_NORMAL
- en: '{'
  prefs: []
  type: TYPE_NORMAL
- en: 'path: ''posts'','
  prefs: []
  type: TYPE_NORMAL
- en: 'component: PostsPage'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '];'
  prefs: []
  type: TYPE_NORMAL
- en: '@NgModule({'
  prefs: []
  type: TYPE_NORMAL
- en: 'imports: [RouterModule.forRoot(routes)],'
  prefs: []
  type: TYPE_NORMAL
- en: 'exports: [RouterModule]'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export class AppRoutingModule {}
  prefs: []
  type: TYPE_NORMAL
- en: '12.  Modify the app.component.html file to add a split-pane layout with a side
    menu and a default Home page:'
  prefs: []
  type: TYPE_NORMAL
- en: <ion-split-pane>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-menu>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-header>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-toolbar>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-title>Menu</ion-title>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-toolbar>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-header>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-content>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-list>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-item routerLink="/" routerDirection="root">
  prefs: []
  type: TYPE_NORMAL
- en: Home
  prefs: []
  type: TYPE_NORMAL
- en: </ion-item>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-item routerLink="/posts" routerDirection="root">
  prefs: []
  type: TYPE_NORMAL
- en: Posts
  prefs: []
  type: TYPE_NORMAL
- en: </ion-item>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-list>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-content>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-menu>
  prefs: []
  type: TYPE_NORMAL
- en: <ion-router-outlet></ion-router-outlet>
  prefs: []
  type: TYPE_NORMAL
- en: </ion-split-pane>
  prefs: []
  type: TYPE_NORMAL
- en: '13.  Run the following command to start the application in a local development
    server:'
  prefs: []
  type: TYPE_NORMAL
- en: ionic serve
  prefs: []
  type: TYPE_NORMAL
- en: This will launch the application in your default web browser.
  prefs: []
  type: TYPE_NORMAL
- en: With these steps, you should have a complete web application using Angular and
    the Ionic Framework with a split-pane layout and a side menu. The Home page is
    the default page, and the Posts page displays blog post titles and body in an
    <ion-card>. The blog posts are loaded from a remote sample API using an Angular
    service, and the Posts page is responsive using the async pipe.
  prefs: []
  type: TYPE_NORMAL
- en: Please note that the code snippets provided here are just a starting point and
    may need to be modified or expanded to meet your specific requirements.
  prefs: []
  type: TYPE_NORMAL
- en: I have to say that’s a pretty good start. Did you see what it missed, though?
    I forgot to ask it to give me a menu and back buttons, so it didn’t. It also didn’t
    give me a header bar on the Posts page, and it didn’t bother to offer any icons
    for my menu.
  prefs: []
  type: TYPE_NORMAL
- en: Speaking of the side menu, it completely neglected to give me contentId values
    for the <ion-split-pane> and the <ion-menu>. I didn’t bother entering all that
    into my app but am reasonably certain it won’t run as-is.
  prefs: []
  type: TYPE_NORMAL
- en: This is where Copilot really shines. Copilot often needs some coaxing, but it
    mostly gets the code right. You can easily delete a line or a function, type a
    new comment, and quickly get the code you need.
  prefs: []
  type: TYPE_NORMAL
- en: With ChatGPT, you can ask it to refine its response, but it will usually generate
    everything again. Not only that, but I’ve seen it generate completely different
    code on subsequent passes, changing more than you ask it to.
  prefs: []
  type: TYPE_NORMAL
- en: I’m not convinced ChatGPT would have saved me much time here. I find that it
    works better for writing simple functions and algorithms.
  prefs: []
  type: TYPE_NORMAL
- en: It isn’t ready for writing complete apps (yet?).
  prefs: []
  type: TYPE_NORMAL
