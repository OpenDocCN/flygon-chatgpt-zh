["```py\ndef chat_completion(prompt, model=\"gpt-4\", temperature=0):\n    res = openai.ChatCompletion.create(\n        model=model,\n        messages=[{\"role\": \"user\", \"content\": prompt}],\n        temperature=temperature,\n    )\n    print(res[\"choices\"][0][\"message\"][\"content\"])\n```", "```py\nchat_completion(\"As Descartes said, I think therefore\")\n```", "```py\nI am. This famous philosophical statement, also known as \"Cogito, ergo sum,\" \nemphasizes the existence of the self through the act of thinking or doubting.\nDescartes used this statement as a foundational principle in his philosophy,\narguing that one's own existence is the most certain and indubitable fact\nthat can be known.\n```", "```py\nchat_completion(\"Give me a suggestion for the main course for today's lunch.\")\n```", "```py\nGrilled chicken with roasted vegetables and quinoa.\n```", "```py\nprompt = \"\"\"\nContext: I do 2 hours of sport a day. I am vegetarian, and I don't like green \nvegetables. I am conscientious about eating healthily. \nTask: Give me a suggestion for a main course for today's lunch.\"\"\"\nchat_completion(prompt)\n```", "```py\n\nFor today's lunch, you can try a Chickpea and Sweet Potato Curry served with\nQuinoa. This dish is packed with protein, fiber, and essential nutrients,\nwhile also being vegetarian and not relying on green vegetables. The curry\ncan be made with chickpeas, sweet potatoes, tomatoes, onions, garlic, and a\nblend of spices like turmeric, cumin, and coriander. Cook the quinoa\nseparately and serve it alongside the curry for a delicious and healthy meal.\n```", "```py\nprompt = \"\"\"\nContext: I do 2 hours of sport a day. I am vegetarian and I don't like green \nvegetables. I am very careful to eat healthily.\nTask: Give me a suggestion for a main course for today's lunch?\nDo not perform the requested task! Instead, can you ask me questions about the \ncontext so that when I answer, you can perform the requested task more\nefficiently?\n\"\"\"\nchat_completion(prompt)\n```", "```py\nSure, I have a few questions to help me suggest a suitable main course for you:\n1\\. What type of sport do you do, and do you have any specific nutritional\n  requirements related to it?\n2\\. Are there any other vegetables or ingredients that you particularly enjoy\n  or dislike?\n3\\. Do you prefer a hot or cold meal for lunch?\n4\\. Are you open to trying new recipes or do you prefer sticking to\n  familiar dishes?\n```", "```py\nprompt = \"\"\"\nContext: I do 2 hours of sport a day. I am vegetarian, and I don't like green \nvegetables. I am conscientious about eating healthily.\nTask: Give me a suggestion for a main course for today's lunch.\nWith this suggestion, I also want a table with two columns where each row \ncontains an ingredient from the main course.\nThe first column in the table is the name of the ingredient.\nThe second column of the table is the number of grams of that ingredient needed \nfor one person. Do not give the recipe for preparing the main course.\n\"\"\"\nchat_completion(prompt)\n```", "```py\nSuggestion for today's lunch: Stuffed Bell Peppers with Quinoa and Black Beans\n| Ingredient          | Grams per person |\n|---------------------|------------------|\n| Bell peppers        | 200g             |\n| Quinoa              | 60g              |\n| Black beans         | 75g              |\n| Onion               | 50g              |\n| Garlic              | 5g               |\n| Olive oil           | 10g              |\n| Tomato sauce        | 50g              |\n| Cumin               | 1g               |\n| Chili powder        | 1g               |\n| Salt                | 1g               |\n| Pepper              | 1g               |\n| Shredded cheese     | 30g              |\n```", "```py\nCorrect this to standard English: She no went to the market.\n```", "```py\nSummarize this for a second-grade student: Jupiter is the fifth planet [...]\n```", "```py\nA neutron star [...] atomic nuclei. Tl;dr\n```", "```py\n# Python 3 \ndef hello(x): \nprint('hello '+str(x)) \n# Explanation of what the code does\n```", "```py\n# Python 3 \ndef hello(x, n):\n     for i in range(n):\n        print('hello '+str(x))\n# The time complexity of this function is \n```", "```py\n### Buggy Python\ndef hello(x, n):\n     for i in rang(n):\n        print('hello '+str(x))\n### Fixed Python\n```", "```py\nCreate a SQL request to find all users who live in California and have\nover 1000 credits.\n```", "```py\nCreate an analogy for this phrase. Questions are arrows in that:\n```", "```py\nConvert my shorthand into a first-hand account of the meeting:\nTom: Profits up 50%\nJane: New servers are online\nKjel: Need more time to fix software\n```", "```py\nprompt = \"\"\"\nRole: You are a nutritionist designing healthy diets for high-performance \nathletes. You take into account the nutrition needed for a good recovery.\nContext: I do 2 hours of sport a day. I am vegetarian, and I don't like green \nvegetables. I am conscientious about eating healthily.\nTask: Based on your expertise defined in your role, give me a suggestion for a \nmain course for today's lunch. With this suggestion, I also want a table with\ntwo columns where each row in the table contains an ingredient from the main \ncourse. The first column in the table is the name of the ingredient.\nThe second column of the table is the number of grams of that ingredient needed\nfor one person. Do not give the recipe for preparing the main course.\n\"\"\"\nchat_completion(prompt)\n```", "```py\nMain Course Suggestion: Quinoa and Chickpea Stuffed Bell Peppers\nIngredient Table:\n| Ingredient          | Grams per Person |\n|---------------------|------------------|\n| Quinoa              | 60               |\n| Chickpeas           | 100              |\n| Bell Peppers        | 200              |\n| Olive Oil           | 10               |\n| Onion               | 50               |\n| Garlic              | 5                |\n| Tomato              | 100              |\n| Feta Cheese         | 30               |\n| Kalamata Olives     | 20               |\n| Fresh Basil         | 5                |\n| Salt                | 2                |\n| Black Pepper        | 1                |\n```", "```py\nprompt = \"How much is 369 * 1235?\"\nchat_completion(prompt)\n```", "```py\nprompt = \"How much is 369 * 1235 ? Let's think step by step.\"\nchat_completion(prompt)\n```", "```py\nStep 1: Multiply 369 by 5 (the last digit of 1235).\n369 * 5 = 1845\nStep 2: Multiply 369 by 30 (the second last digit of 1235 is 3, so multiply by\n   3 and add a 0 at the end).\n369 * 30 = 11070\nStep 3: Multiply 369 by 200 (the third digit of 1235 is 2, so multiply by 2 and\n   add two 0s at the end).\n369 * 200 = 73800\nStep 4: Multiply 369 by 1000 (the first digit of 1235 is 1, so multiply by 1 and \n   add three 0s at the end).\n369 * 1000 = 369000\nStep 5: Add the results from steps 1 to 4.\n1845 + 11070 + 73800 + 369000 = 455715\nSo, 369 * 1235 = 455,715.\n```", "```py\nprompt=\"\"\"I go home -->  go my dog is sad --> my  is I run fast -->  run I love my wife -->  my wifethe girl plays with the ball --> the  with the The boy writes a letter to a girl --> \"\"\"chat_completion(prompt)\n```", "```py\nThe   a  to a \n```", "```py\nDid you understand my request clearly? If you do not fully understand my request,\nask me questions about the context so that when I answer, you can\nperform the requested task more efficiently.\n```", "```py\nprompt = \"\"\"\nGive a JSON output with 5 names of animals. The output must be accepted \nby json.loads.\n\"\"\"\nchat_completion(prompt, model='gpt-4')\n```", "```py\n{\n  \"animals\": [\n    \"lion\",\n    \"tiger\",\n    \"elephant\",\n    \"giraffe\",\n    \"zebra\"\n  ]\n}\n```", "```py\nExtract the keywords from the following question: {user_question}. Do not answer\nanything else, only the keywords.\n```", "```py\n{\"prompt\": \"<prompt text>\", \"completion\": \"<completion text>\"}\n{\"prompt\": \"<prompt text>\", \"completion\": \"<completion text>\"}\n{\"prompt\": \"<prompt text>\", \"completion\": \"<completion text>\"}\n\u2026\n```", "```py\n$ openai tools fine_tunes.prepare_data -f <LOCAL_FILE>\n```", "```py\nopenai.File.create(\n    file=open(\"out_openai_completion_prepared.jsonl\", \"rb\"),\n    purpose='fine-tune'\n)\n```", "```py\nopenai.File.delete(\"file-z5mGg(...)\")\n```", "```py\nopenai.File.list()\n```", "```py\nopenai.FineTune.list()\n```", "```py\nopenai.FineTune.cancel()\n```", "```py\n{\"prompt\": \"Review the following Python code: \n    'def sum(a, b): return a + b\\nresult = sum(5, '5')'\",\n\"completion\": \"Type error: The 'sum' function is adding an integer and a string. \n    Consider converting the string to an integer using int() before passing it\n    to the function.\"}\n```", "```py\n{\"prompt\": \"The central bank announced a 0.25% increase in the benchmark \n    interest rate, citing concerns about inflationary pressures. This move is\n    expected to affect borrowing costs for consumers and businesses.\",\n\"completion\": \"Bank increases rate 0.25% for inflation worry. May affect people,\n    business borrowing costs.\"}\n```", "```py\n{\"prompt\": \"Write an introductory article about a new environmentally friendly\n    cryptocurrency: 'EcoCoin: The Green Cryptocurrency Taking\n    the Market by Storm'\",\n\"completion\": \"As concerns over the environmental impact of cryptocurrency\n    mining (...) mining process and commitment to sustainability.\"}\n```", "```py\nl_sector = ['Grocery Stores', 'Restaurants', 'Fast Food Restaurants',\n              'Pharmacies', 'Service Stations (Fuel)', 'Electronics Stores']\nl_city = ['Brussels', 'Paris', 'Berlin']\nl_size = ['small', 'medium', 'large'] \n```", "```py\nf_prompt = \"\"\" \nRole: You are an expert content writer with extensive direct marketing \nexperience. You have strong writing skills, creativity, adaptability to \ndifferent tones and styles, and a deep understanding of audience needs and\npreferences for effective direct campaigns.\nContext: You have to write a short message in no more than 2 sentences for a\ndirect marketing campaign to sell a new e-commerce payment service to stores. \nThe target stores have the following three characteristics:\n- The sector of activity: {sector} `- The city where the stores are located:` `{city}`\n`- The size of the stores:` `{size}` ``Task: Write a short message for the direct marketing campaign. Use the skills`\n`defined in your role to write this message! It is important that the message`\n`you create takes into account the product you are selling and the`\n`characteristics of the store you are writing to.`\n`\"\"\"``\n```", "```py\nf_sub_prompt = \"{sector}, {city}, {size}\"\n```", "```py\ndf = pd.DataFrame()\nfor sector in l_sector:\n    for city in l_city:\n        for size in l_size:\n            for i in range(3):  ## 3 times each\n                prompt = f_prompt.format(sector=sector, city=city, size=size)\n                sub_prompt = f_sub_prompt.format(\n                    sector=sector, city=city, size=size\n                )\n                response_txt = chat_completion(\n                    prompt, model=\"gpt-3.5-turbo\", temperature=1\n                )\n                new_row = {\"prompt\": sub_prompt, \"completion\": response_txt}\n                new_row = pd.DataFrame([new_row])\n                df = pd.concat([df, new_row], axis=0, ignore_index=True)\ndf.to_csv(\"out_openai_completion.csv\",  index=False)\n```", "```py\n\"Grocery Stores, Brussels, small\",Introducing our new e-commerce payment service - \nthe perfect solution for small Brussels-based grocery stores to easily and \nsecurely process online transactions. \"Grocery Stores, Brussels, small\",\nLooking for a hassle-free payment solution for your small grocery store in\nBrussels? Our new e-commerce payment service is here to simplify your\ntransactions and increase your revenue. Try it now!\n```", "```py\n$ openai tools fine_tunes.prepare_data -f out_openai_completion.csv\n```", "```py\nAnalyzing...\n- Based on your file extension, your file is formatted as a CSV file\n- Your file contains 162 prompt-completion pairs\n- Your data does not contain a common separator at the end of your prompts. \nHaving a separator string appended to the end of the prompt makes it clearer\nto the fine-tuned model where the completion should begin. See\nhttps://platform.openai.com/docs/guides/fine-tuning/preparing-your-dataset\nfor more detail and examples. If you intend to do open-ended generation, \nthen you should leave the prompts empty\n- Your data does not contain a common ending at the end of your completions. \nHaving a common ending string appended to the end of the completion makes it\nclearer to the fine-tuned model where the completion should end. See\nhttps://oreil.ly/MOff7 for more detail and examples.\n- The completion should start with a whitespace character (` `). This tends to\nproduce better results due to the tokenization we use. See \nhttps://oreil.ly/MOff7 for more details\nBased on the analysis we will perform the following actions:\n- [Necessary] Your format `CSV` will be converted to `JSONL`\n- [Recommended] Add a suffix separator ` ->` to all prompts [Y/n]: Y\n- [Recommended] Add a suffix ending `\\n` to all completions [Y/n]: Y\n- [Recommended] Add a whitespace character to the beginning of the completion\n[Y/n]: Y\nYour data will be written to a new JSONL file. Proceed [Y/n]: Y\nWrote modified file to `out_openai_completion_prepared.jsonl`\nFeel free to take a look!\nNow use that file when fine-tuning:\n> openai api fine_tunes.create -t \"out_openai_completion_prepared.jsonl\"\nAfter you\u2019ve fine-tuned a model, remember that your prompt has to end with the \nindicator string ` ->` for the model to start generating completions, rather\nthan continuing with the prompt. Make sure to include `stop=[\"\\n\"]` so that the\ngenerated texts ends at the expected place.\nOnce your model starts training, it'll approximately take 4.67 minutes to train\na `curie` model, and less for `ada` and `babbage`. Queue will approximately\ntake half an hour per job ahead of you.\n```", "```py\nft_file = openai.File.create(\n    file=open(\"out_openai_completion_prepared.jsonl\", \"rb\"), purpose=\"fine-tune\"\n)\nopenai.FineTune.create(\n    training_file=ft_file[\"id\"], model=\"davinci\", suffix=\"direct_marketing\"\n)\n```", "```py\n$ openai api fine_tunes.create -t out_openai_completion_prepared.jsonl \\ \n                -m davinci --suffix \"direct_marketing\"\n```", "```py\n\nUpload progress: 100%|| 40.8k/40.8k [00:00<00:00, 65.5Mit/s]\nUploaded file from out_openai_completion_prepared.jsonl: file-z5mGg(...)\nCreated fine-tune: ft-mMsm(...)\nStreaming events until fine-tuning is complete...\n(Ctrl-C will interrupt the stream, but not cancel the fine-tune)\n[] Created fine-tune: ft-mMsm(...)\n[] Fine-tune costs $0.84\n[] Fine-tune enqueued. Queue number: 0\n[] Fine-tune started\n[] Completed epoch 1/4\n[] Completed epoch 2/4\n[] Completed epoch 3/4\n[] Completed epoch 4/4\n```", "```py\n$ openai api fine_tunes.follow -i ***fine_tune_id***\n```", "```py\n$ openai api fine_tunes.list\n```", "```py\n$ openai api fine_tunes.cancel -i ***fine_tune_id***\n```", "```py\n$ openai api fine_tunes.delete -i ***fine_tune_id***\n```", "```py\nopenai.Completion.create(\n  model=\"davinci:ft-book:direct-marketing-2023-05-01-15-20-35\",\n  prompt=\"Hotel, New York, small ->\",\n  max_tokens=100,\n  temperature=0,\n  stop=\"\\n\"\n)\n```", "```py\n<OpenAIObject text_completion id=cmpl-7BTkrdo(...) at 0x7f2(4ca5c220> JSON: {\n  \"choices\": [\n    {\n      \"finish_reason\": \"stop\",\n      \"index\": 0,\n      \"logprobs\": null,\n      \"text\": \" \\\"Upgrade your hotel's payment system with our new e-commerce \\ \nservice, designed for small businesses.\n    }\n  ],\n  \"created\": 1682970309,\n  \"id\": \"cmpl-7BTkrdo(...)\",\n  \"model\": \"davinci:ft-book:direct-marketing-2023-05-01-15-20-35\",\n  \"object\": \"text_completion\",\n  \"usage\": {\n    \"completion_tokens\": 37,\n    \"prompt_tokens\": 8,\n    \"total_tokens\": 45\n  }\n}\n```"]