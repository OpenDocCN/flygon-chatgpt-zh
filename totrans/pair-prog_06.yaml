- en: '| ![image](d2d_images/chapter_title_corner_decoration_left.png) |  | ![image](d2d_images/chapter_title_corner_decoration_right.png)
    |'
  prefs: []
  type: TYPE_TB
- en: '![image](d2d_images/chapter_title_above.png)'
  prefs: []
  type: TYPE_IMG
- en: Angular’s HttpClient
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '![image](d2d_images/chapter_title_below.png)'
  prefs: []
  type: TYPE_IMG
- en: '![image](d2d_images/image017.jpg)'
  prefs: []
  type: TYPE_IMG
- en: Image by [Gerd Altmann](https://pixabay.com/users/geralt-9301/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2528410) from [Pixabay](https://pixabay.com/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=2528410)
  prefs: []
  type: TYPE_NORMAL
- en: Now let’s consider Angular’s HttpClient, which makes heavy use of RxJS. In fact,
    the HttpClient is often the first place the new Angular developer is introduced
    to RxJS. That can be a make or break experience.
  prefs: []
  type: TYPE_NORMAL
- en: So, I wanted to see how well it does with some of the common coding patterns
    we see when using Angular’s HttpClient.
  prefs: []
  type: TYPE_NORMAL
- en: Even if you aren’t an Angular developer, the process is worth understanding.
  prefs: []
  type: TYPE_NORMAL
- en: A Typical Angular Service
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: For this example, I decided to start with a blank web page and see exactly how
    little code I could write. Remembering that Copilot needs to know what kind of
    file it’s working on, I immediately told VS Code it was a TypeScript file by clicking
    on the file type at the bottom right-corner of the window and selecting TypeScript from
    the options offered.
  prefs: []
  type: TYPE_NORMAL
- en: 'Next, I entered the following comment at the top of the file:'
  prefs: []
  type: TYPE_NORMAL
- en: // Provide service in root
  prefs: []
  type: TYPE_NORMAL
- en: 'Copilot immediately gave me three lines:'
  prefs: []
  type: TYPE_NORMAL
- en: '[@Injectable](http://twitter.com/Injectable "Twitter profile for @Injectable")({'
  prefs: []
  type: TYPE_NORMAL
- en: 'providedIn: ''root'''
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: 'It stopped there; I presume waiting for me to give it more to go on. I decided
    not to, and simply pressed the Tab key, to which it responded with this:'
  prefs: []
  type: TYPE_NORMAL
- en: export class ApiService {
  prefs: []
  type: TYPE_NORMAL
- en: // API url
  prefs: []
  type: TYPE_NORMAL
- en: private apiUrl = '[https://api.github.com/users'](https://api.github.com/users%27);
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private http: HttpClient) {}'
  prefs: []
  type: TYPE_NORMAL
- en: // Get user
  prefs: []
  type: TYPE_NORMAL
- en: 'getUser(username: string): Observable<User> {'
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get<User>(`${this.apiUrl}/${username}`);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: // Get repos
  prefs: []
  type: TYPE_NORMAL
- en: 'getRepos(username: string): Observable<Repo[]> {'
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get<Repo[]>
  prefs: []
  type: TYPE_NORMAL
- en: (`${this.apiUrl}/${username}/repos`);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: 'That’s all pretty cool, but not really what I wanted. I can’t complain too
    much, though, because I didn’t give it anything else to go on. I decided to keep
    the class but remove (for now) the two functions. This left the entire file looking
    like this:'
  prefs: []
  type: TYPE_NORMAL
- en: // Provide service in root
  prefs: []
  type: TYPE_NORMAL
- en: '@Injectable({'
  prefs: []
  type: TYPE_NORMAL
- en: 'providedIn: ''root'''
  prefs: []
  type: TYPE_NORMAL
- en: '}) export class ApiService {'
  prefs: []
  type: TYPE_NORMAL
- en: // API url
  prefs: []
  type: TYPE_NORMAL
- en: private apiUrl = 'https://api.github.com/users';
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private http: HttpClient) {}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: If you’re following along, you will notice that Copilot does not automatically
    import any of those Angular identifiers. The good news is that VS Code will do
    that for me. Or maybe I could convince Copilot to do it. What if I typed import at
    the top of the file?
  prefs: []
  type: TYPE_NORMAL
- en: When I did that, it didn’t do anything. Maybe another hint would help. I added
    a comment at the top of the file and the word import. Copilot suggested the rest
    automatically.
  prefs: []
  type: TYPE_NORMAL
- en: // Angular service
  prefs: []
  type: TYPE_NORMAL
- en: import { Injectable } from '[@angular/core](http://twitter.com/angular/core
    "Twitter profile for @angular/core")';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpClient } from '[@angular/common](http://twitter.com/angular/common
    "Twitter profile for @angular/common")/http';
  prefs: []
  type: TYPE_NORMAL
- en: Now that the imports were taken care of, I could get on with the rest of the
    experiment.
  prefs: []
  type: TYPE_NORMAL
- en: A Simple HTTP GET
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: Whenever I’m building a demo app, I always struggle with where to find decent
    remote data APIs to showcase. I seldom have the time or inclination to build my
    own, so I like to look for something interesting, amusing, or both.
  prefs: []
  type: TYPE_NORMAL
- en: If I simply ask Copilot to find me something, what will it provide me? I removed
    the apiUrlvariable and its comment. Then added a new comment at the top of the
    class.
  prefs: []
  type: TYPE_NORMAL
- en: // Get some sample data from a remote web server
  prefs: []
  type: TYPE_NORMAL
- en: getSampleData() {
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get('https://jsonplaceholder.typicode.com/todos/1');
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: That isn’t what I expected, but it works. So, I decided to try again with a
    different prompt.
  prefs: []
  type: TYPE_NORMAL
- en: // Get all posts from the API
  prefs: []
  type: TYPE_NORMAL
- en: getAllPosts() {
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get('[https://jsonplaceholder.typicode.com/posts'](https://jsonplaceholder.typicode.com/posts%27));
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: That’s pretty cool and as it turns out, that API is fully functional.
  prefs: []
  type: TYPE_NORMAL
- en: Let’s Add Some RxJS
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: The call to http.getreturns an Observable, but right now we aren’t doing anything
    with it. What happens if we get an error? I decided to add a hint inside getAllPosts
    to support error handling.
  prefs: []
  type: TYPE_NORMAL
- en: I changed the return to aconst posts$ and got this.
  prefs: []
  type: TYPE_NORMAL
- en: const posts$ =
  prefs: []
  type: TYPE_NORMAL
- en: this.http.get('[https://jsonplaceholder.typicode.com/posts'](https://jsonplaceholder.typicode.com/posts%27));
  prefs: []
  type: TYPE_NORMAL
- en: // Log any errors from the API call
  prefs: []
  type: TYPE_NORMAL
- en: posts$.subscribe(
  prefs: []
  type: TYPE_NORMAL
- en: posts => console.log(posts),
  prefs: []
  type: TYPE_NORMAL
- en: err => console.log(err)
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: Ok, that’s not what I wanted at all. I was hoping it would suggest using .pipe
    and .catchError. I decided to give it a hint by creating a logError function,
    again with Copilot’s help.
  prefs: []
  type: TYPE_NORMAL
- en: // Log any errors to the console
  prefs: []
  type: TYPE_NORMAL
- en: 'private handleError(error: any): Promise<any> {'
  prefs: []
  type: TYPE_NORMAL
- en: console.error('An error occurred', error);
  prefs: []
  type: TYPE_NORMAL
- en: return Promise.reject(error.message || error);
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: That felt as though it’s gotten worse at guessing my intentions. So, I tried
    again with a different hint.
  prefs: []
  type: TYPE_NORMAL
- en: // Log any errors in the observable to the console
  prefs: []
  type: TYPE_NORMAL
- en: logError(err) {
  prefs: []
  type: TYPE_NORMAL
- en: 'console.error(''There was an error: '' + err);'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: Better. Well, at least that’s what I was going to write. Next, I was curious
    about Copilot seeing that function in my file and automatically calling it.
  prefs: []
  type: TYPE_NORMAL
- en: // Detect and handle errors in the observable stream before returning to the
    caller.
  prefs: []
  type: TYPE_NORMAL
- en: posts$.subscribe(
  prefs: []
  type: TYPE_NORMAL
- en: data => console.log(data),
  prefs: []
  type: TYPE_NORMAL
- en: err => console.error(err),
  prefs: []
  type: TYPE_NORMAL
- en: () => console.log('done loading posts') // This is called when the observable
    completes.
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: return posts$;
  prefs: []
  type: TYPE_NORMAL
- en: If you were a novice with Angular, its HttpClient, or RxJS, you might think
    this is reasonable code. It’s not, at least not in this context. The code block
    creates an RxJS Subscription object, but never unsubscribes. This is OK in this
    context, but only because I know an HTTP GET will always complete or error. However,
    this is not the best way to handle this.
  prefs: []
  type: TYPE_NORMAL
- en: Before giving up entirely, I decided to try one more thing.
  prefs: []
  type: TYPE_NORMAL
- en: Instead of a comment, I started the next line with posts$.pipeand let Copilot
    suggest the rest. This is what it gave me.
  prefs: []
  type: TYPE_NORMAL
- en: posts$.pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(this.logError));
  prefs: []
  type: TYPE_NORMAL
- en: That’s what I was looking for!
  prefs: []
  type: TYPE_NORMAL
- en: However, the astute amongst you might have noticed that my logErrorfunction
    is no longer valid. I had to change it to return an Observable, but Copilot didn’t
    really help me with that task. I had to do it myself. It now looks like this.
  prefs: []
  type: TYPE_NORMAL
- en: // Log any errors in the observable to the console
  prefs: []
  type: TYPE_NORMAL
- en: 'logError(err): Observable<any> {'
  prefs: []
  type: TYPE_NORMAL
- en: 'console.error(''There was an error: '' + err);'
  prefs: []
  type: TYPE_NORMAL
- en: return of();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: Using the Observable in the Angular Template
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: What use is an Observable if we can’t get its values? The final example for
    this chapter is getting the posts from that API call onto a web page. I have to
    admit, this was pretty interesting.
  prefs: []
  type: TYPE_NORMAL
- en: I started in a blank file and provided the first line below as a comment. It
    suggested everything else, with only a few hints, which I will explain after the
    code block.
  prefs: []
  type: TYPE_NORMAL
- en: // Angular "Posts" component
  prefs: []
  type: TYPE_NORMAL
- en: import { Component, OnInit } from '[@angular/core](http://twitter.com/angular/core
    "Twitter profile for @angular/core")';
  prefs: []
  type: TYPE_NORMAL
- en: '[@Component](http://twitter.com/Component "Twitter profile for @Component")({'
  prefs: []
  type: TYPE_NORMAL
- en: 'selector: ''app-posts'','
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `'
  prefs: []
  type: TYPE_NORMAL
- en: <h1>Posts</h1>
  prefs: []
  type: TYPE_NORMAL
- en: <ul>
  prefs: []
  type: TYPE_NORMAL
- en: <li *ngFor="let post of posts">
  prefs: []
  type: TYPE_NORMAL
- en: '{{ post.title }}'
  prefs: []
  type: TYPE_NORMAL
- en: </li>
  prefs: []
  type: TYPE_NORMAL
- en: </ul>
  prefs: []
  type: TYPE_NORMAL
- en: '`,'
  prefs: []
  type: TYPE_NORMAL
- en: 'styles: []'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export class PostsComponent implements OnInit {
  prefs: []
  type: TYPE_NORMAL
- en: 'posts: any;'
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private apiService: ApiService) { }'
  prefs: []
  type: TYPE_NORMAL
- en: ngOnInit() {
  prefs: []
  type: TYPE_NORMAL
- en: this.apiService.getAllPosts().subscribe((data) => {
  prefs: []
  type: TYPE_NORMAL
- en: this.posts = data;
  prefs: []
  type: TYPE_NORMAL
- en: '});'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: At first, it wanted a separate file for my template and styles. That’s perfectly
    valid, but overkill for my example. I deleted those lines and manually typed template and styles.
    It then added what you see above.
  prefs: []
  type: TYPE_NORMAL
- en: It correctly found and referenced the ApiService from the other file, though
    I did have to fix its import. I consider that a minor nuisance because VS Code
    will handle that for me.
  prefs: []
  type: TYPE_NORMAL
- en: What about async pipes?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: I mentioned before that I prefer not to subscribe to Observables if I don’t
    have to. Angular provides the async pipe, which automatically subscribes and unsubscribes
    as needed. Could I get Copilot to handle that for me?
  prefs: []
  type: TYPE_NORMAL
- en: Following the common practice of naming Observable variables with a suffixed
    dollar sign, I changed the variable name fromposts to posts$ and deleted the body
    of ngOnInit.
  prefs: []
  type: TYPE_NORMAL
- en: 'As soon as I added a blank line inside that function, Copilot suggested exactly
    what I wanted:'
  prefs: []
  type: TYPE_NORMAL
- en: ngOnInit() {
  prefs: []
  type: TYPE_NORMAL
- en: this.posts$ = this.apiService.getAllPosts();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: The only thing left was to see if it would fix the template. So, I went back
    to the <li *ngFor and erased the entire block. Copilot insisted on putting it
    back the way it was, which wouldn’t work at all. There isn’t even a variable called posts,
    so it was giving me a literal error.
  prefs: []
  type: TYPE_NORMAL
- en: Not wanting to give up just yet, I added an HTML comment just inside the <ul>tag,
    hoping that would help. That did the trick!
  prefs: []
  type: TYPE_NORMAL
- en: <ul>
  prefs: []
  type: TYPE_NORMAL
- en: <!—Loop through the posts$ observable and display each post—>
  prefs: []
  type: TYPE_NORMAL
- en: <li *ngFor="let post of posts$ | async">
  prefs: []
  type: TYPE_NORMAL
- en: '{{ post.title }}'
  prefs: []
  type: TYPE_NORMAL
- en: </li>
  prefs: []
  type: TYPE_NORMAL
- en: </ul>
  prefs: []
  type: TYPE_NORMAL
- en: All in all, I was impressed with how well it did once I prompted it with the
    right hints.
  prefs: []
  type: TYPE_NORMAL
- en: What about ChatGPT?
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
- en: You may be wondering to yourself, where was ChatGPT throughout all this? Well,
    because I was staying mostly inside the code editor, I thought that Copilot made
    more sense for these examples. However, as a test of ChatGPT’s capabilities, I
    asked it to generate everything for me, using my hints to Copilot as my prompt.
  prefs: []
  type: TYPE_NORMAL
- en: Here is the prompt and its complete output.
  prefs: []
  type: TYPE_NORMAL
- en: Build me a complete angular service that fetches some sample data (perhaps blog
    posts) from a remote web service. Be sure to log any errors encountered. Then
    create a web page implemented as an angular component, which displays the blog
    post titles from the service in an unordered list. Prefer to use the angular async
    pipe in the template rather than subscribing to the observable.
  prefs: []
  type: TYPE_NORMAL
- en: 'Sure, I''d be happy to help you with that! Here is an example implementation
    of an Angular service and component that fetches blog posts from a remote web
    service:'
  prefs: []
  type: TYPE_NORMAL
- en: import { Injectable } from '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpClient } from '@angular/common/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { Observable, throwError } from 'rxjs';
  prefs: []
  type: TYPE_NORMAL
- en: import { catchError } from 'rxjs/operators';
  prefs: []
  type: TYPE_NORMAL
- en: '@Injectable({'
  prefs: []
  type: TYPE_NORMAL
- en: 'providedIn: ''root'''
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export class BlogPostService {
  prefs: []
  type: TYPE_NORMAL
- en: private apiUrl = 'https://jsonplaceholder.typicode.com/posts';
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private http: HttpClient) { }'
  prefs: []
  type: TYPE_NORMAL
- en: 'getBlogPosts(): Observable<any[]> {'
  prefs: []
  type: TYPE_NORMAL
- en: return this.http.get<any[]>(this.apiUrl).pipe(
  prefs: []
  type: TYPE_NORMAL
- en: catchError(error => {
  prefs: []
  type: TYPE_NORMAL
- en: console.error('Error fetching blog posts:', error);
  prefs: []
  type: TYPE_NORMAL
- en: return throwError(error);
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: );
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: This service uses the HttpClient module from Angular to make an HTTP GET request
    to the specified API URL. If an error occurs during the request, the service logs
    the error to the console and throws an error using the throwError method from
    the rxjs library.
  prefs: []
  type: TYPE_NORMAL
- en: import { Component, OnInit } from '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { Observable } from 'rxjs';
  prefs: []
  type: TYPE_NORMAL
- en: import { BlogPostService } from '../blog-post.service';
  prefs: []
  type: TYPE_NORMAL
- en: '@Component({'
  prefs: []
  type: TYPE_NORMAL
- en: 'selector: ''app-blog-post-list'','
  prefs: []
  type: TYPE_NORMAL
- en: 'template: `'
  prefs: []
  type: TYPE_NORMAL
- en: <h2>Blog Posts</h2>
  prefs: []
  type: TYPE_NORMAL
- en: <ul>
  prefs: []
  type: TYPE_NORMAL
- en: <li *ngFor="let post of posts$ | async">{{ post.title }}</li>
  prefs: []
  type: TYPE_NORMAL
- en: </ul>
  prefs: []
  type: TYPE_NORMAL
- en: '`'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export class BlogPostListComponent implements OnInit {
  prefs: []
  type: TYPE_NORMAL
- en: 'posts$: Observable<any[]>;'
  prefs: []
  type: TYPE_NORMAL
- en: 'constructor(private blogPostService: BlogPostService) { }'
  prefs: []
  type: TYPE_NORMAL
- en: 'ngOnInit(): void {'
  prefs: []
  type: TYPE_NORMAL
- en: this.posts$ = this.blogPostService.getBlogPosts();
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: '}'
  prefs: []
  type: TYPE_NORMAL
- en: This component uses the async pipe in the template to subscribe to the posts$
    observable returned by the BlogPostService. The ngOnInit method of the component
    sets the posts$ observable to the result of calling getBlogPosts on the service.
  prefs: []
  type: TYPE_NORMAL
- en: 'Finally, you''ll need to add the HttpClientModule to your app module''s imports
    array to make the HttpClient available to the service:'
  prefs: []
  type: TYPE_NORMAL
- en: import { NgModule } from '@angular/core';
  prefs: []
  type: TYPE_NORMAL
- en: import { BrowserModule } from '@angular/platform-browser';
  prefs: []
  type: TYPE_NORMAL
- en: import { HttpClientModule } from '@angular/common/http';
  prefs: []
  type: TYPE_NORMAL
- en: import { AppComponent } from './app.component';
  prefs: []
  type: TYPE_NORMAL
- en: import { BlogPostListComponent } from './blog-post-list/blog-post-list.component';
  prefs: []
  type: TYPE_NORMAL
- en: '@NgModule({'
  prefs: []
  type: TYPE_NORMAL
- en: 'declarations: ['
  prefs: []
  type: TYPE_NORMAL
- en: AppComponent,
  prefs: []
  type: TYPE_NORMAL
- en: BlogPostListComponent
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: 'imports: ['
  prefs: []
  type: TYPE_NORMAL
- en: BrowserModule,
  prefs: []
  type: TYPE_NORMAL
- en: HttpClientModule
  prefs: []
  type: TYPE_NORMAL
- en: '],'
  prefs: []
  type: TYPE_NORMAL
- en: 'providers: [],'
  prefs: []
  type: TYPE_NORMAL
- en: 'bootstrap: [AppComponent]'
  prefs: []
  type: TYPE_NORMAL
- en: '})'
  prefs: []
  type: TYPE_NORMAL
- en: export class AppModule { }
  prefs: []
  type: TYPE_NORMAL
- en: That's it! With this code, you should be able to display a list of blog post
    titles retrieved from a remote web service in an Angular component using the async
    pipe.
  prefs: []
  type: TYPE_NORMAL
- en: Wow! ChatGPT built almost exactly the same code, complete with explanations.
    In fact, what it produced is more complete than what I got from Copilot.
  prefs: []
  type: TYPE_NORMAL
- en: My only complaint about what it wrote is that its information is slightly outdated.
    Angular 14.2 introduced a developer preview of “standalone components,” which
    don’t need to be contained inside an NgModule. You can even write entire applications
    without a single NgModule. Angular 15 officially made them part of the framework.
  prefs: []
  type: TYPE_NORMAL
- en: This is a minor thing, but it serves to illustrate an important point. ChatGPT’s
    knowledge doesn’t know much about the past 2 years. I asked ChatGPT to rewrite
    the above application with standalone components from Angular 15\. This was its
    reply.
  prefs: []
  type: TYPE_NORMAL
- en: I'm sorry, but Angular 15 is not a version that exists - the latest version
    of Angular as of my knowledge cutoff date of September 2021 is Angular 12\. However,
    I can provide an example of how to rewrite the application using Angular's componentless
    routes with the ng-container element, introduced in Angular 4.
  prefs: []
  type: TYPE_NORMAL
- en: It then proceeded to give me almost the same application as before but adding
    in some default routing. Angular 12 is 3 versions old as I write this, soon to
    be 4 versions old. I don’t even think it’s supported anymore.
  prefs: []
  type: TYPE_NORMAL
- en: Let this be a friendly reminder and warning. ChatGPT is amazing at what it does,
    if you’re looking for information that tends to be long-lived. That’s why it does
    so well with regular expressions, scripting, and common algorithms. By its own
    admission, its knowledge can be woefully outdated, especially in this industry,
    which moves as fast as it does.
  prefs: []
  type: TYPE_NORMAL
