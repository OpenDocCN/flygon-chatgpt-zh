["```py\nimport openai\ndef ask_chatgpt(messages):\n    response = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\", messages=messages\n    )\n    return response[\"choices\"][0][\"message\"][\"content\"]\n```", "```py\nprompt_role = \"You are an assistant for journalists. \\\n Your task is to write articles, based on the FACTS that are given to you. \\\n You should respect the instructions: the TONE, the LENGTH, and the STYLE\"\n```", "```py\nfrom typing import List\ndef assist_journalist(\n    facts: List[str], tone: str, length_words: int, style: str\n):\n    facts = \", \".join(facts)\n    prompt = f\"{prompt_role}\\\n FACTS: {facts}\\\n TONE: {tone}\\\n LENGTH: {length_words} words \\\n STYLE: {style}\"\n    return ask_chatgpt([{\"role\": \"user\", \"content\": prompt}])\n```", "```py\nprint(\n    assist_journalist(\n        [\"The sky is blue\", \"The grass is green\"], \"informal\", 100, \"blogpost\"\n    )\n)\n```", "```py\n\"Hey, everyone! Did you know that the sky is blue and the grass is green? \nI mean, it's something we see every day and probably take for granted,\nbut it's still pretty amazing if you think about it! The sky appears blue to us \nbecause of something called Rayleigh scattering \u2013 basically, the molecules in \nthe Earth's atmosphere scatter sunlight in all different directions. Blue light \nhas a shorter wavelength, so it gets scattered more than the other colors in\nthe spectrum. That's why the sky looks blue most of the time! As for the grass\nbeing green... that's due to chlorophyll, the pigment that helps plants capture\nsunlight to make their food. Chlorophyll absorbs red and blue light, but\nreflects green light, which is why we see plants as green.\n\nIt's pretty cool how science explains these things we take for granted, \ndon't you think? Next time you're outside, take a moment to appreciate \nthe color palette around you!\"\n```", "```py\nprint(\n    assist_journalist(\n        facts=[\n            \"A book on ChatGPT has been published last week\",\n            \"The title is Developing Apps with GPT-4 and ChatGPT\",\n            \"The publisher is O'Reilly.\",\n        ],\n        tone=\"excited\",\n        length_words=50,\n        style=\"news flash\",\n    )\n)\n```", "```py\n\nExciting news for tech enthusiasts! O'Reilly has just published a new book on\nChatGPT called \"Developing Apps with GPT-4 and ChatGPT\". Get ready to \ndelve into the world of artificial intelligence and learn how to develop \napps using the latest technology. Don't miss out on this\nopportunity to sharpen your skills!\n```", "```py\nimport openai\n# Read the transcript from the file\nwith open(\"transcript.txt\", \"r\") as f:\n    transcript = f.read()\n# Call the openai ChatCompletion endpoint, with the ChatGPT model\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-3.5-turbo\",\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful assistant.\"},\n        {\"role\": \"user\", \"content\": \"Summarize the following text\"},\n        {\"role\": \"assistant\", \"content\": \"Yes.\"},\n        {\"role\": \"user\", \"content\": transcript},\n    ],\n)\nprint(response[\"choices\"][0][\"message\"][\"content\"])\n```", "```py\nclass DataService():\n    def __init__(self):\n        # Connect to Redis\n        self.redis_client = redis.Redis(\n            host=REDIS_HOST,\n            port=REDIS_PORT,\n            password=REDIS_PASSWORD\n        )\n```", "```py\ndef pdf_to_embeddings(self, pdf_path: str, chunk_length: int = 1000):\n    # Read data from pdf file and split it into chunks\n    reader = PdfReader(pdf_path)\n    chunks = []\n    for page in reader.pages:\n        text_page = page.extract_text()\n        chunks.extend([text_page[i:i+chunk_length] \n            for i in range(0, len(text_page), chunk_length)])\n    # Create embeddings\n    response = openai.Embedding.create(model='text-embedding-ada-002', \n        input=chunks)\n    return [{'id': value['index'], \n        'vector':value['embedding'], \n        'text':chunks[value['index']]} for value] \n```", "```py\ndef load_data_to_redis(self, embeddings):\n    for embedding in embeddings:\n        key = f\"{PREFIX}:{str(embedding['id'])}\"\n        embedding[\"vector\"] = np.array(\n            embedding[\"vector\"], dtype=np.float32).tobytes()\n        self.redis_client.hset(key, mapping=embedding)\n```", "```py\ndef search_redis(self,user_query: str):\n# Creates embedding vector from user query\nembedded_query = openai.Embedding.create(\n    input=user_query,                                          \n    model=\"text-embedding-ada-002\")[\"data\"][0]['embedding']\n```", "```py\n# Perform vector search\nresults = self.redis_client.ft(index_name).search(query, params_dict)\nreturn [doc['text'] for doc in results.docs]\n```", "```py\nDataService\n        __init__\n        pdf_to_embeddings\n        load_data_to_redis\n        search_redis\n```", "```py\nclass IntentService():\n    def __init__(self):\n        pass\n    def get_intent(self, user_question: str):\n        # Call the openai ChatCompletion endpoint\n        response = openai.ChatCompletion.create(\n            model=\"gpt-3.5-turbo\",\n            messages=[\n                {\"role\": \"user\", \n                 \"content\": f\"\"\"Extract the keywords from the following \n question: {user_question}.\"\"\"} \n            ]\n        )\n        # Extract the response\n        return (response['choices'][0]['message']['content'])\n```", "```py\nclass ResponseService():\n    def __init__(self):\n        pass\n    def generate_response(self, facts, user_question):\n        # Call the openai ChatCompletion endpoint\n        response = openai.ChatCompletion.create(\n            model=\"gpt-3.5-turbo\",\n            messages=[\n                {\"role\": \"user\", \n                 \"content\": f\"\"\"Based on the FACTS, answer the QUESTION. \n QUESTION: {user_question}. FACTS: {facts}\"\"\"}\n            ]\n        )\n        # Extract the response\n        return (response['choices'][0]['message']['content'])\n```", "```py\ndef run(question: str, file: str='ExplorersGuide.pdf'):\n    data_service = DataService()\n    data = data_service.pdf_to_embeddings(file)\n    data_service.load_data_to_redis(data)\n```", "```py\n    intent_service = IntentService()\n    intents = intent_service.get_intent(question)\n```", "```py\n    facts = service.search_redis(intents)\n```", "```py\n    return response_service.generate_response(facts, question)\n```", "```py\n\nYou can find treasure chests scattered around Hyrule, in enemy bases, underwater,\nin secret corners of shrines, and even hidden in unusual places. Look out for\ntowers and climb to their tops to activate them as travel gates and acquire \nregional map information. Use your Magnesis Rune to fish out chests in water\nand move platforms. Keep an eye out for lively Koroks who reward you with\ntreasure chests.\n```", "```py\npip install openai-whisper\n```", "```py\nimport whisper\nmodel = whisper.load_model(\"base\")\ndef transcribe(file):\n    print(file)\n    transcription = model.transcribe(file)\n    return transcription[\"text\"]\n```", "```py\nimport openai\ndef generate_answer(messages):\n    response = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\", messages=messages\n    )\n    return response[\"choices\"][0][\"message\"][\"content\"]\n```", "```py\nprompts = {\n    \"START\": \"Classify the intent of the next input. \\\n Is it: WRITE_EMAIL, QUESTION, OTHER ? Only answer one word.\",\n    \"QUESTION\": \"If you can answer the question: ANSWER, \\\n if you need more information: MORE, \\\n if you cannot answer: OTHER. Only answer one word.\",\n    \"ANSWER\": \"Now answer the question\",\n    \"MORE\": \"Now ask for more information\",\n    \"OTHER\": \"Now tell me you cannot answer the question or do the action\",\n    \"WRITE_EMAIL\": 'If the subject or recipient or message is missing, \\\n answer \"MORE\". Else if you have all the information, \\\n answer \"ACTION_WRITE_EMAIL |\\\n subject:subject, recipient:recipient, message:message\".',\n}\n```", "```py\nactions = {\n    \"ACTION_WRITE_EMAIL\": \"The mail has been sent. \\\n Now tell me the action is done in natural language.\"\n}\n```", "```py\ndef start(user_input):\n    messages = [{\"role\": \"user\", \"content\": prompts[\"START\"]}]\n    messages.append({\"role\": \"user\", \"content\": user_input})\n    return discussion(messages, \"\")\n```", "```py\ndef discussion(messages, last_step):\n    # Call the OpenAI API to get the next state\n    answer = generate_answer(messages)\n    if answer in prompts.keys():\n        # A new state is found. Add it to the messages list.\n        messages.append({\"role\": \"assistant\", \"content\": answer})\n        messages.append({\"role\": \"user\", \"content\": prompts[answer]})\n        # Recursively continue moving through the state machine.\n        return discussion(messages, answer)\n    elif answer in actions.keys():\n        # The new state is an action.\n        do_action(answer)\n    else:\n        # We are in an END state.\n        # If we come from MORE, we keep the history of messages.\n        # Else we start over\n        if last_step != 'MORE':\n            messages=[]\n        last_step = 'END'\n        return answer\n```", "```py\ndef do_action(action):\n    print(\"Doing action \" + action)\n    return (\"I did the action \" + action)\n```", "```py\nimport gradio as gr\ndef start_chat(file):\n    input = transcribe(file)\n    return start(input)\ngr.Interface(\n    fn=start_chat,\n    live=True,\n    inputs=gr.Audio(source=\"microphone\", type=\"filepath\"),\n    outputs=\"text\",\n).launch()\n```", "```py\nUser: \"Hi\"\nAssistant: \"Hello, How may I assist you?\"\nUser: \"Write an email to John\"\nAssistant: \"Sure, what message would you like to convey in the email you're \n  sending to John and what's the email address you want to send it to? Please \n  provide all the necessary details.\" \n```", "```py\nUser: \"The subject of the mail is Hello\"\nAssistant: \"If you could also provide me with the message body and the  \n  recipient's email address, that would be great.\"\nUser: \"The body is 'Meet me on Thursday at 4 p.m. and the recipient is \n  john@mail.com\"\n```"]