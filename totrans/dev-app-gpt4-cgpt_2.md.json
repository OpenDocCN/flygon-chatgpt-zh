["```py\nimport openai\nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\nresponse = openai.Completion.create(\n    model=\"text-davinci-003\",\n    prompt=\"As Descartes said, I think therefore\",\n    temperature=0.7,\n    max_tokens=3,\n    top_p=1,\n    frequency_penalty=0,\n    presence_penalty=0,\n)\n```", "```py\n# set environment variable OPENAI_API_KEY for current session\nexport OPENAI_API_KEY=sk-(...)\n# check that environment variable was set\necho $OPENAI_API_KEY\n```", "```py\n# set environment variable OPENAI_API_KEY for current session\nset OPENAI_API_KEY=sk-(...)\n# check that environment variable was set\necho %OPENAI_API_KEY%\n```", "```py\npip install openai\n```", "```py\nimport openai\n# Call the openai ChatCompletion endpoint\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-3.5-turbo\",\n    messages=[{\"role\": \"user\", \"content\": \"Hello World!\"}],\n)\n# Extract the response\nprint(response[\"choices\"][0][\"message\"][\"content\"])\n```", "```py\nHello there! How may I assist you today?\n```", "```py\nopenai api chat_completions.create -m gpt-3.5-turbo \\\n    -g user \"Hello world\"\n```", "```py\n# Load your API key from file\nopenai.api_key_path = <PATH>, \n```", "```py\n# Load your API key \nopenai.api_key = os.getenv(\"OPENAI_API_KEY\")\n```", "```py\nfrom dotenv import load_dotenv\nload_dotenv()\nimport openai\n```", "```py\nimport openai\n# For GPT 3.5 Turbo, the endpoint is ChatCompletion\nopenai.ChatCompletion.create(\n    # For GPT 3.5 Turbo, the model is \"gpt-3.5-turbo\"\n    model=\"gpt-3.5-turbo\",\n    # Conversation as a list of messages.\n    messages=[\n        {\"role\": \"system\", \"content\": \"You are a helpful teacher.\"},\n        {\n            \"role\": \"user\",\n            \"content\": \"Are there other measures than time complexity for an \\\n algorithm?\",\n        },\n        {\n            \"role\": \"assistant\",\n            \"content\": \"Yes, there are other measures besides time complexity \\\n for an algorithm, such as space complexity.\",\n        },\n        {\"role\": \"user\", \"content\": \"What is it?\"},\n    ],\n)\n```", "```py\n{\n    \"choices\": [\n        {\n            \"finish_reason\": \"stop\",\n            \"index\": 0,\n            \"message\": {\n                \"content\": \"Hello there! How may I assist you today?\",\n                \"role\": \"assistant\",\n            },\n        }\n    ],\n    \"created\": 1681134595,\n    \"id\": \"chatcmpl-73mC3tbOlMNHGci3gyy9nAxIP2vsU\",\n    \"model\": \"gpt-3.5-turbo\",\n    \"object\": \"chat.completion\",\n    \"usage\": {\"completion_tokens\": 10, \"prompt_tokens\": 11, \"total_tokens\": 21},\n}\n```", "```py\n# Example function\ndef find_product(sql_query):\n    # Execute query here\n    results = [\n        {\"name\": \"pen\", \"color\": \"blue\", \"price\": 1.99},\n        {\"name\": \"pen\", \"color\": \"red\", \"price\": 1.78},\n    ]\n    return results\n```", "```py\n# Function definition\nfunctions = [\n    {\n        \"name\": \"find_product\",\n        \"description\": \"Get a list of products from a sql query\",\n        \"parameters\": {\n            \"type\": \"object\",\n            \"properties\": {\n                \"sql_query\": {\n                    \"type\": \"string\",\n                    \"description\": \"A SQL query\",\n                }\n            },\n            \"required\": [\"sql_query\"],\n        },\n    }\n]\n```", "```py\n# Example question\nuser_question = \"I need the top 2 products where the price is less than 2.00\"\nmessages = [{\"role\": \"user\", \"content\": user_question}]\n# Call the openai.ChatCompletion endpoint with the function definition\nresponse = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo-0613\", messages=messages, functions=functions\n)\nresponse_message = response[\"choices\"][0][\"message\"]\nmessages.append(response_message)\n```", "```py\n\"function_call\": {\n        \"name\": \"find_product\",\n        \"arguments\": '{\\n \"sql_query\": \"SELECT * FROM products \\\n WHERE price < 2.00 ORDER BY price ASC LIMIT 2\"\\n}',\n    }\n```", "```py\n# Call the function\nfunction_args = json.loads(\n    response_message[\"function_call\"][\"arguments\"]\n)\nproducts = find_product(function_args.get(\"sql_query\"))\n# Append the function's response to the messages\nmessages.append(\n    {\n        \"role\": \"function\",\n        \"name\": function_name,\n        \"content\": json.dumps(products),\n    }\n)\n# Format the function's response into natural language\nresponse = openai.ChatCompletion.create(\n    model=\"gpt-3.5-turbo-0613\",\n    messages=messages,\n)\n```", "```py\nThe top 2 products where the price is less than $2.00 are:\n1\\. Pen (Blue) - Price: $1.99\n2\\. Pen (Red) - Price: $1.78\n```", "```py\nimport openai\n# Call the openai Completion endpoint\nresponse = openai.Completion.create(\n    model=\"text-davinci-003\", prompt=\"Hello World!\"\n)\n# Extract the response\nprint(response[\"choices\"][0][\"text\"])\n```", "```py\n\"\\n\\nIt's a pleasure to meet you. I'm new to the world\"\n```", "```py\n{\n    \"choices\": [\n        {\n            \"finish_reason\": \"stop\",\n            \"index\": 0,\n            \"logprobs\": null,\n            \"text\": \"<br />\\n\\nHi there! It's great to see you.\",\n        }\n    ],\n    \"created\": 1681883111,\n    \"id\": \"cmpl-76uutuZiSxOyzaFboxBnaatGINMLT\",\n    \"model\": \"text-davinci-003\",\n    \"object\": \"text_completion\",\n    \"usage\": {\"completion_tokens\": 15, \"prompt_tokens\": 3, \"total_tokens\": 18},\n}\n```", "```py\nresult = openai.Embedding.create(\n    model=\"text-embedding-ada-002\", input=\"your text\"\n)\n```", "```py\nresult['data']['embedding']\n```", "```py\nimport openai\n# Call the openai Moderation endpoint, with the text-moderation-latest model\nresponse = openai.Moderation.create(\n    model=\"text-moderation-latest\",\n    input=\"I want to kill my neighbor.\",\n)\n```", "```py\n{\n    \"id\": \"modr-7AftIJg7L5jqGIsbc7NutObH4j0Ig\",\n    \"model\": \"text-moderation-004\",\n    \"results\": [\n        {\n            \"categories\": {\n                \"hate\": false,\n                \"hate/threatening\": false,\n                \"self-harm\": false,\n                \"sexual\": false,\n                \"sexual/minors\": false,\n                \"violence\": true,\n                \"violence/graphic\": false,\n            },\n            \"category_scores\": {\n                \"hate\": 0.0400671623647213,\n                \"hate/threatening\": 3.671687863970874e-06,\n                \"self-harm\": 1.3143378509994363e-06,\n                \"sexual\": 5.508050548996835e-07,\n                \"sexual/minors\": 1.1862029225540027e-07,\n                \"violence\": 0.9461417198181152,\n                \"violence/graphic\": 1.463699845771771e-06,\n            },\n            \"flagged\": true,\n        }\n    ],\n}\n```", "```py\n    pip install openai\n    ```", "```py\n    export OPENAI_API_KEY=sk-(...)\n    ```", "```py\n    import openai\n    ```", "```py\n    response = openai.ChatCompletion.create(\n        model=\"gpt-3.5-turbo\",\n        messages=[{\"role\": \"user\", \"content\": \"Your Input Here\"}],\n    )\n    ```", "```py\n        print(response['choices'][0]['message']['content'])\n    ```"]