- en: '[CHAPTER 4](toc.xhtml#c04)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[LOOKUP](toc.xhtml#c04)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: '[Introduction](toc.xhtml#s62a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we will discuss the LOOKUP function, which has been in Excel
    since its earliest version. The `**LOOKUP**` function’s longevity and continued
    presence in Excel prove its value and widespread adoption as a fundamental tool
    for data retrieval and spreadsheet analysis.
  prefs: []
  type: TYPE_NORMAL
- en: You can use the `**LOOKUP**` function in both the Vector form and Array form.
  prefs: []
  type: TYPE_NORMAL
- en: In the Vector form, you search for an item in one column/row and return an item
    from the same position in another column/row.
  prefs: []
  type: TYPE_NORMAL
- en: '**The syntax is as follows:**'
  prefs: []
  type: TYPE_NORMAL
- en: '`=LOOKUP (lookup_value, lookup_vector, [result_vector])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Where:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**lookup_value**`: The value you want to find.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**lookup_vector**`: The single column/row containing the values to be searched
    (Note: It should be sorted in ascending order).'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**result_vector**`: The single column/row containing the values to be returned.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note**'
  prefs: []
  type: TYPE_NORMAL
- en: Vector form is most appropriate If you want to specify a column/row containing
    the values you want to search.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the lookup value is not found, the `**LOOKUP**` function matches the next
    biggest value smaller than the lookup value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'If the lookup value is not found and is smaller than the smallest value in
    the lookup range, the `**LOOKUP**` function will return the #N/A error value.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**Lookup_vector**` and `**result_vector**` range must be of the same size.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: In the Array form, we search for an item in the first column/row of a table
    array (rows and columns) and return values in the same position as the last column/row
    of a table array.
  prefs: []
  type: TYPE_NORMAL
- en: 'The syntax is as follows:'
  prefs: []
  type: TYPE_NORMAL
- en: '`=LOOKUP (lookup_value, array)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Where:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**lookup_value:**` The value you want to find.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**Array:**` Columns/rows containing the values to be searched.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Note:**'
  prefs: []
  type: TYPE_NORMAL
- en: Values in the first Row/Column must be sorted in ascending order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The determination of whether the search will be horizontal or vertical depends
    on the number of rows vs. columns. If the array has more rows than columns, then
    `**LOOKUP**` searches the first column; otherwise, it searches the first row.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the lookup value is not found and is smaller than the smallest value in the
    lookup range, the `**LOOKUP**` function will return the `**#N/A**` error value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: If the lookup value is not found, the `**LOOKUP**` function matches the next
    biggest value smaller than the lookup value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Structure](toc.xhtml#s63a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'In this chapter, we will discuss the five cases where we should use the `**LOOKUP**`
    function:'
  prefs: []
  type: TYPE_NORMAL
- en: Lookup the last match using a criterion
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lookup the last empty cell
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lookup the last negative number or text
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lookup approximate match in an array
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Lookup the most repeated item
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Lookup the Last Match Using a Criterion](toc.xhtml#s64a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: One everyday use of the `LOOKUP` function is retrieving the last matching value.
    In this example, we shall use the Vector form.
  prefs: []
  type: TYPE_NORMAL
- en: 'We are trying to find the last subject offered by Ms Abby in *[Figure 4.1](#fig4_1)*:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-4.1.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 4.1:** Lookup the last match in the column'
  prefs: []
  type: TYPE_NORMAL
- en: '`=LOOKUP(2,1/(Lecturers=F3), Subjects)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how the preceding function works:'
  prefs: []
  type: TYPE_NORMAL
- en: 2 represents a big value that we are sure will not be found in the lookup vector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**Lecturers=F3**` returns an array of `TRUE/FALSE`, where TRUE represents
    the criteria being met, that is, lecturer = Ms Abby; otherwise, it returns FALSE
    (see *[Figure 4.2](#fig4_2))*:![](images/Figure-4.2.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Figure 4.2:** Check if the criterion is met'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**1/(Lecturers=F3)**` convert the TRUE/FALSE into numeric equivalent by dividing
    1 by each value (see *[Figure 4.3](#fig4_3))*:![](images/Figure-4.3.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Figure 4.3:** Convert the TRUE/FALSE into numeric equivalent'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '**Note:** There are four ways to convert boolean values to the numeric equivalent:'
  prefs: []
  type: TYPE_NORMAL
- en: 'By adding Zero: **(Lecturers=F3)+0**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By multiplying with One: **(Lecturers=F3)*1**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'Using the double Unary method: --**(Lecturers=F3)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'By dividing with One: 1/**(Lecturers=F3)**'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We should opt for the last method because it is the only method that does not
    include a zero in the results; including a zero in the lookup vector may disrupt
    the ascending order and cause the function to return unexpected results or an
    error.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since 2 is not found, and the largest value in lookup_vector is 1, the LOOKUP
    function matches the last 1 in the array and returns values in the same position
    in the result vector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: 'We are not limited to using a single criterion. For example, in *[Figure 4.4](#fig4_4)*,
    we want to know the last date on which the customer Luke bought the chairs:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-4.4.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 4.4:** Lookup the last match using multiple criteria'
  prefs: []
  type: TYPE_NORMAL
- en: '`=LOOKUP(2,`'
  prefs: []
  type: TYPE_NORMAL
- en: '`1/((tbl_Sales[Customer]=H16)*(tbl_Sales[Product]=H18)),`'
  prefs: []
  type: TYPE_NORMAL
- en: '`tbl_Sales[Date])`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how the preceding function works:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**2**` represents a big value that we are sure will not be found in the lookup
    vector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**(tbl_Sales[Customer]=H16)*(tbl_Sales[Product]=H18)**` returns an array of
    1/0, where 1 represents the row’s position where the customer is Luke and the
    product is chairs.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**1/((tbl_Sales[Customer]=H16)*(tbl_Sales[Product]=H18))**` We divide the
    preceding array with 1 to exclude all zeros. Including a zero in the lookup vector
    may disrupt the ascending order and cause the function to return unexpected results
    or an error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since 2 is not found, and the largest value in lookup_vector is 1, the `**LOOKUP**`
    function matches the last 1 in the array and returns values in the same position
    in the result vector.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Lookup the Last Blank Cell](toc.xhtml#s65a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Lookup, the last blank in an array, is similar to the preceding example, with
    the only difference being the logical tests. Similar to the preceding example,
    we will use the vector form of the `LOOKUP` function to do a horizontal lookup.
  prefs: []
  type: TYPE_NORMAL
- en: 'In *[Figure 4.5](#fig4_5)*, we look up the last month a customer made the payment,
    that is, the last non-blank month:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-4.5.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 4.5:** Lookup the last non-blank'
  prefs: []
  type: TYPE_NORMAL
- en: '`=LOOKUP(2, 1/(D33:H33<>””), $D$32:$H$32 )`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how this function works:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**2**` represents a big value that we are sure will not be found in the lookup
    vector.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**D33:H33<>””**` returns an array of `TRUE/FALSE`, where `TRUE` represents
    non-blank cells in the row.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '`**1/(D33:H33<>””)**` We divide the preceding array with 1 to convert the Boolean
    array to its numeric equivalent as well as to exclude all zeros. Including a zero
    in the lookup vector may disrupt the ascending order and cause the function to
    return unexpected results or an error.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Since 2 is not found, and the largest value in lookup_vector is 1, the LOOKUP
    function matches the last 1 in the array and returns values in the same position
    in the result vector, that is, `**$D$32:$H$32**`.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Lookup the Last Negative Number or Text](toc.xhtml#s66a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: The vector form of the `LOOKUP` function is the most robust function to look
    up any last value in an array. The only trick we need to learn is creating complex
    logical tests for the lookup vector.
  prefs: []
  type: TYPE_NORMAL
- en: 'For example, in *[Figure 4.6](#fig4_6)*, we want to look up the last date we
    had a negative temperature:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-4.6.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 4.6:** Lookup the last negative number'
  prefs: []
  type: TYPE_NORMAL
- en: '`=LOOKUP(2,1/(tblHarvest[Temp0]<0),tblHarvest[Date])`'
  prefs: []
  type: TYPE_NORMAL
- en: This formula works in the same way as the others in the preceding examples,
    except for the logical test. In this example, `**tblHarvest[Temp0]<0**` returns
    an array of `**TRUE/FALSE**`, where TRUE represents all values that are less than
    zero.
  prefs: []
  type: TYPE_NORMAL
- en: To look up the last text, as shown in *[Figure 4.7](#fig4_7)*, use the ISTEXT
    function to return an array of TRUE/FALSE values, where TRUE represents the text
    functions.
  prefs: []
  type: TYPE_NORMAL
- en: Every other aspect of the function is the same as the ones explained earlier.
  prefs: []
  type: TYPE_NORMAL
- en: '`=LOOKUP(2,1/ISTEXT(D59:D74),D59:D74)`'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-4.7.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 4.7:** Lookup the last text'
  prefs: []
  type: TYPE_NORMAL
- en: '[Lookup Approximate Match in an Array](toc.xhtml#s67a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In all our previous examples, we have used the vector form of the `LOOKUP` function.
    Now, let us learn how to use an array form to look up an approximate match in
    an array.
  prefs: []
  type: TYPE_NORMAL
- en: For example, in *[Figure 4.8](#fig4_8)*, we are looking up the discount percentage
    from the Discounts table using an approximate Match.
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-4.8.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 4.8:** Lookup approximate match in an array'
  prefs: []
  type: TYPE_NORMAL
- en: '`=LOOKUP(D78, Discounts)`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how this function works:'
  prefs: []
  type: TYPE_NORMAL
- en: Sales Values stored in column D are used as the lookup value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The LOOKUP function uses the first column of the discount table as the lookup
    array and returns the approximate values in the same position of the last column.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: Remember that the values in the first column of the table array must be sorted
    in ascending order.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Lookup Most Repeated Item](toc.xhtml#s68a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'This is another example of using the `LOOKUP` function’s array form. In *[Figure
    4.9](#fig4_9)*, we are looking for the most frequent customer:'
  prefs: []
  type: TYPE_NORMAL
- en: '![](images/Figure-4.9.jpg)'
  prefs: []
  type: TYPE_IMG
- en: '**Figure 4.9:** Lookup most repeated item'
  prefs: []
  type: TYPE_NORMAL
- en: '`=LOOKUP(MODE(MATCH(Customer[Name],Customer[Name],0)),`'
  prefs: []
  type: TYPE_NORMAL
- en: '`CHOOSE({1,2},MATCH(Customer[Name],Customer[Name],0),Customer[Name]))`'
  prefs: []
  type: TYPE_NORMAL
- en: 'Here is how the preceding function works:'
  prefs: []
  type: TYPE_NORMAL
- en: '`**MATCH(Customer[Name], Customer[Name],0)**` The `MATCH` function returns
    an array equal to the customers’ number, where every item in this array represents
    the first position at which a customer name appears in the data (see *[Figure
    4.10](#fig4_10)*).![](images/fig-4.10.jpg)'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Figure 4.10:** Customers’ position'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '`**MODE(MATCH(Customer[Name], Customer[Name],0)**` the `MODE` function returns
    the most repeated item in the array.'
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: We then create a two-column table array using the `CHOOSE` function, whereColumn
    1 is the customers’ position, while Column 2 is the customers’ name (see *[Figure
    4.11](#fig4_11))*.![](images/Figure-4.11.jpg)
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '**Figure 4.11:** Two-column table array'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: The `**LOOKUP**` function uses the first column of the two-column table as the
    lookup array and returns the customer name in the second column in the same position
    as the last match value.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Conclusion](toc.xhtml#s69a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: In this chapter, we learned that the `**LOOKUP**` function is the best when
    looking up the last match. Whether we are using the Vector or Array form, the
    `**LOOKUP**` function can be used to look up data vertically or horizontally,
    provided that the lookup array data is sorted in ascending order.
  prefs: []
  type: TYPE_NORMAL
- en: Due to its limitations, it is only recommended for approximate matches and looking
    up the last match.
  prefs: []
  type: TYPE_NORMAL
- en: In the next chapter, we will investigate other functions that can be used to
    look up data, although they are not classified as lookup functions.
  prefs: []
  type: TYPE_NORMAL
- en: '[Points to remember](toc.xhtml#s70a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: Excel `**LOOKUP**` functionality is limited and thus not recommended for day-to-day
    use. As an alternative, consider using the `**VLOOKUP**` or `**INDEX**`/`**MATCH**`
    function.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: The `**LOOKUP**` function has no option for an exact match; all of its uses
    default to an approximate match.
  prefs:
  - PREF_UL
  type: TYPE_NORMAL
- en: '[Multiple choice questions](toc.xhtml#s71a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: 'What is the result of the following formula:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`=LOOKUP(0, {1,2,3,4,5}, {“A”,“B”,“C”,“D”,“E”})?`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: E
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '#N/A'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What is the result of the following formula:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`=LOOKUP(“Z”, {“A”,“B”,“C”,“D”,“E”}, {1,2,3,4,5})?`'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: '1'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '2'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '3'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '4'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '5'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '#N/A'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: 'What is the result of the following formula:'
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: '`=LOOKUP(5, {1,2,3,4,6}, {“A”,“B”,“C”,“D”,“E”})`?'
  prefs:
  - PREF_IND
  type: TYPE_NORMAL
- en: A
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: B
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: C
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: D
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: E
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '#N/A'
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: What is the difference between the Vector form and the Array form of the LOOKUP
    function?
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: The Vector form searches for an item in one column/row and returns an item from
    the same position in another column/row, while the Array form searches for an
    item in the first column/row of a table array and returns values in the same position
    as the last column/row of a table array.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The Vector form searches for an item in the first column/row of a table array
    and returns values in the same position as the last column/row of a table array,
    while the Array form searches for an item in one column/row and returns an item
    from the same position in another column/row.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The Vector form searches for an exact match, while the Array form searches for
    an approximate match.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: The Vector form searches for an approximate match, while the Array form searches
    for an exact match.
  prefs:
  - PREF_IND
  - PREF_OL
  type: TYPE_NORMAL
- en: '[Answers](toc.xhtml#s72a)'
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
- en: f
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: e
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: d
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
- en: a
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
