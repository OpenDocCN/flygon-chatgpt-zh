["```py\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain import PromptTemplate, LLMChain\ntemplate = \"\"\"Question: {question} `Let's think step by step.`\n`Answer: \"\"\"`\n`prompt` `=` `PromptTemplate``(``template``=``template``,` `input_variables``=``[``\"question\"``])`\n`llm` `=` `ChatOpenAI``(``model_name``=``\"gpt-4\"``)`\n`llm_chain` `=` `LLMChain``(``prompt``=``prompt``,` `llm``=``llm``)`\n`question` `=` `\"\"\" What is the population of the capital of the country where the`\n`Olympic Games were held in 2016? \"\"\"`\n`llm_chain``.``run``(``question``)`\n```", "```py\nStep 1: Identify the country where the Olympic Games were held in 2016.\nAnswer: The 2016 Olympic Games were held in Brazil.\nStep 2: Identify the capital of Brazil.\nAnswer: The capital of Brazil is Bras\u00edlia.\nStep 3: Find the population of Bras\u00edlia.\nAnswer: As of 2021, the estimated population of Bras\u00edlia is around 3.1 million.\nSo, the population of the capital of the country where the Olympic Games were \nheld in 2016 is around 3.1 million. Note that this is an estimate and may\nvary slightly.'\n```", "```py\nThe capital of the country where the Olympic Games were held in 2016 is Rio de\nJaneiro, Brazil. The population of Rio de Janeiro is approximately 6.32 million\npeople as of 2021\\. Taking the square root of this population, we get \napproximately 2,513.29\\. Therefore, the square root of the population of \nthe capital of the country where the Olympic Games were held in 2016 is\napproximately 2,513.29.\n```", "```py\nfrom langchain.chat_models import ChatOpenAI\nfrom langchain.agents import load_tools, initialize_agent, AgentType\nllm = ChatOpenAI(model_name=\"gpt-3.5-turbo\", temperature=0)\ntools = load_tools([\"wikipedia\", \"llm-math\"], llm=llm)\nagent = initialize_agent(\n    tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True\n)\nquestion = \"\"\"What is the square root of the population of the capital of the\nCountry where the Olympic Games were held in 2016?\"\"\"\nagent.run(question)\n```", "```py\n> Entering new chain...\nI need to find the country where the Olympic Games were held in 2016 and then find\nthe population of its capital city. Then I can take the square root of that population.\nAction: Wikipedia\nAction Input: \"2016 Summer Olympics\"\nObservation: Page: 2016 Summer Olympics\n[...]\n```", "```py\nThought:I need to search for the capital city of Brazil.\nAction: Wikipedia\nAction Input: \"Capital of Brazil\"\nObservation: Page: Capitals of Brazil\nSummary: The current capital of Brazil, since its construction in 1960, is\nBrasilia. [...]\nThought: I have found the capital city of Brazil, which is Brasilia. Now I need \nto find the population of Brasilia.\nAction: Wikipedia\nAction Input: \"Population of Brasilia\"\nObservation: Page: Brasilia\n[...]\n```", "```py\nThought: I have found the population of Brasilia, but I need to calculate the\nsquare root of that population.\nAction: Calculator\nAction Input: Square root of the population of Brasilia (population: found in \nprevious observation)\nObservation: Answer: 1587.051038876822\n```", "```py\nThought:I now know the final answer\nFinal Answer: The square root of the population of the capital of the country\nwhere the Olympic Games were held in 2016 is approximately 1587.\n> Finished chain.\n```", "```py\nfrom langchain import OpenAI, ConversationChain\nchatbot_llm = OpenAI(model_name='text-ada-001')\nchatbot = ConversationChain(llm=chatbot_llm , verbose=True)\nchatbot.predict(input='Hello')\n```", "```py\n\n> Entering new ConversationChain chain...\nPrompt after formatting:\nThe following is a friendly conversation between a human and an AI. The AI is\ntalkative and provides lots of specific details from its context. If the AI\ndoes not know the answer to a question, it truthfully says it does not know.\nCurrent conversation:\nHuman: Hello\nAI:\n> Finished chain.\n' Hello! How can I help you?'\n```", "```py\n> Entering new ConversationChain chain...\nPrompt after formatting:\nThe following [...] does not know.\nCurrent conversation:\nHuman: Hello\nAI:  Hello! How can I help you?\nHuman: Can I ask you a question? Are you an AI?\nAI:\n> Finished chain.\n'\\n\\nYes, I am an AI.'\n```", "```py\nfrom langchain.document_loaders import PyPDFLoader\nloader = PyPDFLoader(\"ExplorersGuide.pdf\")\npages = loader.load_and_split()\n```", "```py\nfrom langchain.embeddings import OpenAIEmbeddings\nembeddings = OpenAIEmbeddings()\n```", "```py\nfrom langchain.vectorstores import FAISS\ndb = FAISS.from_documents(pages, embeddings)\n```", "```py\nq = \"What is Link's traditional outfit color?\"\ndb.similarity_search(q)[0]\n```", "```py\nDocument(page_content='While Link\u2019s traditional green `tunic` `is` `certainly` `an` `iconic` `look``,` `his` \n              `wardrobe` `has` `expanded` `[``...``]` `Dress` `for` `Success``',` ``metadata``=``{``'source'``:` `'ExplorersGuide.pdf'``,` `'page'``:` `35``})`` \n```", "```py\nfrom langchain.chains import RetrievalQA\nfrom langchain import OpenAI\nllm = OpenAI()\nchain = RetrievalQA.from_llm(llm=llm, retriever=db.as_retriever())\nq = \"What is Link's traditional outfit color?\"\nchain(q, return_only_outputs=True)\n```", "```py\n{'result': \" Link's traditional outfit color is green.\"}\n```", "```py  ```", "```py\nimport json\nimport quart\nimport quart_cors\nfrom quart import request\napp = quart_cors.cors(\n    quart.Quart(__name__), allow_origin=\"https://chat.openai.com\"\n)\n# Keep track of todo's. Does not persist if Python session is restarted.\n_TODOS = {}\n@app.post(\"/todos/<string:username>\")\nasync def add_todo(username):\n    request = await quart.request.get_json(force=True)\n    if username not in _TODOS:\n        _TODOS[username] = []\n    _TODOS[username].append(request[\"todo\"])\n    return quart.Response(response=\"OK\", status=200)\n@app.get(\"/todos/<string:username>\")\nasync def get_todos(username):\n    return quart.Response(\n        response=json.dumps(_TODOS.get(username, [])), status=200\n    )\n@app.get(\"/.well-known/ai-plugin.json\")\nasync def plugin_manifest():\n    host = request.headers[\"Host\"]\n    with open(\"./.well-known/ai-plugin.json\") as f:\n        text = f.read()\n        return quart.Response(text, mimetype=\"text/json\")\n@app.get(\"/openapi.yaml\")\nasync def openapi_spec():\n    host = request.headers[\"Host\"]\n    with open(\"openapi.yaml\") as f:\n        text = f.read()\n        return quart.Response(text, mimetype=\"text/yaml\")\ndef main():\n    app.run(debug=True, host=\"0.0.0.0\", port=5003)\nif __name__ == \"__main__\":\n    main()\n```", "```py\n{\n    \"schema_version\": \"v1\",\n    \"name_for_human\": \"TODO Plugin\",\n    \"name_for_model\": \"todo\",\n    \"description_for_human\": \"Plugin for managing a TODO list. \\\n        You can add, remove and view your TODOs.\",\n    \"description_for_model\": \"Plugin for managing a TODO list. \\\n        You can add, remove and view your TODOs.\",\n    \"auth\": {\n        \"type\": \"none\"\n    },\n    \"api\": {\n        \"type\": \"openapi\",\n        \"url\": \"http://localhost:3333/openapi.yaml\",\n        \"is_user_authenticated\": false\n    },\n    \"logo_url\": \"http://localhost:3333/logo.png\",\n    \"contact_email\": \"support@thecompany.com\",\n    \"legal_info_url\": \"http://www.thecompany.com/legal\"\n}      \n```", "```py\nopenapi: 3.0.1\ninfo:\n  title: TODO Plugin\n  description: A plugin that allows the user to create and manage a TODO list\n  using ChatGPT. If you do not know the user's username, ask them first before\n  making queries to the plugin. Otherwise, use the username \"global\".\n  version: 'v1'\nservers:\n  - url: http://localhost:5003\npaths:\n  /todos/{username}:\n    get:\n      operationId: getTodos\n      summary: Get the list of todos\n      parameters:\n      - in: path\n        name: username\n        schema:\n            type: string\n        required: true\n        description: The name of the user.\n      responses:\n        \"200\":\n          description: OK\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/getTodosResponse'\n[...]\n```"]