- en: '| ![image](d2d_images/chapter_title_corner_decoration_left.png) |  | ![image](d2d_images/chapter_title_corner_decoration_right.png)
    |'
  id: totrans-0
  prefs: []
  type: TYPE_TB
  zh: '| ![image](d2d_images/chapter_title_corner_decoration_left.png) |  | ![image](d2d_images/chapter_title_corner_decoration_right.png)
    |'
- en: '![image](d2d_images/chapter_title_above.png)'
  id: totrans-1
  prefs: []
  type: TYPE_IMG
  zh: '![image](d2d_images/chapter_title_above.png)'
- en: Let’s Build an App!
  id: totrans-2
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 让我们构建一个应用程序！
- en: '![image](d2d_images/chapter_title_below.png)'
  id: totrans-3
  prefs: []
  type: TYPE_IMG
  zh: '![image](d2d_images/chapter_title_below.png)'
- en: '![image](d2d_images/image011.jpg)'
  id: totrans-4
  prefs: []
  type: TYPE_IMG
  zh: '![image](d2d_images/image011.jpg)'
- en: Image by [Gerd Altmann](https://pixabay.com/users/geralt-9301/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=4025614) from [Pixabay](https://pixabay.com/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=4025614)
  id: totrans-5
  prefs: []
  type: TYPE_NORMAL
  zh: 图片由 [Gerd Altmann](https://pixabay.com/users/geralt-9301/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=4025614)
    提供，来自 [Pixabay](https://pixabay.com/?utm_source=link-attribution&utm_medium=referral&utm_campaign=image&utm_content=4025614)
- en: In the previous chapters, I included very verbose output from both Copilot and
    particularly ChatGPT. I also showed the output from each tool to show how well
    or poorly it did with the given prompts.
  id: totrans-6
  prefs: []
  type: TYPE_NORMAL
  zh: 在之前的章节中，我展示了 Copilot 和特别是 ChatGPT 的非常冗长的输出。我还展示了每个工具的输出，以展示它们对给定提示的表现如何。
- en: For this chapter, I’m going to use Copilot as my pair programming companion
    to build a modest application.
  id: totrans-7
  prefs: []
  type: TYPE_NORMAL
  zh: 对于这一章，我将使用 Copilot 作为我的配对编程伴侣来构建一个适度的应用程序。
- en: My technology stack will be a web application with HTML, Angular, and the Ionic
    Framework. Those choices are tangential to the point of using AI as my companion.
    Those are what I use every day, so I will quickly know whether or not the code
    generated by the AI is accurate.
  id: totrans-8
  prefs: []
  type: TYPE_NORMAL
  zh: 我的技术栈将是一个使用 HTML、Angular 和 Ionic Framework 的 Web 应用程序。这些选择与使用 AI 作为我的伴侣的目的无关。这些是我每天使用的东西，所以我很快就能知道
    AI 生成的代码是否准确。
- en: It won’t be a complicated app, just enough to demonstrate how I use the tools.
  id: totrans-9
  prefs: []
  type: TYPE_NORMAL
  zh: 这不会是一个复杂的应用程序，只是足够演示我如何使用这些工具。
- en: Hopefully you will follow along. If you do, let me know how it goes.
  id: totrans-10
  prefs: []
  type: TYPE_NORMAL
  zh: 希望你会跟着一起做。如果你这样做了，请告诉我进展如何。
- en: An Ionic App
  id: totrans-11
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 一个 Ionic 应用
- en: Ionic is a popular web framework for building applications of all types, but
    it has traditionally been used to create hybrid mobile applications. That is,
    mobile apps written with web technologies.
  id: totrans-12
  prefs: []
  type: TYPE_NORMAL
  zh: Ionic 是一个流行的 Web 框架，用于构建各种类型的应用程序，但传统上它被用来创建混合移动应用程序。也就是说，使用 Web 技术编写的移动应用程序。
- en: New Blank Ionic Angular Application
  id: totrans-13
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 新的空白 Ionic Angular 应用程序
- en: To prepare for this project, I made sure I was on the latest version of Ionic
    withnpm i -g @ionic/cli. Then created a brand new, blank Ionic-Angular app with ionic
    start.
  id: totrans-14
  prefs: []
  type: TYPE_NORMAL
  zh: 为了准备这个项目，我确保我使用最新版本的 Ionic 和 npm i -g @ionic/cli。然后用 ionic start 创建了一个全新的空白
    Ionic-Angular 应用程序。
- en: Once the project was created, I opened it in VS Code. I then created a blank
    text file and told VS Code that it’s a Shell script file. If you have been reading
    along, you may suspect what I was about to do.
  id: totrans-15
  prefs: []
  type: TYPE_NORMAL
  zh: 项目创建后，我在 VS Code 中打开了它。然后我创建了一个空白文本文件，并告诉 VS Code 它是一个 Shell 脚本文件。如果你一直在阅读，你可能会怀疑我接下来要做什么。
- en: Add a New Ionic Page
  id: totrans-16
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 添加一个新的 Ionic 页面
- en: I couldn’t remember how to create a new page (well, I could, but I wanted to
    see whether Copilot also knew). In my new Shell script file, I entered the following
    comment and waited to see what Copilot would offer me.
  id: totrans-17
  prefs: []
  type: TYPE_NORMAL
  zh: 我记不得如何创建一个新页面（嗯，我记得，但我想看看 Copilot 是否也知道）。在我的新 Shell 脚本文件中，我输入了以下注释，并等待看看 Copilot
    会给我提供什么。
- en: Create a new ionic page called Posts
  id: totrans-18
  prefs:
  - PREF_H1
  type: TYPE_NORMAL
  zh: 创建一个名为 Posts 的新 Ionic 页面
- en: ionic g page Posts
  id: totrans-19
  prefs: []
  type: TYPE_NORMAL
  zh: ionic g page Posts
- en: That command is one of a few valid ways to create a page, so I ran it in VS
    Code’s built-in terminal. Once created, I opened the app.component.html file,
    so that I could add a menu to my new page.
  id: totrans-20
  prefs: []
  type: TYPE_NORMAL
  zh: 那个命令是创建页面的几种有效方式之一，所以我在 VS Code 的内置终端中运行了它。创建完成后，我打开了 app.component.html 文件，这样我就可以为我的新页面添加一个菜单。
- en: Side Menu and Split Pane
  id: totrans-21
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 侧边菜单和分栏
- en: Whenever I create a new Ionic app, I start with a blank template, even though
    I know I’m going to want a side menu and a split-pane layout. I don’t start with
    the side-menu template because it adds a bunch of stuff I have to delete. The
    drawback is that I truly can never remember everything I need to do to create
    the split-pane and the side-menu. I was confident that Copilot could handle it,
    though.
  id: totrans-22
  prefs: []
  type: TYPE_NORMAL
  zh: 每当我创建一个新的 Ionic 应用程序时，我都从一个空白模板开始，即使我知道我将要想要一个侧边菜单和一个分栏布局。我不从侧边菜单模板开始，因为它会添加一堆我必须删除的东西。缺点是我真的永远记不住我需要做的一切来创建分栏和侧边菜单。不过我相信
    Copilot 能处理好这个问题。
- en: 'When I opened the HTML file, it looked like this:'
  id: totrans-23
  prefs: []
  type: TYPE_NORMAL
  zh: 当我打开 HTML 文件时，它看起来是这样的：
- en: <ion-app>
  id: totrans-24
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-app>
- en: <ion-router-outlet></ion-router-outlet>
  id: totrans-25
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-router-outlet></ion-router-outlet>
- en: </ion-app>
  id: totrans-26
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-app>
- en: 'Nothing surprising. I removed the <ion-router-outlet> line, replacing it with
    a comment:'
  id: totrans-27
  prefs: []
  type: TYPE_NORMAL
  zh: 没什么意外。我删除了 <ion-router-outlet> 行，用注释替换了它：
- en: <!—Add a side menu and an ion split pane—>
  id: totrans-28
  prefs: []
  type: TYPE_NORMAL
  zh: <!—添加一个侧边菜单和一个 ion 分割窗格—>
- en: Copilot “thought” a moment, almost long enough that I worried that it wasn’t
    working. Then, it gave me three different options. The first option contained
    two hard-coded pages. The second and third options built a menu from an array
    of pages on the component. The only difference between the two were some spacing,
    so I just picked one.
  id: totrans-29
  prefs: []
  type: TYPE_NORMAL
  zh: Copilot “思考”了一会儿，几乎让我担心它不起作用。然后，它给了我三个不同的选项。第一个选项包含了两个硬编码页面。第二和第三个选项从组件上的页面数组构建了一个菜单。两者之间唯一的区别是一些间距，所以我只是选择了一个。
- en: 'This is what Copilot gave me:'
  id: totrans-30
  prefs: []
  type: TYPE_NORMAL
  zh: 这是 Copilot 给我的：
- en: <ion-app>
  id: totrans-31
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-app>
- en: <!—Add a side menu and an ion split pane—>
  id: totrans-32
  prefs: []
  type: TYPE_NORMAL
  zh: <!—添加一个侧边菜单和一个 ion 分割窗格—>
- en: <ion-split-pane>
  id: totrans-33
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-split-pane>
- en: <ion-menu side="start" contentId="main-content">
  id: totrans-34
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-menu side="start" contentId="main-content">
- en: <ion-header>
  id: totrans-35
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-header>
- en: <ion-toolbar>
  id: totrans-36
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-toolbar>
- en: <ion-title>Menu</ion-title>
  id: totrans-37
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-title>菜单</ion-title>
- en: </ion-toolbar>
  id: totrans-38
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-toolbar>
- en: </ion-header>
  id: totrans-39
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-header>
- en: <ion-content>
  id: totrans-40
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-content>
- en: <ion-list>
  id: totrans-41
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-list>
- en: <ion-menu-toggle auto-hide="false" *ngFor="let p of appPages">
  id: totrans-42
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-menu-toggle auto-hide="false" *ngFor="let p of appPages">
- en: <ion-item [routerDirection]="'root'" [routerLink]="[p.url]">
  id: totrans-43
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-item [routerDirection]="'root'" [routerLink]="[p.url]">
- en: <ion-icon slot="start" [name]="p.icon"></ion-icon>
  id: totrans-44
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-icon slot="start" [name]="p.icon"></ion-icon>
- en: <ion-label>
  id: totrans-45
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-label>
- en: '{{p.title}}'
  id: totrans-46
  prefs: []
  type: TYPE_NORMAL
  zh: '{{p.title}}'
- en: </ion-label>
  id: totrans-47
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-label>
- en: </ion-item>
  id: totrans-48
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-item>
- en: </ion-menu-toggle>
  id: totrans-49
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-menu-toggle>
- en: </ion-list>
  id: totrans-50
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-list>
- en: </ion-content>
  id: totrans-51
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-content>
- en: </ion-menu>
  id: totrans-52
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-menu>
- en: <ion-router-outlet id="main-content"></ion-router-outlet>
  id: totrans-53
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-router-outlet id="main-content"></ion-router-outlet>
- en: </ion-app>
  id: totrans-54
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-app>
- en: If you are more astute than I am, you’ll notice that the <ion-split-pane>tag
    isn’t closed. Copilot waited for me to enter a blank line just before the closing </ion-app>tag.
    Once I did, Copilot finished up for me by adding </ion-split-pane>.
  id: totrans-55
  prefs: []
  type: TYPE_NORMAL
  zh: 如果你比我更敏锐，你会注意到 <ion-split-pane> 标签没有关闭。Copilot 等待我在关闭 </ion-app> 标签之前输入一个空行。一旦我这样做了，Copilot
    通过添加 </ion-split-pane> 为我完成了。
- en: My component did not yet have an appPagesarray, so I needed to get Copilot to
    make one for me. Over in app.component.ts, near the top of the class, I entered
    the word appPagesas a hint to see what it would do. It gave these lines to me
    one at a time, meaning I had to accept each suggestion by pressing the tab key
    and continuing by pressing the return key.
  id: totrans-56
  prefs: []
  type: TYPE_NORMAL
  zh: 我的组件还没有一个 appPages 数组，所以我需要让 Copilot 为我创建一个。在 app.component.ts 中，在类的顶部附近，我输入了 appPages 这个词作为提示，看看它会做什么。它逐一给我这些行，意味着我必须通过按 tab 键接受每个建议，然后按 return 键继续。
- en: appPages = [
  id: totrans-57
  prefs: []
  type: TYPE_NORMAL
  zh: appPages = [
- en: '{'
  id: totrans-58
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'title: ''Home'','
  id: totrans-59
  prefs: []
  type: TYPE_NORMAL
  zh: 'title: ''主页'','
- en: 'url: ''/home'','
  id: totrans-60
  prefs: []
  type: TYPE_NORMAL
  zh: 'url: ''/home'','
- en: 'icon: ''home'''
  id: totrans-61
  prefs: []
  type: TYPE_NORMAL
  zh: 'icon: ''home'''
- en: '},'
  id: totrans-62
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: I did have to cycle through the options when I got to the url. It initially
    suggested /inbox for the url. /homewas its second suggestion. You can also see
    that at this point, it hadn’t completed the array. It was waiting for me to give
    it permission to continue.
  id: totrans-63
  prefs: []
  type: TYPE_NORMAL
  zh: 当我到达 url 时，我确实需要循环浏览选项。它最初建议 /inbox 作为 url。 /home 是它的第二个建议。你还可以看到在这一点上，它还没有完成数组。它在等待我允许它继续。
- en: 'I still needed a menu to my new Posts page, so I gave it permission by pressing return.
    It gave me this:'
  id: totrans-64
  prefs: []
  type: TYPE_NORMAL
  zh: 我仍然需要一个菜单到我的新 Posts 页面，所以我按 return 给了它权限。它给了我这个：
- en: '{'
  id: totrans-65
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'title: ''List'','
  id: totrans-66
  prefs: []
  type: TYPE_NORMAL
  zh: 'title: ''列表'','
- en: 'I didn’t want that title, but there were no other options. Knowing by now that
    I can influence Copilot by changing its suggestions and then moving on, I changed
    the title to Postsand moved to the next line. It then added these lines:'
  id: totrans-67
  prefs: []
  type: TYPE_NORMAL
  zh: 我不想要那个标题，但没有其他选项。现在我知道我可以通过改变它的建议然后继续，来影响 Copilot，所以我将标题改为 Posts 并移到下一行。然后它添加了这些行：
- en: 'url: ''/posts'','
  id: totrans-68
  prefs: []
  type: TYPE_NORMAL
  zh: 'url: ''/posts'','
- en: 'icon: ''list'''
  id: totrans-69
  prefs: []
  type: TYPE_NORMAL
  zh: 'icon: ''list'''
- en: '},'
  id: totrans-70
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: Now I had no more pages, but Copilot would keep adding more if I let it, so
    I manually closed the array by typing ]; on the next line.
  id: totrans-71
  prefs: []
  type: TYPE_NORMAL
  zh: 现在我没有更多的页面了，但如果我让它，Copilot 会继续添加更多，所以我手动在下一行输入了 ]; 来关闭数组。
- en: 'At this point, I hadn’t actually checked to see whether any of this code worked
    but remembered that I had used npm startright after opening the project. I switched
    to my browser where the project was rendered and found this waiting for me:'
  id: totrans-72
  prefs: []
  type: TYPE_NORMAL
  zh: 在这一点上，我实际上还没有检查这些代码是否有效，但记得我在打开项目后使用了 npm start。我切换到了我的浏览器，项目已经渲染出来，发现这个等着我：
- en: '![Ionic split-pane app written mostly by GitHub Copilot](d2d_images/image012.png)Ionic
    split-pane app written mostly by GitHub Copilot'
  id: totrans-73
  prefs: []
  type: TYPE_NORMAL
  zh: '![大部分由 GitHub Copilot 编写的 Ionic 分割窗格应用](d2d_images/image012.png)大部分由 GitHub
    Copilot 编写的 Ionic 分割窗格应用'
- en: Clicking the menus switched to the selected page, so it worked!
  id: totrans-74
  prefs: []
  type: TYPE_NORMAL
  zh: 点击菜单可以切换到所选页面，所以它有效！
- en: Looking at that screenshot, you may see the other oversight that Copilot missed.
    I admit I missed it at first but want to include it for completeness. The split
    pane layout isn’t working quite right. That home page should take up the full
    width of the screen.
  id: totrans-75
  prefs: []
  type: TYPE_NORMAL
  zh: 看看那个截图，你可能会看到 Copilot 错过的另一个细节。我最初也错过了它，但出于完整性考虑，我想把它包含进来。分栏布局的显示并不完全正确。该首页应该占据整个屏幕的宽度。
- en: Looking again at the code, I realized that Copilot did not add the required contentId attribute
    to the <ion-split-pane>. Hoping it would offer to do so, I added a blank line
    before the closing >and waited... and waited... nothing.
  id: totrans-76
  prefs: []
  type: TYPE_NORMAL
  zh: 重新查看代码后，我意识到 Copilot 没有将必需的 contentId 属性添加到 <ion-split-pane> 中。希望它会提供这样做，我在关闭
    > 前添加了一个空行... 等待... 然后什么都没有发生。
- en: So, I think I finally stumped Copilot. I manually updated the line to look like
    this, and then it started working as expected.
  id: totrans-77
  prefs: []
  type: TYPE_NORMAL
  zh: 因此，我认为我最终困住了 Copilot。我手动更新了该行，然后它开始按预期工作。
- en: <ion-split-pane contentId="main-content">
  id: totrans-78
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-split-pane contentId="main-content">
- en: Copilot correctly added the contentId to the <ion-menu>, just not the <ion-split-pane>.
    Weird.
  id: totrans-79
  prefs: []
  type: TYPE_NORMAL
  zh: Copilot 正确地将 contentId 添加到 <ion-menu> 中，只是没有添加到 <ion-split-pane>。奇怪。
- en: Let’s Get Some Data!
  id: totrans-80
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 让我们获取一些数据！
- en: If you’ve been following along in order, you may recall that I had[Copilot write
    me some RxJS with the Angular HttpClient](c008.xhtml#_Angular_s_HttpClient). I
    will use some of that code here, as it has already been written.
  id: totrans-81
  prefs: []
  type: TYPE_NORMAL
  zh: 如果您按照顺序一直在关注，您可能还记得我让 Copilot 使用 Angular HttpClient 为我写一些 RxJS。我将在这里使用其中的一些代码，因为它已经写好了。
- en: 'I created a new service with this command:'
  id: totrans-82
  prefs: []
  type: TYPE_NORMAL
  zh: 我用这个命令创建了一个新的服务：
- en: ionic g service ApiService—skip-tests
  id: totrans-83
  prefs: []
  type: TYPE_NORMAL
  zh: ionic g service ApiService—skip-tests
- en: Yes, I skipped creating tests — I’ll deal with Copilot and unit tests later.
  id: totrans-84
  prefs: []
  type: TYPE_NORMAL
  zh: 是的，我跳过了创建测试 —— 我稍后会处理 Copilot 和单元测试。
- en: I then pasted the following code from the RxJS chapter into the new file.
  id: totrans-85
  prefs: []
  type: TYPE_NORMAL
  zh: 然后我将 RxJS 章节中的以下代码粘贴到新文件中。
- en: import { Injectable } from '[@angular/core](http://twitter.com/angular/core
    "Twitter profile for @angular/core")';
  id: totrans-86
  prefs: []
  type: TYPE_NORMAL
  zh: import { Injectable } from '[@angular/core](http://twitter.com/angular/core
    "Twitter profile for @angular/core")';
- en: import { HttpClient } from '[@angular/common](http://twitter.com/angular/common
    "Twitter profile for @angular/common")/http';
  id: totrans-87
  prefs: []
  type: TYPE_NORMAL
  zh: import { HttpClient } from '[@angular/common](http://twitter.com/angular/common
    "Twitter profile for @angular/common")/http';
- en: // Provide service in root
  id: totrans-88
  prefs: []
  type: TYPE_NORMAL
  zh: // 在根中提供服务
- en: '[@Injectable](http://twitter.com/Injectable "Twitter profile for @Injectable")({'
  id: totrans-89
  prefs: []
  type: TYPE_NORMAL
  zh: '[@Injectable](http://twitter.com/Injectable "Twitter profile for @Injectable")({'
- en: 'providedIn: ''root'''
  id: totrans-90
  prefs: []
  type: TYPE_NORMAL
  zh: 'providedIn: ''root'''
- en: '}) export class ApiService {'
  id: totrans-91
  prefs: []
  type: TYPE_NORMAL
  zh: '}) export class ApiService {'
- en: 'constructor(private http: HttpClient) { }'
  id: totrans-92
  prefs: []
  type: TYPE_NORMAL
  zh: 'constructor(private http: HttpClient) { }'
- en: // Get all posts from the API
  id: totrans-93
  prefs: []
  type: TYPE_NORMAL
  zh: // 从 API 获取所有帖子
- en: getAllPosts() {
  id: totrans-94
  prefs: []
  type: TYPE_NORMAL
  zh: getAllPosts() {
- en: return this.http
  id: totrans-95
  prefs: []
  type: TYPE_NORMAL
  zh: return this.http
- en: .get('[https://jsonplaceholder.typicode.com/posts'](https://jsonplaceholder.typicode.com/posts%27));
  id: totrans-96
  prefs: []
  type: TYPE_NORMAL
  zh: .get('[https://jsonplaceholder.typicode.com/posts'](https://jsonplaceholder.typicode.com/posts%27));
- en: '}'
  id: totrans-97
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '}'
  id: totrans-98
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: There is more code, but that was enough for my purposes. With this code, I expected
    I would be able to finish my modest app.
  id: totrans-99
  prefs: []
  type: TYPE_NORMAL
  zh: 还有更多的代码，但就我而言已经足够了。有了这段代码，我期望能完成我的简单应用程序。
- en: Load Blog Posts from Posts Component
  id: totrans-100
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 从帖子组件加载博客帖子
- en: With the service created, it was time to turn my attention to the Posts Component
    and load those posts into it. I opened posts.page.ts and added a hint to the top
    of the class. Remember, my goal was to write as little code as possible.
  id: totrans-101
  prefs: []
  type: TYPE_NORMAL
  zh: 服务创建好了，现在该把注意力转向帖子组件，并将这些帖子加载到其中。我打开了 posts.page.ts，并在类顶部加了一个提示。记住，我的目标是尽可能少写代码。
- en: // Inject ApiService
  id: totrans-102
  prefs: []
  type: TYPE_NORMAL
  zh: // 注入 ApiService
- en: 'constructor(private apiService: ApiService) { }'
  id: totrans-103
  prefs: []
  type: TYPE_NORMAL
  zh: 'constructor(private apiService: ApiService) { }'
- en: 'Copilot added the constructor, even though I already had one. In this case,
    it was easy enough to delete the existing one, but what if I already had one with
    other services in it? I decided to try again with the existing constructor. So,
    I started with this:'
  id: totrans-104
  prefs: []
  type: TYPE_NORMAL
  zh: Copilot 添加了构造函数，即使我已经有了一个。在这种情况下，删除现有的构造函数也很容易，但如果我已经有了其他服务的构造函数呢？我决定尝试使用现有的构造函数。因此，我从这里开始：
- en: // Inject ApiService
  id: totrans-105
  prefs: []
  type: TYPE_NORMAL
  zh: // 注入 ApiService
- en: 'constructor(private http: HttpClient) {'
  id: totrans-106
  prefs: []
  type: TYPE_NORMAL
  zh: 'constructor(private http: HttpClient) {'
- en: '}'
  id: totrans-107
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: 'I wanted to give it an existing constructor with parameters in the hopes it
    wouldn’t create a new one. I typed a comma followed by a [space] after theHttpClient.
    Copilot added the second parameter correctly, which left me with this:'
  id: totrans-108
  prefs: []
  type: TYPE_NORMAL
  zh: 我想给它一个带有参数的现有构造函数，希望它不会创建一个新的。我在 HttpClient 后面输入了逗号，然后是一个 [空格]。Copilot 正确地添加了第二个参数，留下了这样的代码：
- en: 'constructor(private http: HttpClient, private apiService: ApiService) { }'
  id: totrans-109
  prefs: []
  type: TYPE_NORMAL
  zh: 'constructor(private http: HttpClient, private apiService: ApiService) { }'
- en: The service name was correct, but as I have pointed out previously, Copilot
    won’t automatically import the service. Well, it will, but you have to put your
    cursor on one of the existing imports and then let it figure it out from there,
    which it will almost always do correctly, except apparently in this case. It wouldn’t
    add it for me, so I just got VS Code to do it instead.
  id: totrans-110
  prefs: []
  type: TYPE_NORMAL
  zh: 服务名称是正确的，但正如我之前指出的，Copilot 不会自动导入服务。嗯，它会，但你必须在其中一个现有的导入上放置你的光标，然后让它从那里弄清楚，而它几乎总是会做正确，除了显然在这种情况下。它不会为我添加它，所以我让
    VS Code 自己来做。
- en: Next, I needed to get those posts. Intellisense is really all that’s required
    in this situation, but again, my goal is to write as close to no code as possible.
  id: totrans-111
  prefs: []
  type: TYPE_NORMAL
  zh: 接下来，我需要获取那些帖子。在这种情况下，真正需要的是智能提示，但是，再次强调，我的目标是尽可能少写代码。
- en: // Get the posts from the API as an observable.
  id: totrans-112
  prefs: []
  type: TYPE_NORMAL
  zh: // 从 API 获取帖子作为可观察对象。
- en: 'posts: any;'
  id: totrans-113
  prefs: []
  type: TYPE_NORMAL
  zh: 'posts: any;'
- en: ngOnInit() {
  id: totrans-114
  prefs: []
  type: TYPE_NORMAL
  zh: ngOnInit() {
- en: this.apiService.getAllPosts().subscribe(data => {
  id: totrans-115
  prefs: []
  type: TYPE_NORMAL
  zh: this.apiService.getAllPosts().subscribe(data => {
- en: this.posts = data;
  id: totrans-116
  prefs: []
  type: TYPE_NORMAL
  zh: this.posts = data;
- en: '});'
  id: totrans-117
  prefs: []
  type: TYPE_NORMAL
  zh: '});'
- en: '}'
  id: totrans-118
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: That is not at all what I wanted, though I can’t say it won’t work. I deleted
    that code and tried a different approach. I left the comment but added posts$
    =and then let Copilot suggest the rest. This tells Copilot that I want an observable
    assigned to the variable posts$.
  id: totrans-119
  prefs: []
  type: TYPE_NORMAL
  zh: 尽管那不是我想要的，但我不能说它不起作用。我删除了那段代码，尝试了另一种方法。我留下了注释，然后添加了 posts$ =，然后让 Copilot 建议剩下的部分。这告诉
    Copilot 我想要一个可观察的变量赋值给变量 posts$。
- en: // Get the posts from the API as an observable.
  id: totrans-120
  prefs: []
  type: TYPE_NORMAL
  zh: // 从 API 获取帖子作为可观察对象。
- en: posts$ =
  id: totrans-121
  prefs: []
  type: TYPE_NORMAL
  zh: posts$ =
- en: this.apiService.getAllPosts();
  id: totrans-122
  prefs: []
  type: TYPE_NORMAL
  zh: this.apiService.getAllPosts();
- en: That is what I wanted, and all I needed for this file.
  id: totrans-123
  prefs: []
  type: TYPE_NORMAL
  zh: 那就是我想要的，也是这个文件所需要的一切。
- en: Responsive View for Blog Posts
  id: totrans-124
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 博客文章的响应式视图
- en: I’ve always been a big fan of the <ion-card>, so I wanted to use a bunch of
    them to display the blog posts from the above API call. I also want the UI to
    be responsive, so that was also a requirement.
  id: totrans-125
  prefs: []
  type: TYPE_NORMAL
  zh: 我一直是 <ion-card> 的忠实粉丝，所以我想使用一堆它们来显示上面 API 调用的博客文章。我还希望 UI 具有响应性，这也是一个要求。
- en: I switched over to the template file at posts.page.html and placed my cursor
    on the blank line inside the <ion-content>.
  id: totrans-126
  prefs: []
  type: TYPE_NORMAL
  zh: 我切换到了 posts.page.html 的模板文件，并将光标放在 <ion-content> 内的空行上。
- en: Given a single HTML comment, this is what I ended up with.
  id: totrans-127
  prefs: []
  type: TYPE_NORMAL
  zh: 给定一个 HTML 注释，这就是我最终得到的。
- en: <!—Create a responsive layout with ion-grid—>
  id: totrans-128
  prefs: []
  type: TYPE_NORMAL
  zh: <!—使用 ion-grid 创建一个响应式布局—>
- en: <ion-grid>
  id: totrans-129
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-grid>
- en: <ion-row>
  id: totrans-130
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-row>
- en: <ion-col size="12" size-md="6" size-lg="4" *ngFor="let post of posts">
  id: totrans-131
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-col size="12" size-md="6" size-lg="4" *ngFor="let post of posts">
- en: <ion-card>
  id: totrans-132
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-card>
- en: <ion-card-header>
  id: totrans-133
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-card-header>
- en: <ion-card-title>{{post.title}}</ion-card-title>
  id: totrans-134
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-card-title>{{post.title}}</ion-card-title>
- en: </ion-card-header>
  id: totrans-135
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-card-header>
- en: <ion-card-content>
  id: totrans-136
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-card-content>
- en: <p>{{post.body}}</p>
  id: totrans-137
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{{post.body}}</p>
- en: </ion-card-content>
  id: totrans-138
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-card-content>
- en: </ion-card>
  id: totrans-139
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-card>
- en: </ion-col>
  id: totrans-140
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-col>
- en: </ion-row>
  id: totrans-141
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-row>
- en: </ion-grid>
  id: totrans-142
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-grid>
- en: I had no idea it would offer the <ion-card>, but as that is what I wanted, I
    was cool with it. The only thing it got wrong was the postsvariable, which doesn’t
    exist. I wondered whether it would have been one of the alternative suggestions,
    so I undid the edit and tried again, planning to cycle through the suggestions.
    None of its other suggestions fixed that, though, so I tried one other idea.
  id: totrans-143
  prefs: []
  type: TYPE_NORMAL
  zh: 我不知道它会提供 <ion-card>，但因为那是我想要的，所以我很满意。它唯一搞错的事情是 posts 变量，那个并不存在。我想知道是否它是另一种替代建议之一，所以我撤消了编辑，然后再试一次，准备循环浏览建议。虽然它的其他建议都没有解决这个问题，所以我尝试了另一个想法。
- en: I changed the comment to reference the actual variable name of posts$. Copilot
    then gave me this. I’ve found that if you give Copilot enough of a hint, it will
    get things right.
  id: totrans-144
  prefs: []
  type: TYPE_NORMAL
  zh: 我将注释更改为引用 posts$ 的实际变量名称。然后 Copilot 给了我这个。我发现，如果你给 Copilot 提供足够的提示，它会解决问题。
- en: <!—Create a responsive layout of posts$ with ion-grid—>
  id: totrans-145
  prefs: []
  type: TYPE_NORMAL
  zh: <!—使用 ion-grid 创建帖子的响应式布局—>
- en: <ion-grid>
  id: totrans-146
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-grid>
- en: <ion-row>
  id: totrans-147
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-row>
- en: <ion-col size="12"
  id: totrans-148
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-col size="12"
- en: size-sm="6"
  id: totrans-149
  prefs: []
  type: TYPE_NORMAL
  zh: size-sm="6"
- en: size-md="4"
  id: totrans-150
  prefs: []
  type: TYPE_NORMAL
  zh: size-md="4"
- en: size-lg="3"
  id: totrans-151
  prefs: []
  type: TYPE_NORMAL
  zh: size-lg="3"
- en: '*ngFor="let post of posts$ | async">'
  id: totrans-152
  prefs: []
  type: TYPE_NORMAL
  zh: '*ngFor="let post of posts$ | async">'
- en: <ion-card>
  id: totrans-153
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-card>
- en: <ion-card-header>
  id: totrans-154
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-card-header>
- en: <ion-card-title>{{post.title}}</ion-card-title>
  id: totrans-155
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-card-title>{{post.title}}</ion-card-title>
- en: </ion-card-header>
  id: totrans-156
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-card-header>
- en: <ion-card-content>
  id: totrans-157
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-card-content>
- en: <p>{{post.body}}</p>
  id: totrans-158
  prefs: []
  type: TYPE_NORMAL
  zh: <p>{{post.body}}</p>
- en: </ion-card-content>
  id: totrans-159
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-card-content>
- en: </ion-card>
  id: totrans-160
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-card>
- en: </ion-col>
  id: totrans-161
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-col>
- en: </ion-row>
  id: totrans-162
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-row>
- en: </ion-grid>
  id: totrans-163
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-grid>
- en: That’s what I wanted! Thinking this might be right, I decided to switch over
    to the browser to check out my (uh, Copilot’s) handiwork.
  id: totrans-164
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是我想要的！认为这可能是正确的，我决定切换到浏览器，检查一下我的（嗯，Copilot 的）杰作。
- en: To my surprise, it compiled but did not run. Did you catch the problem? Maybe
    if I show you the console error it will become clear.
  id: totrans-165
  prefs: []
  type: TYPE_NORMAL
  zh: 令我惊讶的是，它编译了但没有运行。你注意到问题了吗？也许如果我给你看一下控制台错误，问题就会变得明显。
- en: 'ERROR Error: Uncaught (in promise): NullInjectorError: R3InjectorError(PostsPageModule)[HttpClient
    -> HttpClient -> HttpClient -> HttpClient]:'
  id: totrans-166
  prefs: []
  type: TYPE_NORMAL
  zh: 错误：未捕获（在承诺中）：NullInjectorError：R3InjectorError（PostsPageModule）[HttpClient ->
    HttpClient -> HttpClient -> HttpClient]：
- en: 'NullInjectorError: No provider for HttpClient!'
  id: totrans-167
  prefs: []
  type: TYPE_NORMAL
  zh: 'NullInjectorError: 未提供HttpClient！'
- en: Oh, right!
  id: totrans-168
  prefs: []
  type: TYPE_NORMAL
  zh: 哦，对了！
- en: I forgot to add the HttpClientModule in my app module. Long story short, I could
    have done it myself, but thought it would better to keep letting Copilot guess
    what I wanted from my comments. At the top of app.module.ts, I added this comment.
    Copilot added the rest.
  id: totrans-169
  prefs: []
  type: TYPE_NORMAL
  zh: 我忘了在我的应用模块中添加HttpClientModule。长话短说，我本来可以自己做，但觉得让Copilot根据我的注释来猜我想要什么会更好。在`app.module.ts`顶部，我添加了这个注释。Copilot添加了剩下的部分。
- en: // Import the HttpClientModule
  id: totrans-170
  prefs: []
  type: TYPE_NORMAL
  zh: // 导入HttpClientModule
- en: import { HttpClientModule } from '@angular/common/http';
  id: totrans-171
  prefs: []
  type: TYPE_NORMAL
  zh: import { HttpClientModule } from '@angular/common/http';
- en: 'Then in the imports array:'
  id: totrans-172
  prefs: []
  type: TYPE_NORMAL
  zh: 然后在`imports`数组中：
- en: // Add the HttpClientModule to the imports array
  id: totrans-173
  prefs: []
  type: TYPE_NORMAL
  zh: // 在`imports`数组中添加HttpClientModule
- en: HttpClientModule,
  id: totrans-174
  prefs: []
  type: TYPE_NORMAL
  zh: HttpClientModule,
- en: Now it was finally time to review the browser again.
  id: totrans-175
  prefs: []
  type: TYPE_NORMAL
  zh: 现在终于是时候再次审查浏览器了。
- en: '![Blog posts app written almost entirely by GitHub Copilot, showing a responsive
    grid layout with a side menu.](d2d_images/image001.png)Blog posts app in Ionic
    Framework written almost entirely by GitHub Copilot'
  id: totrans-176
  prefs: []
  type: TYPE_NORMAL
  zh: '![由GitHub Copilot几乎整个编写的博客文章应用程序，显示一个具有侧栏菜单的响应式网格布局。](d2d_images/image001.png)由GitHub
    Copilot在Ionic Framework中几乎完全编写的博客文章应用'
- en: It’s even responsive.
  id: totrans-177
  prefs: []
  type: TYPE_NORMAL
  zh: 这甚至是响应式的。
- en: '![Responsive version, showing only two columns of content and no side menu.](d2d_images/image000.png)'
  id: totrans-178
  prefs: []
  type: TYPE_IMG
  zh: '![展示只有两列内容和没有侧栏菜单的响应式版本。](d2d_images/image000.png)'
- en: Responsive version has only two columns of content and no side menu.
  id: totrans-179
  prefs: []
  type: TYPE_NORMAL
  zh: 响应式版本只有两列内容，没有侧栏菜单。
- en: But you may have noticed an oversight. The side menu appropriately disappears
    on smaller screen widths, but there is no menu button. Did Copilot forget that
    or did I? Honestly, I’m not sure.
  id: totrans-180
  prefs: []
  type: TYPE_NORMAL
  zh: 但你可能已经注意到了一个疏忽。屏幕较窄时，侧栏菜单恰当地消失了，但没有菜单按钮。是Copilot忘记了还是我？老实说，我不确定。
- en: It isn’t hard to fix, though, which we’ll soon see.
  id: totrans-181
  prefs: []
  type: TYPE_NORMAL
  zh: 不过修复起来不难，我们很快就会看到的。
- en: Toolbar Buttons
  id: totrans-182
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: 工具栏按钮
- en: 'The last thing I wanted to do was see whether I could get Copilot to make some
    buttons for me. On the Posts page, the existing header looks like this:'
  id: totrans-183
  prefs: []
  type: TYPE_NORMAL
  zh: 我想做的最后一件事是看看我是否能让Copilot帮我制作一些按钮。在文章页面，现有的页眉如下所示：
- en: <ion-header>
  id: totrans-184
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-header>
- en: <ion-toolbar>
  id: totrans-185
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-toolbar>
- en: <ion-title>Posts</ion-title>
  id: totrans-186
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-title>文章</ion-title>
- en: </ion-toolbar>
  id: totrans-187
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-toolbar>
- en: </ion-header>
  id: totrans-188
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-header>
- en: Now, I happen to know where the button goes, but let’s assume I do not. What
    if I were to remove the entire header and see what Copilot would do? I did exactly
    that, replacing the header with a comment, after which Copilot provided me with
    the rest.
  id: totrans-189
  prefs: []
  type: TYPE_NORMAL
  zh: 现在，我碰巧知道按钮应该放在哪里，但让我们假设我不知道。如果我删除整个页眉然后看看Copilot会做些什么呢？我就是这么做的，用注释替换了页眉，之后Copilot为我提供了剩下的部分。
- en: <!—Header with title and menu button—>
  id: totrans-190
  prefs: []
  type: TYPE_NORMAL
  zh: <!—标题和菜单按钮的页眉—>
- en: <ion-header>
  id: totrans-191
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-header>
- en: <ion-toolbar>
  id: totrans-192
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-toolbar>
- en: <ion-buttons slot="start">
  id: totrans-193
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-buttons slot="start">
- en: <ion-menu-button></ion-menu-button>
  id: totrans-194
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-menu-button></ion-menu-button>
- en: </ion-buttons>
  id: totrans-195
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-buttons>
- en: <ion-title>Posts</ion-title>
  id: totrans-196
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-title>文章</ion-title>
- en: </ion-toolbar>
  id: totrans-197
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-toolbar>
- en: </ion-header>
  id: totrans-198
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-header>
- en: It did not suggest a Back button, so I added a comment immediately after the
    menu button.
  id: totrans-199
  prefs: []
  type: TYPE_NORMAL
  zh: 它没建议添加返回按钮，所以我在菜单按钮后立即添加了一个注释。
- en: <!—Back Button—>
  id: totrans-200
  prefs: []
  type: TYPE_NORMAL
  zh: <!—返回按钮—>
- en: <ion-back-button defaultHref="/home"></ion-back-button>
  id: totrans-201
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-back-button defaultHref="/home"></ion-back-button
- en: That was the second suggestion. The first one had the back button commented
    out and no defaultHref, which is an attribute that tells Ionic where to navigate
    if there is nothing “to go back to.”
  id: totrans-202
  prefs: []
  type: TYPE_NORMAL
  zh: 这是第二个建议。第一个建议中，返回按钮被注释掉了，并且没有`defaultHref`，这是告诉Ionic在没有“返回到哪里”的情况下要导航到哪里的属性。
- en: To be consistent, I also needed to do the same thing to the home page. What
    stood out to me about that, though, is that it this time it remembered the back
    button and added it automatically.
  id: totrans-203
  prefs: []
  type: TYPE_NORMAL
  zh: 为了保持一致，我也需要对主页做同样的事情。但引起我注意的是，这次它记住了返回按钮并且自动添加了它。
- en: Copilot tends to recognize patterns in your code and applies those patterns
    where they make sense.
  id: totrans-204
  prefs: []
  type: TYPE_NORMAL
  zh: Copilot倾向于识别代码中的模式，并在合适的地方应用这些模式。
- en: <!—Header with title and menu button—>
  id: totrans-205
  prefs: []
  type: TYPE_NORMAL
  zh: <!—标题和菜单按钮的页眉—>
- en: <ion-header>
  id: totrans-206
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-header>
- en: <ion-toolbar>
  id: totrans-207
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-toolbar>
- en: <ion-buttons slot="start">
  id: totrans-208
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-buttons slot="start">
- en: <ion-menu-button></ion-menu-button>
  id: totrans-209
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-menu-button></ion-menu-button>
- en: <!—Back Button—>
  id: totrans-210
  prefs: []
  type: TYPE_NORMAL
  zh: <!—返回按钮—>
- en: <ion-back-button defaultHref="/home"></ion-back-button>
  id: totrans-211
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-back-button defaultHref="/home"></ion-back-button>
- en: </ion-buttons>
  id: totrans-212
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-buttons>
- en: <ion-title>Posts</ion-title>
  id: totrans-213
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-title>文章</ion-title>
- en: </ion-toolbar>
  id: totrans-214
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-toolbar>
- en: </ion-header>
  id: totrans-215
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-header>
- en: Not always, though. It did get the page title wrong, so I fixed that manually.
  id: totrans-216
  prefs: []
  type: TYPE_NORMAL
  zh: 但不总是。它把页面标题搞错了，所以我手动修复了。
- en: Whether or not the Back button makes sense for the user experience is something
    we can debate another time.
  id: totrans-217
  prefs: []
  type: TYPE_NORMAL
  zh: 返回按钮是否对用户体验有意义是我们可以另作讨论的事情。
- en: What about ChatGPT?
  id: totrans-218
  prefs:
  - PREF_H2
  type: TYPE_NORMAL
  zh: ChatGPT 呢？
- en: 'Could ChatGPT have done a better job? My initial hesitation about using ChatGPT
    for this chapter is twofold:'
  id: totrans-219
  prefs: []
  type: TYPE_NORMAL
  zh: ChatGPT 能做得更好吗？我对在本章中使用 ChatGPT 的最初犹豫有两个原因：
- en: There is a lot of back-and-forth when coding. If you’re in and out of the editor,
    back to ChatGPT, etc. It gets tiresome quickly.
  id: totrans-220
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: 编码时需要来回切换。如果你不停地在编辑器和 ChatGPT 之间切换，会很快感到疲惫。
- en: ChatGPT doesn’t know about anything past September 2021\. What versions of Angular
    and Ionic were current then? I decided to ask ChatGPT to find out.
  id: totrans-221
  prefs:
  - PREF_OL
  type: TYPE_NORMAL
  zh: ChatGPT 在 2021 年 9 月之后的内容并不了解。那时的 Angular 和 Ionic 版本是什么？我决定问问 ChatGPT 来找出。
- en: What is the newest version of Angular and Ionic Framework you know of?
  id: totrans-222
  prefs: []
  type: TYPE_NORMAL
  zh: 你知道 Angular 和 Ionic Framework 的最新版本是什么？
- en: 'As of my knowledge cutoff date of September 2021, the newest versions of Angular
    and Ionic Framework were:'
  id: totrans-223
  prefs: []
  type: TYPE_NORMAL
  zh: 在截止 2021 年 9 月的我的知识日期上，Angular 和 Ionic Framework 的最新版本分别是：
- en: 'Angular: The newest version of Angular at that time was version 13, which was
    released on November 10, 2021.'
  id: totrans-224
  prefs: []
  type: TYPE_NORMAL
  zh: 'Angular: 那时最新的 Angular 版本是 13，发布于 2021 年 11 月 10 日。'
- en: 'Ionic Framework: The newest version of Ionic Framework at that time was version
    6, which was released on February 11, 2021.'
  id: totrans-225
  prefs: []
  type: TYPE_NORMAL
  zh: 'Ionic Framework: 那时最新的 Ionic Framework 版本是 6，发布于 2021 年 2 月 11 日。'
- en: However, please note that software versions are constantly updated and new versions
    may have been released since my knowledge cutoff date.
  id: totrans-226
  prefs: []
  type: TYPE_NORMAL
  zh: 但请注意，软件版本是不断更新的，自截止我的知识日期以来可能已经发布了新版本。
- en: Well, I know those versions are current enough that the code it generates should
    be fine, so I decided to make the most comprehensive prompt I could think of and
    see what it would give me. Here it is in its entirety.
  id: totrans-227
  prefs: []
  type: TYPE_NORMAL
  zh: 我知道这些版本足够新，生成的代码应该没有问题，所以我决定写下我能想到的最全面的提示，看看它会给我什么。下面就是全部内容。
- en: Using Angular and the Ionic Framework, create a complete web application that
    uses a split-pane layout with a side menu and a default Home page. It should have
    an Angular service to load blog posts from a remote sample API. Those blog posts
    should be displayed on a page called Posts. The Posts page should be responsive,
    displaying the blog post titles and body in an <ion-card>. When working with Observables,
    prefer the async pipe over subscribing and unsubscribing. Make sure you provide
    the Ionic CLI commands to create the application and any additional items needed
    to create the application.
  id: totrans-228
  prefs: []
  type: TYPE_NORMAL
  zh: 使用 Angular 和 Ionic Framework，创建一个完整的 web 应用程序，使用侧边菜单和默认主页的分割布局。它应该有一个 Angular
    服务，从远程示例 API 加载博客文章。这些博客文章应该在名为 "Posts" 的页面上显示。"Posts" 页面应该是响应式的，在一个 <ion-card>
    中显示博客文章的标题和内容。在处理 Observables 时，优先使用异步管道而不是订阅和取消订阅。确保提供 Ionic CLI 命令来创建应用程序以及创建应用程序所需的任何其他项目。
- en: As an AI language model, I am not able to create full web applications with
    code. However, I can provide you with a detailed outline of the steps and code
    snippets needed to complete the requested task.
  id: totrans-229
  prefs: []
  type: TYPE_NORMAL
  zh: 作为 AI 语言模型，我无法使用代码创建完整的 web 应用程序。但我可以为您提供完成所需任务所需的详细步骤和代码片段。
- en: 'To create the application using Angular and the Ionic Framework, follow these
    steps:'
  id: totrans-230
  prefs: []
  type: TYPE_NORMAL
  zh: 要使用 Angular 和 Ionic Framework 创建应用程序，按照以下步骤进行：
- en: '1.  Install the Ionic CLI by running the following command:'
  id: totrans-231
  prefs: []
  type: TYPE_NORMAL
  zh: 1.  运行以下命令安装 Ionic CLI：
- en: npm install -g @ionic/cli
  id: totrans-232
  prefs: []
  type: TYPE_NORMAL
  zh: npm install -g @ionic/cli
- en: '2.  Create a new Ionic Angular project using the following command:'
  id: totrans-233
  prefs: []
  type: TYPE_NORMAL
  zh: 2.  使用以下命令创建一个新的 Ionic Angular 项目：
- en: ionic start myapp—type=angular
  id: totrans-234
  prefs: []
  type: TYPE_NORMAL
  zh: ionic start myapp—type=angular
- en: '3.  Change into the newly created project directory:'
  id: totrans-235
  prefs: []
  type: TYPE_NORMAL
  zh: 3.  切换到新创建的项目目录：
- en: cd myapp
  id: totrans-236
  prefs: []
  type: TYPE_NORMAL
  zh: cd myapp
- en: '4.  Generate a service to load blog posts from a remote sample API by running
    the following command:'
  id: totrans-237
  prefs: []
  type: TYPE_NORMAL
  zh: 4.  运行以下命令生成一个用于从远程示例 API 加载博客文章的服务：
- en: ionic generate service services/post
  id: totrans-238
  prefs: []
  type: TYPE_NORMAL
  zh: ionic generate service services/post
- en: '5.  In the generated post service file (post.service.ts), add the following
    code to import HttpClient and Observable:'
  id: totrans-239
  prefs: []
  type: TYPE_NORMAL
  zh: 5.  在生成的 post service 文件 (post.service.ts) 中，添加以下代码来引入 HttpClient 和 Observable：
- en: import { HttpClient } from '@angular/common/http';
  id: totrans-240
  prefs: []
  type: TYPE_NORMAL
  zh: import { HttpClient } from '@angular/common/http';
- en: import { Observable } from 'rxjs';
  id: totrans-241
  prefs: []
  type: TYPE_NORMAL
  zh: import { Observable } from 'rxjs';
- en: '6.  Add the following code to the post service file to load the blog posts
    from the remote API:'
  id: totrans-242
  prefs: []
  type: TYPE_NORMAL
  zh: 6.  在帖子服务文件中添加以下代码，从远程 API 加载博客文章：
- en: 'constructor(private http: HttpClient) {}'
  id: totrans-243
  prefs: []
  type: TYPE_NORMAL
  zh: 'constructor(private http: HttpClient) {}'
- en: 'getPosts(): Observable<any> {'
  id: totrans-244
  prefs: []
  type: TYPE_NORMAL
  zh: 'getPosts(): Observable<any> {'
- en: return this.http.get('https://jsonplaceholder.typicode.com/posts');
  id: totrans-245
  prefs: []
  type: TYPE_NORMAL
  zh: return this.http.get('https://jsonplaceholder.typicode.com/posts');
- en: '}'
  id: totrans-246
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '7.  Generate a new page called Posts by running the following command:'
  id: totrans-247
  prefs: []
  type: TYPE_NORMAL
  zh: 7.  运行以下命令生成一个名为 Posts 的新页面：
- en: ionic generate page pages/posts
  id: totrans-248
  prefs: []
  type: TYPE_NORMAL
  zh: ionic generate page pages/posts
- en: '8.  In the generated posts page file (posts.page.ts), add the following code
    to import the post service and Observable:'
  id: totrans-249
  prefs: []
  type: TYPE_NORMAL
  zh: 8.  在生成的帖子页面文件（posts.page.ts）中，添加以下代码导入帖子服务和 Observable：
- en: import { PostService } from '../../services/post/post.service';
  id: totrans-250
  prefs: []
  type: TYPE_NORMAL
  zh: import { PostService } from '../../services/post/post.service';
- en: import { Observable } from 'rxjs';
  id: totrans-251
  prefs: []
  type: TYPE_NORMAL
  zh: import { Observable } from 'rxjs';
- en: '9.  Add the following code to the posts page file to load the blog posts using
    the post service:'
  id: totrans-252
  prefs: []
  type: TYPE_NORMAL
  zh: 9.  在帖子页面文件中添加以下代码，使用帖子服务加载博客文章：
- en: 'posts$: Observable<any>;'
  id: totrans-253
  prefs: []
  type: TYPE_NORMAL
  zh: 'posts$: Observable<any>;'
- en: 'constructor(private postService: PostService) {}'
  id: totrans-254
  prefs: []
  type: TYPE_NORMAL
  zh: 'constructor(private postService: PostService) {}'
- en: ngOnInit() {
  id: totrans-255
  prefs: []
  type: TYPE_NORMAL
  zh: ngOnInit() {
- en: this.posts$ = this.postService.getPosts();
  id: totrans-256
  prefs: []
  type: TYPE_NORMAL
  zh: this.posts$ = this.postService.getPosts();
- en: '}'
  id: totrans-257
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '10.  In the posts page template file (posts.page.html), add the following code
    to display the blog post titles and body in an <ion-card>:'
  id: totrans-258
  prefs: []
  type: TYPE_NORMAL
  zh: 10.  在帖子页面模板文件（posts.page.html）中，添加以下代码以在 <ion-card> 中显示博客文章的标题和内容：
- en: <ion-content>
  id: totrans-259
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-content>
- en: <ion-card *ngFor="let post of posts$ | async">
  id: totrans-260
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-card *ngFor="let post of posts$ | async">
- en: <ion-card-header>
  id: totrans-261
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-card-header>
- en: '{{ post.title }}'
  id: totrans-262
  prefs: []
  type: TYPE_NORMAL
  zh: '{{ post.title }}'
- en: </ion-card-header>
  id: totrans-263
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-card-header>
- en: <ion-card-content>
  id: totrans-264
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-card-content>
- en: '{{ post.body }}'
  id: totrans-265
  prefs: []
  type: TYPE_NORMAL
  zh: '{{ post.body }}'
- en: </ion-card-content>
  id: totrans-266
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-card-content>
- en: </ion-card>
  id: totrans-267
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-card>
- en: </ion-content>
  id: totrans-268
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-content>
- en: '11.  Modify the app-routing.module.ts file to add routes for the Home and Posts
    pages:'
  id: totrans-269
  prefs: []
  type: TYPE_NORMAL
  zh: 11.  修改 app-routing.module.ts 文件，添加主页和帖子页面的路由：
- en: import { NgModule } from '@angular/core';
  id: totrans-270
  prefs: []
  type: TYPE_NORMAL
  zh: import { NgModule } from '@angular/core';
- en: import { Routes, RouterModule } from '@angular/router';
  id: totrans-271
  prefs: []
  type: TYPE_NORMAL
  zh: import { Routes, RouterModule } from '@angular/router';
- en: import { HomePage } from './home/home.page';
  id: totrans-272
  prefs: []
  type: TYPE_NORMAL
  zh: import { HomePage } from './home/home.page';
- en: import { PostsPage } from './pages/posts/posts.page';
  id: totrans-273
  prefs: []
  type: TYPE_NORMAL
  zh: import { PostsPage } from './pages/posts/posts.page';
- en: 'const routes: Routes = ['
  id: totrans-274
  prefs: []
  type: TYPE_NORMAL
  zh: 'const routes: Routes = ['
- en: '{'
  id: totrans-275
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'path: '''','
  id: totrans-276
  prefs: []
  type: TYPE_NORMAL
  zh: 'path: '''','
- en: 'component: HomePage'
  id: totrans-277
  prefs: []
  type: TYPE_NORMAL
  zh: 'component: HomePage'
- en: '},'
  id: totrans-278
  prefs: []
  type: TYPE_NORMAL
  zh: '},'
- en: '{'
  id: totrans-279
  prefs: []
  type: TYPE_NORMAL
  zh: '{'
- en: 'path: ''posts'','
  id: totrans-280
  prefs: []
  type: TYPE_NORMAL
  zh: 'path: ''posts'','
- en: 'component: PostsPage'
  id: totrans-281
  prefs: []
  type: TYPE_NORMAL
  zh: 'component: PostsPage'
- en: '}'
  id: totrans-282
  prefs: []
  type: TYPE_NORMAL
  zh: '}'
- en: '];'
  id: totrans-283
  prefs: []
  type: TYPE_NORMAL
  zh: '];'
- en: '@NgModule({'
  id: totrans-284
  prefs: []
  type: TYPE_NORMAL
  zh: '@NgModule({'
- en: 'imports: [RouterModule.forRoot(routes)],'
  id: totrans-285
  prefs: []
  type: TYPE_NORMAL
  zh: 'imports: [RouterModule.forRoot(routes)],'
- en: 'exports: [RouterModule]'
  id: totrans-286
  prefs: []
  type: TYPE_NORMAL
  zh: 'exports: [RouterModule]'
- en: '})'
  id: totrans-287
  prefs: []
  type: TYPE_NORMAL
  zh: '})'
- en: export class AppRoutingModule {}
  id: totrans-288
  prefs: []
  type: TYPE_NORMAL
  zh: 'export class AppRoutingModule {} '
- en: '12.  Modify the app.component.html file to add a split-pane layout with a side
    menu and a default Home page:'
  id: totrans-289
  prefs: []
  type: TYPE_NORMAL
  zh: 12.  修改 app.component.html 文件，添加一个具有侧边菜单和默认主页的分栏布局：
- en: <ion-split-pane>
  id: totrans-290
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-split-pane>
- en: <ion-menu>
  id: totrans-291
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-menu>
- en: <ion-header>
  id: totrans-292
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-header>
- en: <ion-toolbar>
  id: totrans-293
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-toolbar>
- en: <ion-title>Menu</ion-title>
  id: totrans-294
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-title>菜单</ion-title>
- en: </ion-toolbar>
  id: totrans-295
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-toolbar>
- en: </ion-header>
  id: totrans-296
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-header>
- en: <ion-content>
  id: totrans-297
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-content>
- en: <ion-list>
  id: totrans-298
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-list>
- en: <ion-item routerLink="/" routerDirection="root">
  id: totrans-299
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-item routerLink="/" routerDirection="root">
- en: Home
  id: totrans-300
  prefs: []
  type: TYPE_NORMAL
  zh: 主页
- en: </ion-item>
  id: totrans-301
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-item>
- en: <ion-item routerLink="/posts" routerDirection="root">
  id: totrans-302
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-item routerLink="/posts" routerDirection="root">
- en: Posts
  id: totrans-303
  prefs: []
  type: TYPE_NORMAL
  zh: 帖子
- en: </ion-item>
  id: totrans-304
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-item>
- en: </ion-list>
  id: totrans-305
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-list>
- en: </ion-content>
  id: totrans-306
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-content>
- en: </ion-menu>
  id: totrans-307
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-menu>
- en: <ion-router-outlet></ion-router-outlet>
  id: totrans-308
  prefs: []
  type: TYPE_NORMAL
  zh: <ion-router-outlet></ion-router-outlet>
- en: </ion-split-pane>
  id: totrans-309
  prefs: []
  type: TYPE_NORMAL
  zh: </ion-split-pane>
- en: '13.  Run the following command to start the application in a local development
    server:'
  id: totrans-310
  prefs: []
  type: TYPE_NORMAL
  zh: 13.  运行以下命令在本地开发服务器上启动应用程序：
- en: ionic serve
  id: totrans-311
  prefs: []
  type: TYPE_NORMAL
  zh: ionic serve
- en: This will launch the application in your default web browser.
  id: totrans-312
  prefs: []
  type: TYPE_NORMAL
  zh: 这将在您的默认 Web 浏览器中启动应用程序。
- en: With these steps, you should have a complete web application using Angular and
    the Ionic Framework with a split-pane layout and a side menu. The Home page is
    the default page, and the Posts page displays blog post titles and body in an
    <ion-card>. The blog posts are loaded from a remote sample API using an Angular
    service, and the Posts page is responsive using the async pipe.
  id: totrans-313
  prefs: []
  type: TYPE_NORMAL
  zh: 使用这些步骤，您应该可以使用 Angular 和 Ionic Framework 创建一个完整的 Web 应用程序，具有分栏布局和侧边菜单。主页是默认页面，而“帖子”页面显示博客文章的标题和内容在一个
    <ion-card> 中。博客文章是使用 Angular 服务从远程示例 API 加载的，并且“帖子”页面使用异步管道进行响应式设计。
- en: Please note that the code snippets provided here are just a starting point and
    may need to be modified or expanded to meet your specific requirements.
  id: totrans-314
  prefs: []
  type: TYPE_NORMAL
  zh: 请注意，此处提供的代码片段仅为起点，可能需要修改或扩展以满足您的特定需求。
- en: I have to say that’s a pretty good start. Did you see what it missed, though?
    I forgot to ask it to give me a menu and back buttons, so it didn’t. It also didn’t
    give me a header bar on the Posts page, and it didn’t bother to offer any icons
    for my menu.
  id: totrans-315
  prefs: []
  type: TYPE_NORMAL
  zh: 我必须说这是一个相当不错的开始。不过，你有没有注意到它错过了什么？我忘了要求它给我一个菜单和返回按钮，所以它没有。它还没有在文章页面给我一个标题栏，也没有为我的菜单提供任何图标。
- en: Speaking of the side menu, it completely neglected to give me contentId values
    for the <ion-split-pane> and the <ion-menu>. I didn’t bother entering all that
    into my app but am reasonably certain it won’t run as-is.
  id: totrans-316
  prefs: []
  type: TYPE_NORMAL
  zh: 谈到侧边菜单，它完全忽略了为<ion-split-pane>和<ion-menu>提供contentId值。我没有费心将所有这些输入到我的应用程序中，但我相当确定它不会原样运行。
- en: This is where Copilot really shines. Copilot often needs some coaxing, but it
    mostly gets the code right. You can easily delete a line or a function, type a
    new comment, and quickly get the code you need.
  id: totrans-317
  prefs: []
  type: TYPE_NORMAL
  zh: 这就是Copilot真正擅长的地方。Copilot通常需要一些劝说，但它大多数情况下都能得到正确的代码。你可以轻松删除一行或一个函数，输入一个新的注释，然后快速获得你需要的代码。
- en: With ChatGPT, you can ask it to refine its response, but it will usually generate
    everything again. Not only that, but I’ve seen it generate completely different
    code on subsequent passes, changing more than you ask it to.
  id: totrans-318
  prefs: []
  type: TYPE_NORMAL
  zh: 使用ChatGPT，你可以要求它优化它的回应，但它通常会再次生成所有内容。不仅如此，我发现它在后续处理中生成了完全不同的代码，改变了比你要求它更多的内容。
- en: I’m not convinced ChatGPT would have saved me much time here. I find that it
    works better for writing simple functions and algorithms.
  id: totrans-319
  prefs: []
  type: TYPE_NORMAL
  zh: 我不确定 ChatGPT 在这里能为我节省多少时间。我发现它更适合编写简单的函数和算法。
- en: It isn’t ready for writing complete apps (yet?).
  id: totrans-320
  prefs: []
  type: TYPE_NORMAL
  zh: 它还没有准备好编写完整的应用程序（尚未？）。
