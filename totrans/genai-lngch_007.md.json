["```\n@dataclass(frozen=True)  # frozen means that the class cannot be modified after creation. This is useful for storing data in databases or other persistent storages (e.g., files).\nclass Customer:\n    cust_id : str = field()   # this defines how to create instances from the class; it's called \"field\" because we're creating fields within our object/instance\n    firstname : str = \"\"      # these are default values if no value was provided when instantiating objects using this class\n    lastname : str = \"\"       # note that there can only ever exist one instance variable per line - you'll get errors otherwise!\n    def __post_init__(self):\n        \"\"\"This method runs automatically once upon instantiation\"\"\"\n        self._validate_cust_id()    # validate input before saving anything into memory\n        self.__set_fullname__()     # set full name based on given inputs\n    @property        # getter function used by Python interpreter whenever trying to access property directly instead of through. notation e.g.: myobj.firstname vs just myobj.firstname()\n    def fullname(self)->str:\n        return f\"{self.lastname}, {self.firstname}\"\n    ## private methods below here\n    ### validation functions go here\n    def _validate_cust_id(self):\n        assert len(self.cust_id)==8, \\\n            ValueError(\"Customer ID must have exactly eight characters\")\n        try:\n            int(self.cust_id[0]) == True\n        except Exception as err:\n            raise TypeError('First character of CustID should be numeric') from None\n    #### setter functions go here\n    def __set_fullname__(self):\n        '''sets the customers' full name'''\n        names = [x.strip().title() for x in re.split(\"[\\W]+\", self.firstname)] + [''] * max((1,-len([y.strip().title() for y in re.split(\"[\\W]+\", self.lastname)])) )\n        print(names)\n        self.firstname=' '.join(filter(None,[n[:3]for n in reversed(names)])+[''])\n        self.lastname =''.join([' '*(4-len(l))+' '+ l[-2:]if not l=='I' else '' for l in filter(None,[n[:-2].upper()+','*bool(re.search('[aeiou]',n))+n[-2:].upper() for n in reversed(names)])]).rstrip(',') \n```", "```\nimport re\nfrom dataclasses import dataclass, field\n```", "```\n\"\"\"Customer data model.\nHere we implement our data model for customers, a dataclass with\nfields firstname, lastname, customer_id (a hash).\n\"\"\"\n```", "```\n@dataclass(frozen=True)  # frozen means that the object cannot be modified after creation!\nclass Customer:\n    \"\"\"A class representing one single customer.\"\"\"\n    firstname: str = \"\"\n    lastname: str = \"\"\n    id_: int = field(default=-1024, init=False)\n\n    def __post_init__(self):\n        self.__hash__()\n\n    @property    \n    def fullname(self)->str: \n        return f\"{self.firstname} {self.lastname}\"    \n\n    def __eq__(self, other:\"Customer\")->bool:        \n        if isinstance(other, type(self)):\n            return all([\n                getattr(self, attr)==getattr(other,attr) \n                for attr in [\"firstname\", \"lastname\"]])            \n        else: \n            raise TypeError(\"Cannot compare different types\")        \n\n    def __lt__(self, other:\"Customer\"):  \n        try:            \n            assert len({type(x) for x in [self, other]})==1             \n\n            if not hasattr(self,\"fullname\"):                \n                setattr(self, 'fullname',f'{self.firstname}{self.lastname}')\n\n            if not hasattr(other,'fullname'):               \n                setattr(other, 'fullname',f'{other.firstname}{other.lastname}')\n            return self.fullname < other.fullname\n\n        except AssertionError as e:  \n            print('Error:',e )\n\n    def __repr__(self):    \n        return f\"Customer('{self.firstname}', '{self.lastname}','{hex(abs(self._customer_id))[-6:]})\"   \n\n    def __hash__(self):       \n        hsh = abs(hash((self.firstname+self.lastname))) % ((sys.maxsize + 1)*2)+ sys.maxsize*3      \n        self.id_=hsh         \n\n        return hsh\n```", "```\nfrom langchain import HuggingFaceHub\nllm = HuggingFaceHub(\n    task=\"text-generation\",\n    repo_id=\"HuggingFaceH4/starchat-alpha\",\n    model_kwargs={\n        \"temperature\": 0.5,\n        \"max_length\": 1000\n    }\n)\nprint(llm(text))\n```", "```\nfrom transformers import AutoModelForCausalLM, AutoTokenizer, pipeline\ncheckpoint = \"Salesforce/codegen-350M-mono\"\nmodel = AutoModelForCausalLM.from_pretrained(checkpoint)\ntokenizer = AutoTokenizer.from_pretrained(checkpoint)\npipe = pipeline(\n    task=\"text-generation\",\n    model=model,\n    tokenizer=tokenizer,\n    max_new_tokens=500\n)\ntext = \"\"\"\ndef calculate_primes(n):\n    \\\"\\\"\\\"Create a list of consecutive integers from 2 up to N.\n    For example:\n    >>> calculate_primes(20)\n    Output: [2, 3, 5, 7, 11, 13, 17, 19]\n    \\\"\\\"\\\"\n\"\"\"\n```", "```\ncompletion = pipe(text)\nprint(completion[0][\"generated_text\"])\n```", "```\nllm = HuggingFacePipeline(pipeline=pipe)\nllm(text)\n```", "```\nfrom langchain.llms.openai import OpenAI\nfrom langchain.agents import load_tools, initialize_agent, AgentType\nllm = OpenAI()\ntools = load_tools([\"python_repl\"])\nagent = initialize_agent(tools, llm, agent=AgentType.ZERO_SHOT_REACT_DESCRIPTION, verbose=True)\nresult = agent(\"What are the prime numbers until 20?\")\nprint(result)\n```", "```\nEntering new AgentExecutor chain...\nI need to find a way to check if a number is prime\nAction: Python_REPL\nAction Input: \ndef is_prime(n):\n    for i in range(2, n):\n        if n % i == 0:\n            return False\n    return True\nObservation: \nThought: I need to loop through the numbers to check if they are prime\nAction: Python_REPL\nAction Input: \nprime_numbers = []\nfor i in range(2, 21):\n    if is_prime(i):\n        prime_numbers.append(i)\nObservation:\nThought: I now know the prime numbers until 20\nFinal Answer: 2, 3, 5, 7, 11, 13, 17, 19\nFinished chain.\n{'input': 'What are the prime numbers until 20?', 'output': '2, 3, 5, 7, 11, 13, 17, 19'}\n```", "```\nfrom metagpt.software_company import SoftwareCompany\nfrom metagpt.roles import ProjectManager, ProductManager, Architect, Engineer\nasync def startup(idea: str, investment: float = 3.0, n_round: int = 5):\n    \"\"\"Run a startup. Be a boss.\"\"\"\n    company = SoftwareCompany()\n    company.hire([ProductManager(), Architect(), ProjectManager(), Engineer()])\n    company.invest(investment)\n    company.start_project(idea)\n    await company.run(n_round=n_round)\n```", "```\nllm = OpenAI()\nplanner = load_chat_planner(llm)\nexecutor = load_agent_executor(\n    llm,\n    tools,\n    verbose=True,\n)\nagent_executor = PlanAndExecute(\n    planner=planner,\n    executor=executor,\n    verbose=True,\n    handle_parsing_errors=\"Check your output and make sure it conforms!\",\n    return_intermediate_steps=True\n)\nagent_executor.run(\"Write a tetris game in python!\")\n```", "```\nDEV_PROMPT = (\n    \"You are a software engineer who writes Python code given tasks or objectives. \"\n    \"Come up with a python code for this task: {task}\"\n    \"Please use PEP8 syntax and comments!\"\n)\nsoftware_prompt = PromptTemplate.from_template(DEV_PROMPT)\nsoftware_llm = LLMChain(\n    llm=OpenAI(\n        temperature=0,\n        max_tokens=1000\n    ),\n    prompt=software_prompt\n)\n```", "```\nsoftware_dev = PythonDeveloper(llm_chain=software_llm)\ncode_tool = Tool.from_function(\n    func=software_dev.run,\n    name=\"PythonREPL\",\n    description=(\n        \"You are a software engineer who writes Python code given a function description or task.\"\n    ),\n    args_schema=PythonExecutorInput\n)\n```", "```\nclass PythonDeveloper():\n    \"\"\"Execution environment for Python code.\"\"\"\n    def __init__(\n            self,\n            llm_chain: Chain,\n    ):\n        self. llm_chain = llm_chain\n    def write_code(self, task: str) -> str:\n        return self.llm_chain.run(task)\n    def run(\n            self,\n            task: str,\n    ) -> str:\n        \"\"\"Generate and Execute Python code.\"\"\"\n        code = self.write_code(task)\n        try:\n            return self.execute_code(code, \"main.py\")\n        except Exception as ex:\n            return str(ex)\n    def execute_code(self, code: str, filename: str) -> str:\n        \"\"\"Execute a python code.\"\"\"\n        try:\n            with set_directory(Path(self.path)):\n                ns = dict(__file__=filename, __name__=\"__main__\")\n                function = compile(code, \"<>\", \"exec\")\n                with redirect_stdout(io.StringIO()) as f:\n                    exec(function, ns)\n                    return f.getvalue()\n```", "```\nWrite a basic tetris game in Python with no syntax errors, properly closed strings, brackets, parentheses, quotes, commas, colons, semi-colons, and braces, no other potential syntax errors, and including the necessary imports for the game\n```", "```\nddg_search = DuckDuckGoSearchResults()\ntools = [\n    codetool,\n    Tool(\n        name=\"DDGSearch\",\n        func=ddg_search.run,\n        description=(\n            \"Useful for research and understanding background of objectives. \"\n            \"Input: an objective. \"\n            \"Output: background information about the objective. \"\n        )\n    )\n]\n```", "```\n# This code is written in PEP8 syntax and includes comments to explain the code\n# Import the necessary modules\nimport pygame\nimport sys\n# Initialize pygame\npygame.init()\n# Set the window size\nwindow_width = 800\nwindow_height = 600\n# Create the window\nwindow = pygame.display.set_mode((window_width, window_height))\n# Set the window title\npygame.display.set_caption('My Game')\n# Set the background color\nbackground_color = (255, 255, 255)\n# Main game loop\nwhile True:\n    # Check for events\n    for event in pygame.event.get():\n        # Quit if the user closes the window\n        if event.type == pygame.QUIT:\n            pygame.quit()\n            sys.exit()\n    # Fill the background with the background color\n    window.fill(background_color)\n    # Update the display\n    pygame.display.update()\n```"]